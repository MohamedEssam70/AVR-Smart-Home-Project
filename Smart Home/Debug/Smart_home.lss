
Smart_home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000060ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002c8  00800060  000060ba  0000614e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800328  00800328  00006416  2**0
                  ALLOC
  3 .stab         00006024  00000000  00000000  00006418  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001e86  00000000  00000000  0000c43c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000e2c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000e402  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000e572  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000101bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000110a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00011e54  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00011fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00012241  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012a0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 dd 2b 	jmp	0x57ba	; 0x57ba <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea eb       	ldi	r30, 0xBA	; 186
      68:	f0 e6       	ldi	r31, 0x60	; 96
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 32       	cpi	r26, 0x28	; 40
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a8 e2       	ldi	r26, 0x28	; 40
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 32       	cpi	r26, 0x2E	; 46
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <main>
      8a:	0c 94 5b 30 	jmp	0x60b6	; 0x60b6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 17 30 	jmp	0x602e	; 0x602e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 ee       	ldi	r26, 0xE0	; 224
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 33 30 	jmp	0x6066	; 0x6066 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 23 30 	jmp	0x6046	; 0x6046 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3f 30 	jmp	0x607e	; 0x607e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 23 30 	jmp	0x6046	; 0x6046 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3f 30 	jmp	0x607e	; 0x607e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 17 30 	jmp	0x602e	; 0x602e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 ee       	ldi	r24, 0xE0	; 224
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 33 30 	jmp	0x6066	; 0x6066 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 23 30 	jmp	0x6046	; 0x6046 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 3f 30 	jmp	0x607e	; 0x607e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 23 30 	jmp	0x6046	; 0x6046 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 3f 30 	jmp	0x607e	; 0x607e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 23 30 	jmp	0x6046	; 0x6046 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 3f 30 	jmp	0x607e	; 0x607e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 27 30 	jmp	0x604e	; 0x604e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 43 30 	jmp	0x6086	; 0x6086 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <SPI_vidSPIInitMaster>:
#include "../DIO/DIO_int.h"
#include <avr/io.h>


void SPI_vidSPIInitMaster (void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	DDRB |= (SPI_u8_MOSI)|(SPI_u8_SS)|(SPI_u8_SCK);
     b4e:	a7 e3       	ldi	r26, 0x37	; 55
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e3       	ldi	r30, 0x37	; 55
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 6b       	ori	r24, 0xB0	; 176
     b5a:	8c 93       	st	X, r24
	/*set node as master*/
	SPI_u8_SPCR_REG = SPI_u8_ASSIGN_NODE_AS_MASTER;
     b5c:	ed e2       	ldi	r30, 0x2D	; 45
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	80 e1       	ldi	r24, 0x10	; 16
     b62:	80 83       	st	Z, r24
	/*set the leading edge according to confg. file*/
//	SPI_u8_SPCR_REG |= SPI_u8_CLOCK_POLARITY;
	/*set the phase at the leading edge according to config. file*/
//	SPI_u8_SPCR_REG |= SPI_u8_CLOCK_PHASE;
	/*set clock prescaler according to config. file*/
	SPI_u8_SPCR_REG |= SPI_u8_CLOCK_RATE;
     b64:	ad e2       	ldi	r26, 0x2D	; 45
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	ed e2       	ldi	r30, 0x2D	; 45
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	81 60       	ori	r24, 0x01	; 1
     b70:	8c 93       	st	X, r24
	/*enable SPI*/
	SPI_u8_SPCR_REG |= SPI_u8_ENABLE;
     b72:	ad e2       	ldi	r26, 0x2D	; 45
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	ed e2       	ldi	r30, 0x2D	; 45
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	80 64       	ori	r24, 0x40	; 64
     b7e:	8c 93       	st	X, r24
}
     b80:	cf 91       	pop	r28
     b82:	df 91       	pop	r29
     b84:	08 95       	ret

00000b86 <SPI_vidSPIInitSlave>:

void SPI_vidSPIInitSlave (void)
{
     b86:	df 93       	push	r29
     b88:	cf 93       	push	r28
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
	SPI_u8_DDRB_REG |= (SPI_u8_MISO);
     b8e:	a7 e3       	ldi	r26, 0x37	; 55
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e7 e3       	ldi	r30, 0x37	; 55
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	80 64       	ori	r24, 0x40	; 64
     b9a:	8c 93       	st	X, r24
	/*set node as master*/
	SPI_u8_SPCR_REG = SPI_u8_ASSIGN_NODE_AS_SLAVE;
     b9c:	ed e2       	ldi	r30, 0x2D	; 45
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	10 82       	st	Z, r1
	/*set the leading edge according to confg. file*/
//	SPI_u8_SPCR_REG |= SPI_u8_CLOCK_POLARITY;
	/*set the phase at the leading edge according to config. file*/
//	SPI_u8_SPCR_REG |= SPI_u8_CLOCK_PHASE;
	/*enable SPI*/
	SPI_u8_SPCR_REG |= SPI_u8_ENABLE;
     ba2:	ad e2       	ldi	r26, 0x2D	; 45
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	ed e2       	ldi	r30, 0x2D	; 45
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 64       	ori	r24, 0x40	; 64
     bae:	8c 93       	st	X, r24
}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <SPI_vidTransceive>:


u8 SPI_vidTransceive(u8 Copy_u8Data){
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	00 d0       	rcall	.+0      	; 0xbbc <SPI_vidTransceive+0x6>
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8Temp;
	/*set the data in SPDR in order to transmit it*/
	SPI_u8_SPDR_REG = Copy_u8Data;
     bc2:	ef e2       	ldi	r30, 0x2F	; 47
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	8a 81       	ldd	r24, Y+2	; 0x02
     bc8:	80 83       	st	Z, r24
	while(!((SPI_u8_SPSR_REG & SPI_u8_INTERRUPT_FLAG) >> SPI_u8_INTERRUPT_FLAG_BIT));
     bca:	ee e2       	ldi	r30, 0x2E	; 46
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	88 1f       	adc	r24, r24
     bd2:	88 27       	eor	r24, r24
     bd4:	88 1f       	adc	r24, r24
     bd6:	88 2f       	mov	r24, r24
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	90 70       	andi	r25, 0x00	; 0
     bdc:	00 97       	sbiw	r24, 0x00	; 0
     bde:	a9 f3       	breq	.-22     	; 0xbca <SPI_vidTransceive+0x14>
	local_u8Temp = SPI_u8_SPSR_REG;
     be0:	ee e2       	ldi	r30, 0x2E	; 46
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	89 83       	std	Y+1, r24	; 0x01
	return SPI_u8_SPDR_REG;
     be8:	ef e2       	ldi	r30, 0x2F	; 47
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
}
     bee:	0f 90       	pop	r0
     bf0:	0f 90       	pop	r0
     bf2:	cf 91       	pop	r28
     bf4:	df 91       	pop	r29
     bf6:	08 95       	ret

00000bf8 <SPI_vidStopConnection>:


void SPI_vidStopConnection(void){
     bf8:	df 93       	push	r29
     bfa:	cf 93       	push	r28
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
	/*disable SPI*/
	SPI_u8_SPCR_REG &= (SPI_u8_DISABLE);
     c00:	ad e2       	ldi	r26, 0x2D	; 45
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	ed e2       	ldi	r30, 0x2D	; 45
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	8f 7b       	andi	r24, 0xBF	; 191
     c0c:	8c 93       	st	X, r24
}
     c0e:	cf 91       	pop	r28
     c10:	df 91       	pop	r29
     c12:	08 95       	ret

00000c14 <GPT_vidConfigure>:
}GPT_timerConfigure;


GPT_timerConfigure timer0Configure = {GPT_u8_WAVE_FORM_NORMAL, GPT_u8_COM_TOGGLE, GPT_u8_PRESCALER1024};

void GPT_vidConfigure(u8 Copy_u8timer){
     c14:	df 93       	push	r29
     c16:	cf 93       	push	r28
     c18:	0f 92       	push	r0
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62
     c1e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8timer == GPT_u8_TIMER0){
     c20:	89 81       	ldd	r24, Y+1	; 0x01
     c22:	88 23       	and	r24, r24
     c24:	59 f4       	brne	.+22     	; 0xc3c <GPT_vidConfigure+0x28>
		GPT_u8_TCCR0_REG = (timer0Configure.waveFormMode | timer0Configure.compareMatchOutput | timer0Configure.clockSelect);
     c26:	e3 e5       	ldi	r30, 0x53	; 83
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	90 91 e8 02 	lds	r25, 0x02E8
     c2e:	80 91 e9 02 	lds	r24, 0x02E9
     c32:	98 2b       	or	r25, r24
     c34:	80 91 ea 02 	lds	r24, 0x02EA
     c38:	89 2b       	or	r24, r25
     c3a:	80 83       	st	Z, r24
		} else if(Copy_u8timer == GPT_u8_TIMER1){

		} else if(Copy_u8timer == GPT_u8_TIMER2){

		}
}
     c3c:	0f 90       	pop	r0
     c3e:	cf 91       	pop	r28
     c40:	df 91       	pop	r29
     c42:	08 95       	ret

00000c44 <GPT_vidStartTimer>:


void GPT_vidStartTimer(u8 Copy_u8timer, u8 Copy_u8countOVFtime, u8 Copy_u8preloadValue){
     c44:	df 93       	push	r29
     c46:	cf 93       	push	r28
     c48:	00 d0       	rcall	.+0      	; 0xc4a <GPT_vidStartTimer+0x6>
     c4a:	0f 92       	push	r0
     c4c:	cd b7       	in	r28, 0x3d	; 61
     c4e:	de b7       	in	r29, 0x3e	; 62
     c50:	89 83       	std	Y+1, r24	; 0x01
     c52:	6a 83       	std	Y+2, r22	; 0x02
     c54:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8timer == GPT_u8_TIMER0){
     c56:	89 81       	ldd	r24, Y+1	; 0x01
     c58:	88 23       	and	r24, r24
     c5a:	a1 f4       	brne	.+40     	; 0xc84 <GPT_vidStartTimer+0x40>

		GPT_u8preloadValue = Copy_u8preloadValue;
     c5c:	8b 81       	ldd	r24, Y+3	; 0x03
     c5e:	80 93 2b 03 	sts	0x032B, r24

		GPT_u8_TCNT0_REG = GPT_u8preloadValue;
     c62:	e2 e5       	ldi	r30, 0x52	; 82
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 91 2b 03 	lds	r24, 0x032B
     c6a:	80 83       	st	Z, r24

		GPT_u8countOVFtime = Copy_u8countOVFtime;
     c6c:	8a 81       	ldd	r24, Y+2	; 0x02
     c6e:	80 93 2c 03 	sts	0x032C, r24

		GPT_u8_TIMSK_REG |= GPT_u8_OVERFLOW_INT;
     c72:	a9 e5       	ldi	r26, 0x59	; 89
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	e9 e5       	ldi	r30, 0x59	; 89
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	81 60       	ori	r24, 0x01	; 1
     c7e:	8c 93       	st	X, r24

		GINT_vidEnable();
     c80:	0e 94 59 06 	call	0xcb2	; 0xcb2 <GINT_vidEnable>

	}
}
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	cf 91       	pop	r28
     c8c:	df 91       	pop	r29
     c8e:	08 95       	ret

00000c90 <GPT_vidStopTimer>:



void GPT_vidStopTimer(u8 Copy_u8timer){
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	0f 92       	push	r0
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(GPT_u8_TIMSK_REG, GPT_u8_OVERFLOW_INT);
     c9c:	a9 e5       	ldi	r26, 0x59	; 89
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e9 e5       	ldi	r30, 0x59	; 89
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	8e 7f       	andi	r24, 0xFE	; 254
     ca8:	8c 93       	st	X, r24
	//GPT_u8_TIMSK_REG |= 0x00;
}
     caa:	0f 90       	pop	r0
     cac:	cf 91       	pop	r28
     cae:	df 91       	pop	r29
     cb0:	08 95       	ret

00000cb2 <GINT_vidEnable>:
/* Name: GINT_vidEnable
 * Description: set bit 7 in the SREG
 * Arguments: void
 * Return:	void
 */
void GINT_vidEnable(void){
     cb2:	df 93       	push	r29
     cb4:	cf 93       	push	r28
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
	EXTI_u8_SREG = SREG_BIT_I;
     cba:	ef e5       	ldi	r30, 0x5F	; 95
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 e8       	ldi	r24, 0x80	; 128
     cc0:	80 83       	st	Z, r24
}
     cc2:	cf 91       	pop	r28
     cc4:	df 91       	pop	r29
     cc6:	08 95       	ret

00000cc8 <GINT_vidDisable>:
/* Name: GINT_vidDisable
 * Description: clear bit 7 in the SREG
 * Arguments: void
 * Return:	void
 */
void GINT_vidDisable(void){
     cc8:	df 93       	push	r29
     cca:	cf 93       	push	r28
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(EXTI_u8_SREG, SREG_BIT_I);
     cd0:	af e5       	ldi	r26, 0x5F	; 95
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	ef e5       	ldi	r30, 0x5F	; 95
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8f 77       	andi	r24, 0x7F	; 127
     cdc:	8c 93       	st	X, r24
}
     cde:	cf 91       	pop	r28
     ce0:	df 91       	pop	r29
     ce2:	08 95       	ret

00000ce4 <EEPROM_vidwriteByte>:
																			EEPROM space. The EEPROM data bytes are addressed
																			linearly between 0 and 1023)
 * 				second Argument: Copy_u8EEPROM_Data, 				options (any 8-bit data)
 * Return:	void
 */
void EEPROM_vidwriteByte(u16 Copy_u16EEPROM_Address, u8 Copy_u8EEPROM_Data){
     ce4:	df 93       	push	r29
     ce6:	cf 93       	push	r28
     ce8:	00 d0       	rcall	.+0      	; 0xcea <EEPROM_vidwriteByte+0x6>
     cea:	0f 92       	push	r0
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	9a 83       	std	Y+2, r25	; 0x02
     cf2:	89 83       	std	Y+1, r24	; 0x01
     cf4:	6b 83       	std	Y+3, r22	; 0x03
	/* wait for completion of previous write */
	while(EEPROM_u8_EECR_REG & EEPROM_u8_EEWE);
     cf6:	ec e3       	ldi	r30, 0x3C	; 60
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	88 2f       	mov	r24, r24
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	82 70       	andi	r24, 0x02	; 2
     d02:	90 70       	andi	r25, 0x00	; 0
     d04:	00 97       	sbiw	r24, 0x00	; 0
     d06:	b9 f7       	brne	.-18     	; 0xcf6 <EEPROM_vidwriteByte+0x12>
	/* set up address and data registers */
	EEPROM_u16_EEAR_REG = Copy_u16EEPROM_Address;
     d08:	ee e3       	ldi	r30, 0x3E	; 62
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	9a 81       	ldd	r25, Y+2	; 0x02
     d10:	91 83       	std	Z+1, r25	; 0x01
     d12:	80 83       	st	Z, r24
	EEPROM_u8_EEDR_REG = Copy_u8EEPROM_Data;
     d14:	ed e3       	ldi	r30, 0x3D	; 61
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	8b 81       	ldd	r24, Y+3	; 0x03
     d1a:	80 83       	st	Z, r24
	/* write logical one to EEMWE */
	EEPROM_u8_EECR_REG |= EEPROM_u8_EEMWE;
     d1c:	ac e3       	ldi	r26, 0x3C	; 60
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	ec e3       	ldi	r30, 0x3C	; 60
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	84 60       	ori	r24, 0x04	; 4
     d28:	8c 93       	st	X, r24
/*	asm("sbi %1, %0"
	:"=m"(EECR)
	:"Ir"(EEMWE)
	:"cc");*/
	/* start EEPROM write by setting EEWE */
	EEPROM_u8_EECR_REG |= EEPROM_u8_EEWE;
     d2a:	ac e3       	ldi	r26, 0x3C	; 60
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	ec e3       	ldi	r30, 0x3C	; 60
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	82 60       	ori	r24, 0x02	; 2
     d36:	8c 93       	st	X, r24
	//__asm__ volatile("sbi EECR,EEWE");
/*	asm("sbi %1, %0"
		:"=m"(EECR)
		:"Ir"(EEWE)
		:"cc");*/
}
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	cf 91       	pop	r28
     d40:	df 91       	pop	r29
     d42:	08 95       	ret

00000d44 <EEPROM_u8readByte>:
 * Arguments:	first Argument: Copy_u16EEPROM_Address, 			options (specify the EEPROM address in the 1024bytes
																			EEPROM space. The EEPROM data bytes are addressed
																			linearly between 0 and 1023)
 * Return:	u8 -----> return the data stored in the EEDR
 */
u8 EEPROM_u8readByte(u16 Copy_u16EEPROM_Address){
     d44:	df 93       	push	r29
     d46:	cf 93       	push	r28
     d48:	00 d0       	rcall	.+0      	; 0xd4a <EEPROM_u8readByte+0x6>
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	9a 83       	std	Y+2, r25	; 0x02
     d50:	89 83       	std	Y+1, r24	; 0x01
	/* wait for completion of previous write */
	while(EEPROM_u8_EECR_REG & EEPROM_u8_EEWE);
     d52:	ec e3       	ldi	r30, 0x3C	; 60
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	88 2f       	mov	r24, r24
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	82 70       	andi	r24, 0x02	; 2
     d5e:	90 70       	andi	r25, 0x00	; 0
     d60:	00 97       	sbiw	r24, 0x00	; 0
     d62:	b9 f7       	brne	.-18     	; 0xd52 <EEPROM_u8readByte+0xe>
	/* set up address register */
	EEPROM_u16_EEAR_REG = Copy_u16EEPROM_Address;
     d64:	ee e3       	ldi	r30, 0x3E	; 62
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	9a 81       	ldd	r25, Y+2	; 0x02
     d6c:	91 83       	std	Z+1, r25	; 0x01
     d6e:	80 83       	st	Z, r24
	/* start EEPROM read by setting EERE */
	EEPROM_u8_EECR_REG |= EEPROM_u8_EERE;
     d70:	ac e3       	ldi	r26, 0x3C	; 60
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	ec e3       	ldi	r30, 0x3C	; 60
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	81 60       	ori	r24, 0x01	; 1
     d7c:	8c 93       	st	X, r24
	/* return data from EEDR */
	return EEPROM_u8_EEDR_REG;
     d7e:	ed e3       	ldi	r30, 0x3D	; 61
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
}
     d84:	0f 90       	pop	r0
     d86:	0f 90       	pop	r0
     d88:	cf 91       	pop	r28
     d8a:	df 91       	pop	r29
     d8c:	08 95       	ret

00000d8e <DIO_vidInit>:
/* Name: DIO_vidInit
 * Description: initialize all the MC pins according to "DIO_cfg.h"
 * Arguments: void
 * Return:	void
 */
void DIO_vidInit(void){
     d8e:	df 93       	push	r29
     d90:	cf 93       	push	r28
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
	 SETTING DDR OPTIONS:
	 * INPUT  ---> 0
	 * OUTPUT ---> 1
	*/
	// Set DDR values
	DIO_u8_DDRA_REG = CONC(DIO_u8_PORTA_PIN7, DIO_u8_PORTA_PIN6, DIO_u8_PORTA_PIN5
     d96:	ea e3       	ldi	r30, 0x3A	; 58
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	8f ef       	ldi	r24, 0xFF	; 255
     d9c:	80 83       	st	Z, r24
								, DIO_u8_PORTA_PIN4 , DIO_u8_PORTA_PIN3, DIO_u8_PORTA_PIN2
								, DIO_u8_PORTA_PIN1, DIO_u8_PORTA_PIN0);

	DIO_u8_DDRB_REG = CONC(DIO_u8_PORTB_PIN7, DIO_u8_PORTB_PIN6, DIO_u8_PORTB_PIN5
     d9e:	e7 e3       	ldi	r30, 0x37	; 55
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	8f ef       	ldi	r24, 0xFF	; 255
     da4:	80 83       	st	Z, r24
							, DIO_u8_PORTB_PIN4 , DIO_u8_PORTB_PIN3, DIO_u8_PORTB_PIN2
							, DIO_u8_PORTB_PIN1, DIO_u8_PORTB_PIN0);

	DIO_u8_DDRC_REG = CONC(DIO_u8_PORTC_PIN7, DIO_u8_PORTC_PIN6, DIO_u8_PORTC_PIN5
     da6:	e4 e3       	ldi	r30, 0x34	; 52
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	8f e3       	ldi	r24, 0x3F	; 63
     dac:	80 83       	st	Z, r24
							, DIO_u8_PORTC_PIN4 , DIO_u8_PORTC_PIN3, DIO_u8_PORTC_PIN2
							, DIO_u8_PORTC_PIN1, DIO_u8_PORTC_PIN0);

	DIO_u8_DDRD_REG = CONC(DIO_u8_PORTD_PIN7, DIO_u8_PORTD_PIN6, DIO_u8_PORTD_PIN5
     dae:	e1 e3       	ldi	r30, 0x31	; 49
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	8c ef       	ldi	r24, 0xFC	; 252
     db4:	80 83       	st	Z, r24
	#define DIO_u8_OUTPUT_LOW				0
	#define DIO_u8_OUTPUT_HIGH				1
	#define DIO_u8_INPUT_FLOATING			0
	#define DIO_u8_INPUT_PULLUP				1
	// Set PORT values
	DIO_u8_PORTA_REG = CONC(DIO_u8_PORTA_PIN7, DIO_u8_PORTA_PIN6, DIO_u8_PORTA_PIN5
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	10 82       	st	Z, r1
								, DIO_u8_PORTA_PIN4 , DIO_u8_PORTA_PIN3, DIO_u8_PORTA_PIN2
								, DIO_u8_PORTA_PIN1, DIO_u8_PORTA_PIN0);

	DIO_u8_PORTB_REG = CONC(DIO_u8_PORTB_PIN7, DIO_u8_PORTB_PIN6, DIO_u8_PORTB_PIN5
     dbc:	e8 e3       	ldi	r30, 0x38	; 56
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	10 82       	st	Z, r1
							, DIO_u8_PORTB_PIN4 , DIO_u8_PORTB_PIN3, DIO_u8_PORTB_PIN2
							, DIO_u8_PORTB_PIN1, DIO_u8_PORTB_PIN0);

	DIO_u8_PORTC_REG = CONC(DIO_u8_PORTC_PIN7, DIO_u8_PORTC_PIN6, DIO_u8_PORTC_PIN5
     dc2:	e5 e3       	ldi	r30, 0x35	; 53
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	88 ef       	ldi	r24, 0xF8	; 248
     dc8:	80 83       	st	Z, r24
							, DIO_u8_PORTC_PIN4 , DIO_u8_PORTC_PIN3, DIO_u8_PORTC_PIN2
							, DIO_u8_PORTC_PIN1, DIO_u8_PORTC_PIN0);

	DIO_u8_PORTD_REG = CONC(DIO_u8_PORTD_PIN7, DIO_u8_PORTD_PIN6, DIO_u8_PORTD_PIN5
     dca:	e2 e3       	ldi	r30, 0x32	; 50
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	83 e0       	ldi	r24, 0x03	; 3
     dd0:	80 83       	st	Z, r24
	#define DIO_u8_OUTPUT_LOW				1
	#define DIO_u8_OUTPUT_HIGH				1
	#define DIO_u8_INPUT_FLOATING			0
	#define DIO_u8_INPUT_PULLUP				0

}
     dd2:	cf 91       	pop	r28
     dd4:	df 91       	pop	r29
     dd6:	08 95       	ret

00000dd8 <DIO_enuSetPinValue>:
 * 				first Argument: Copy_u8Port, 			options (DIO_u8_PORTA, DIO_u8_PORTB, DIO_u8_PORTC, DIO_u8_PORTD)
 * 				second Argument: Copy_u8Pin, 			options (from DIO_u8_PIN0 to DIO_u8_PIN7)
 * 				third Argument: Copy_u8Value, 			options (DIO_u8_HIGH, DIO_u8_LOW)
 * Return:	Error Status -----> DIO_OK , DIO_NOK
 */
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value){
     dd8:	df 93       	push	r29
     dda:	cf 93       	push	r28
     ddc:	cd b7       	in	r28, 0x3d	; 61
     dde:	de b7       	in	r29, 0x3e	; 62
     de0:	2e 97       	sbiw	r28, 0x0e	; 14
     de2:	0f b6       	in	r0, 0x3f	; 63
     de4:	f8 94       	cli
     de6:	de bf       	out	0x3e, r29	; 62
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	cd bf       	out	0x3d, r28	; 61
     dec:	8a 83       	std	Y+2, r24	; 0x02
     dee:	6b 83       	std	Y+3, r22	; 0x03
     df0:	4c 83       	std	Y+4, r20	; 0x04
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
     df2:	19 82       	std	Y+1, r1	; 0x01
	/*check arguments*/
	if((Copy_u8Port > DIO_u8_PORTD) || (Copy_u8Pin > DIO_u8_PIN7) || (Copy_u8Value > DIO_u8_HIGH)){
     df4:	8a 81       	ldd	r24, Y+2	; 0x02
     df6:	84 30       	cpi	r24, 0x04	; 4
     df8:	30 f4       	brcc	.+12     	; 0xe06 <DIO_enuSetPinValue+0x2e>
     dfa:	8b 81       	ldd	r24, Y+3	; 0x03
     dfc:	88 30       	cpi	r24, 0x08	; 8
     dfe:	18 f4       	brcc	.+6      	; 0xe06 <DIO_enuSetPinValue+0x2e>
     e00:	8c 81       	ldd	r24, Y+4	; 0x04
     e02:	82 30       	cpi	r24, 0x02	; 2
     e04:	18 f0       	brcs	.+6      	; 0xe0c <DIO_enuSetPinValue+0x34>
		Local_enuErrorStatus = DIO_NOK;
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	89 83       	std	Y+1, r24	; 0x01
     e0a:	d7 c0       	rjmp	.+430    	; 0xfba <DIO_enuSetPinValue+0x1e2>
	}
	else {
	/*set pin value*/
		switch (Copy_u8Port){
     e0c:	8a 81       	ldd	r24, Y+2	; 0x02
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	3e 87       	std	Y+14, r19	; 0x0e
     e14:	2d 87       	std	Y+13, r18	; 0x0d
     e16:	8d 85       	ldd	r24, Y+13	; 0x0d
     e18:	9e 85       	ldd	r25, Y+14	; 0x0e
     e1a:	81 30       	cpi	r24, 0x01	; 1
     e1c:	91 05       	cpc	r25, r1
     e1e:	09 f4       	brne	.+2      	; 0xe22 <DIO_enuSetPinValue+0x4a>
     e20:	44 c0       	rjmp	.+136    	; 0xeaa <DIO_enuSetPinValue+0xd2>
     e22:	2d 85       	ldd	r18, Y+13	; 0x0d
     e24:	3e 85       	ldd	r19, Y+14	; 0x0e
     e26:	22 30       	cpi	r18, 0x02	; 2
     e28:	31 05       	cpc	r19, r1
     e2a:	2c f4       	brge	.+10     	; 0xe36 <DIO_enuSetPinValue+0x5e>
     e2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e30:	00 97       	sbiw	r24, 0x00	; 0
     e32:	71 f0       	breq	.+28     	; 0xe50 <DIO_enuSetPinValue+0x78>
     e34:	c2 c0       	rjmp	.+388    	; 0xfba <DIO_enuSetPinValue+0x1e2>
     e36:	2d 85       	ldd	r18, Y+13	; 0x0d
     e38:	3e 85       	ldd	r19, Y+14	; 0x0e
     e3a:	22 30       	cpi	r18, 0x02	; 2
     e3c:	31 05       	cpc	r19, r1
     e3e:	09 f4       	brne	.+2      	; 0xe42 <DIO_enuSetPinValue+0x6a>
     e40:	62 c0       	rjmp	.+196    	; 0xf06 <DIO_enuSetPinValue+0x12e>
     e42:	8d 85       	ldd	r24, Y+13	; 0x0d
     e44:	9e 85       	ldd	r25, Y+14	; 0x0e
     e46:	83 30       	cpi	r24, 0x03	; 3
     e48:	91 05       	cpc	r25, r1
     e4a:	09 f4       	brne	.+2      	; 0xe4e <DIO_enuSetPinValue+0x76>
     e4c:	89 c0       	rjmp	.+274    	; 0xf60 <DIO_enuSetPinValue+0x188>
     e4e:	b5 c0       	rjmp	.+362    	; 0xfba <DIO_enuSetPinValue+0x1e2>
			case DIO_u8_PORTA:
				(Copy_u8Value == DIO_u8_HIGH) ? (DIO_u8_PORTA_REG |= (DIO_u8_SET << Copy_u8Pin)) : (DIO_u8_PORTA_REG &= ~(DIO_u8_SET << Copy_u8Pin));
     e50:	8c 81       	ldd	r24, Y+4	; 0x04
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	a9 f4       	brne	.+42     	; 0xe80 <DIO_enuSetPinValue+0xa8>
     e56:	ab e3       	ldi	r26, 0x3B	; 59
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	eb e3       	ldi	r30, 0x3B	; 59
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	48 2f       	mov	r20, r24
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	02 2e       	mov	r0, r18
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <DIO_enuSetPinValue+0x9c>
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	0a 94       	dec	r0
     e76:	e2 f7       	brpl	.-8      	; 0xe70 <DIO_enuSetPinValue+0x98>
     e78:	84 2b       	or	r24, r20
     e7a:	8c 93       	st	X, r24
     e7c:	9c 91       	ld	r25, X
     e7e:	9d c0       	rjmp	.+314    	; 0xfba <DIO_enuSetPinValue+0x1e2>
     e80:	ab e3       	ldi	r26, 0x3B	; 59
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	eb e3       	ldi	r30, 0x3B	; 59
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	48 2f       	mov	r20, r24
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <DIO_enuSetPinValue+0xc4>
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	2a 95       	dec	r18
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <DIO_enuSetPinValue+0xc0>
     ea0:	80 95       	com	r24
     ea2:	84 23       	and	r24, r20
     ea4:	8c 93       	st	X, r24
     ea6:	2c 91       	ld	r18, X
     ea8:	88 c0       	rjmp	.+272    	; 0xfba <DIO_enuSetPinValue+0x1e2>
				break;
			case DIO_u8_PORTB:
				(Copy_u8Value == DIO_u8_HIGH) ? (DIO_u8_PORTB_REG |= (DIO_u8_SET << Copy_u8Pin)) : (DIO_u8_PORTB_REG &= ~(DIO_u8_SET << Copy_u8Pin));
     eaa:	8c 81       	ldd	r24, Y+4	; 0x04
     eac:	81 30       	cpi	r24, 0x01	; 1
     eae:	a9 f4       	brne	.+42     	; 0xeda <DIO_enuSetPinValue+0x102>
     eb0:	a8 e3       	ldi	r26, 0x38	; 56
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e8 e3       	ldi	r30, 0x38	; 56
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	48 2f       	mov	r20, r24
     ebc:	8b 81       	ldd	r24, Y+3	; 0x03
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	02 2e       	mov	r0, r18
     ec8:	02 c0       	rjmp	.+4      	; 0xece <DIO_enuSetPinValue+0xf6>
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	0a 94       	dec	r0
     ed0:	e2 f7       	brpl	.-8      	; 0xeca <DIO_enuSetPinValue+0xf2>
     ed2:	84 2b       	or	r24, r20
     ed4:	8c 93       	st	X, r24
     ed6:	3c 91       	ld	r19, X
     ed8:	70 c0       	rjmp	.+224    	; 0xfba <DIO_enuSetPinValue+0x1e2>
     eda:	a8 e3       	ldi	r26, 0x38	; 56
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e8 e3       	ldi	r30, 0x38	; 56
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	48 2f       	mov	r20, r24
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	02 2e       	mov	r0, r18
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <DIO_enuSetPinValue+0x120>
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	0a 94       	dec	r0
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <DIO_enuSetPinValue+0x11c>
     efc:	80 95       	com	r24
     efe:	84 23       	and	r24, r20
     f00:	8c 93       	st	X, r24
     f02:	8c 91       	ld	r24, X
     f04:	5a c0       	rjmp	.+180    	; 0xfba <DIO_enuSetPinValue+0x1e2>
				break;
			case DIO_u8_PORTC:
				(Copy_u8Value == DIO_u8_HIGH) ? (DIO_u8_PORTC_REG |= (DIO_u8_SET << Copy_u8Pin)) : (DIO_u8_PORTC_REG &= ~(DIO_u8_SET << Copy_u8Pin));
     f06:	8c 81       	ldd	r24, Y+4	; 0x04
     f08:	81 30       	cpi	r24, 0x01	; 1
     f0a:	a9 f4       	brne	.+42     	; 0xf36 <DIO_enuSetPinValue+0x15e>
     f0c:	a5 e3       	ldi	r26, 0x35	; 53
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e5 e3       	ldi	r30, 0x35	; 53
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	48 2f       	mov	r20, r24
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 2e       	mov	r0, r18
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <DIO_enuSetPinValue+0x152>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	0a 94       	dec	r0
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <DIO_enuSetPinValue+0x14e>
     f2e:	84 2b       	or	r24, r20
     f30:	8c 93       	st	X, r24
     f32:	9c 91       	ld	r25, X
     f34:	42 c0       	rjmp	.+132    	; 0xfba <DIO_enuSetPinValue+0x1e2>
     f36:	a5 e3       	ldi	r26, 0x35	; 53
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e5 e3       	ldi	r30, 0x35	; 53
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	48 2f       	mov	r20, r24
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <DIO_enuSetPinValue+0x17a>
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	2a 95       	dec	r18
     f54:	e2 f7       	brpl	.-8      	; 0xf4e <DIO_enuSetPinValue+0x176>
     f56:	80 95       	com	r24
     f58:	84 23       	and	r24, r20
     f5a:	8c 93       	st	X, r24
     f5c:	2c 91       	ld	r18, X
     f5e:	2d c0       	rjmp	.+90     	; 0xfba <DIO_enuSetPinValue+0x1e2>
				break;
			case DIO_u8_PORTD:
				(Copy_u8Value == DIO_u8_HIGH) ? (DIO_u8_PORTD_REG |= (DIO_u8_SET << Copy_u8Pin)) : (DIO_u8_PORTD_REG &= ~(DIO_u8_SET << Copy_u8Pin));
     f60:	8c 81       	ldd	r24, Y+4	; 0x04
     f62:	81 30       	cpi	r24, 0x01	; 1
     f64:	a9 f4       	brne	.+42     	; 0xf90 <DIO_enuSetPinValue+0x1b8>
     f66:	a2 e3       	ldi	r26, 0x32	; 50
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e2 e3       	ldi	r30, 0x32	; 50
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	48 2f       	mov	r20, r24
     f72:	8b 81       	ldd	r24, Y+3	; 0x03
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	02 2e       	mov	r0, r18
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <DIO_enuSetPinValue+0x1ac>
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	0a 94       	dec	r0
     f86:	e2 f7       	brpl	.-8      	; 0xf80 <DIO_enuSetPinValue+0x1a8>
     f88:	84 2b       	or	r24, r20
     f8a:	8c 93       	st	X, r24
     f8c:	3c 91       	ld	r19, X
     f8e:	15 c0       	rjmp	.+42     	; 0xfba <DIO_enuSetPinValue+0x1e2>
     f90:	a2 e3       	ldi	r26, 0x32	; 50
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e2 e3       	ldi	r30, 0x32	; 50
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	48 2f       	mov	r20, r24
     f9c:	8b 81       	ldd	r24, Y+3	; 0x03
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	02 2e       	mov	r0, r18
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <DIO_enuSetPinValue+0x1d6>
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	0a 94       	dec	r0
     fb0:	e2 f7       	brpl	.-8      	; 0xfaa <DIO_enuSetPinValue+0x1d2>
     fb2:	80 95       	com	r24
     fb4:	84 23       	and	r24, r20
     fb6:	8c 93       	st	X, r24
     fb8:	8c 91       	ld	r24, X
				break;
		}
	}


	return Local_enuErrorStatus;
     fba:	89 81       	ldd	r24, Y+1	; 0x01
}
     fbc:	2e 96       	adiw	r28, 0x0e	; 14
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	cd bf       	out	0x3d, r28	; 61
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	08 95       	ret

00000fce <DIO_enuSetPortValue>:
 * Arguments:
 * 				first Argument: Copy_u8Port, 			options (DIO_u8_PORTA, DIO_u8_PORTB, DIO_u8_PORTC, DIO_u8_PORTD)
 * 				second Argument: Copy_u8Value, 			options (any macro refer to hixa_number)
 * Return:	Error Status -----> DIO_OK , DIO_NOK
 */
DIO_tenuErrorStatus DIO_enuSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value){
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	00 d0       	rcall	.+0      	; 0xfd4 <DIO_enuSetPortValue+0x6>
     fd4:	00 d0       	rcall	.+0      	; 0xfd6 <DIO_enuSetPortValue+0x8>
     fd6:	0f 92       	push	r0
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	8a 83       	std	Y+2, r24	; 0x02
     fde:	6b 83       	std	Y+3, r22	; 0x03
	DIO_tenuErrorStatus Local_enumErrorStatus = DIO_OK;
     fe0:	19 82       	std	Y+1, r1	; 0x01
	/*check arguments*/
	/*if((Copy_u8Port > DIO_u8_PORTD) || (Copy_u8Value > DIO_u8_HIGH)){
		Local_enumErrorStatus = DIO_NOK;
	}
	else{*/
		switch (Copy_u8Port){
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	3d 83       	std	Y+5, r19	; 0x05
     fea:	2c 83       	std	Y+4, r18	; 0x04
     fec:	8c 81       	ldd	r24, Y+4	; 0x04
     fee:	9d 81       	ldd	r25, Y+5	; 0x05
     ff0:	81 30       	cpi	r24, 0x01	; 1
     ff2:	91 05       	cpc	r25, r1
     ff4:	d1 f0       	breq	.+52     	; 0x102a <DIO_enuSetPortValue+0x5c>
     ff6:	2c 81       	ldd	r18, Y+4	; 0x04
     ff8:	3d 81       	ldd	r19, Y+5	; 0x05
     ffa:	22 30       	cpi	r18, 0x02	; 2
     ffc:	31 05       	cpc	r19, r1
     ffe:	2c f4       	brge	.+10     	; 0x100a <DIO_enuSetPortValue+0x3c>
    1000:	8c 81       	ldd	r24, Y+4	; 0x04
    1002:	9d 81       	ldd	r25, Y+5	; 0x05
    1004:	00 97       	sbiw	r24, 0x00	; 0
    1006:	61 f0       	breq	.+24     	; 0x1020 <DIO_enuSetPortValue+0x52>
    1008:	1e c0       	rjmp	.+60     	; 0x1046 <DIO_enuSetPortValue+0x78>
    100a:	2c 81       	ldd	r18, Y+4	; 0x04
    100c:	3d 81       	ldd	r19, Y+5	; 0x05
    100e:	22 30       	cpi	r18, 0x02	; 2
    1010:	31 05       	cpc	r19, r1
    1012:	81 f0       	breq	.+32     	; 0x1034 <DIO_enuSetPortValue+0x66>
    1014:	8c 81       	ldd	r24, Y+4	; 0x04
    1016:	9d 81       	ldd	r25, Y+5	; 0x05
    1018:	83 30       	cpi	r24, 0x03	; 3
    101a:	91 05       	cpc	r25, r1
    101c:	81 f0       	breq	.+32     	; 0x103e <DIO_enuSetPortValue+0x70>
    101e:	13 c0       	rjmp	.+38     	; 0x1046 <DIO_enuSetPortValue+0x78>
			case DIO_u8_PORTA:		DIO_u8_PORTA_REG = Copy_u8Value;		break;
    1020:	eb e3       	ldi	r30, 0x3B	; 59
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	80 83       	st	Z, r24
    1028:	0e c0       	rjmp	.+28     	; 0x1046 <DIO_enuSetPortValue+0x78>
			case DIO_u8_PORTB:		DIO_u8_PORTB_REG = Copy_u8Value;		break;
    102a:	e8 e3       	ldi	r30, 0x38	; 56
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	80 83       	st	Z, r24
    1032:	09 c0       	rjmp	.+18     	; 0x1046 <DIO_enuSetPortValue+0x78>
			case DIO_u8_PORTC:		DIO_u8_PORTC_REG = Copy_u8Value;		break;
    1034:	e5 e3       	ldi	r30, 0x35	; 53
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	80 83       	st	Z, r24
    103c:	04 c0       	rjmp	.+8      	; 0x1046 <DIO_enuSetPortValue+0x78>
			case DIO_u8_PORTD:		DIO_u8_PORTD_REG = Copy_u8Value;		break;
    103e:	e2 e3       	ldi	r30, 0x32	; 50
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	8b 81       	ldd	r24, Y+3	; 0x03
    1044:	80 83       	st	Z, r24
		}
	//}
	return Local_enumErrorStatus;
    1046:	89 81       	ldd	r24, Y+1	; 0x01
}
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	08 95       	ret

00001058 <DIO_enuGetPinValue>:
 * 				first Argument: Copy_u8Port, 			options (DIO_u8_PORTA, DIO_u8_PORTB, DIO_u8_PORTC, DIO_u8_PORTD)
 * 				second Argument: Copy_u8Pin,			options (from DIO_u8_PIN0 to DIO_u8_PIN7)
 * 				third Argument: variable address to store PIN value
 * Return:	Error Status -----> DIO_OK , DIO_NOK
 */
DIO_tenuErrorStatus DIO_enuGetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Add_pu8PinValue) {
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
    1060:	27 97       	sbiw	r28, 0x07	; 7
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	f8 94       	cli
    1066:	de bf       	out	0x3e, r29	; 62
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	cd bf       	out	0x3d, r28	; 61
    106c:	8a 83       	std	Y+2, r24	; 0x02
    106e:	6b 83       	std	Y+3, r22	; 0x03
    1070:	5d 83       	std	Y+5, r21	; 0x05
    1072:	4c 83       	std	Y+4, r20	; 0x04
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
    1074:	19 82       	std	Y+1, r1	; 0x01

	/* check arguments */
	if((Copy_u8Port > DIO_u8_PORTD) || (Copy_u8Pin > DIO_u8_PIN7) || (Add_pu8PinValue  == NULL)) {
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	84 30       	cpi	r24, 0x04	; 4
    107a:	38 f4       	brcc	.+14     	; 0x108a <DIO_enuGetPinValue+0x32>
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	88 30       	cpi	r24, 0x08	; 8
    1080:	20 f4       	brcc	.+8      	; 0x108a <DIO_enuGetPinValue+0x32>
    1082:	8c 81       	ldd	r24, Y+4	; 0x04
    1084:	9d 81       	ldd	r25, Y+5	; 0x05
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	19 f4       	brne	.+6      	; 0x1090 <DIO_enuGetPinValue+0x38>
		Local_enuErrorStatus = DIO_NOK;
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	89 83       	std	Y+1, r24	; 0x01
    108e:	70 c0       	rjmp	.+224    	; 0x1170 <DIO_enuGetPinValue+0x118>
	} else {
		/*implementation */
		switch(Copy_u8Port)
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	3f 83       	std	Y+7, r19	; 0x07
    1098:	2e 83       	std	Y+6, r18	; 0x06
    109a:	4e 81       	ldd	r20, Y+6	; 0x06
    109c:	5f 81       	ldd	r21, Y+7	; 0x07
    109e:	41 30       	cpi	r20, 0x01	; 1
    10a0:	51 05       	cpc	r21, r1
    10a2:	59 f1       	breq	.+86     	; 0x10fa <DIO_enuGetPinValue+0xa2>
    10a4:	8e 81       	ldd	r24, Y+6	; 0x06
    10a6:	9f 81       	ldd	r25, Y+7	; 0x07
    10a8:	82 30       	cpi	r24, 0x02	; 2
    10aa:	91 05       	cpc	r25, r1
    10ac:	34 f4       	brge	.+12     	; 0x10ba <DIO_enuGetPinValue+0x62>
    10ae:	2e 81       	ldd	r18, Y+6	; 0x06
    10b0:	3f 81       	ldd	r19, Y+7	; 0x07
    10b2:	21 15       	cp	r18, r1
    10b4:	31 05       	cpc	r19, r1
    10b6:	69 f0       	breq	.+26     	; 0x10d2 <DIO_enuGetPinValue+0x7a>
    10b8:	5b c0       	rjmp	.+182    	; 0x1170 <DIO_enuGetPinValue+0x118>
    10ba:	4e 81       	ldd	r20, Y+6	; 0x06
    10bc:	5f 81       	ldd	r21, Y+7	; 0x07
    10be:	42 30       	cpi	r20, 0x02	; 2
    10c0:	51 05       	cpc	r21, r1
    10c2:	79 f1       	breq	.+94     	; 0x1122 <DIO_enuGetPinValue+0xca>
    10c4:	8e 81       	ldd	r24, Y+6	; 0x06
    10c6:	9f 81       	ldd	r25, Y+7	; 0x07
    10c8:	83 30       	cpi	r24, 0x03	; 3
    10ca:	91 05       	cpc	r25, r1
    10cc:	09 f4       	brne	.+2      	; 0x10d0 <DIO_enuGetPinValue+0x78>
    10ce:	3d c0       	rjmp	.+122    	; 0x114a <DIO_enuGetPinValue+0xf2>
    10d0:	4f c0       	rjmp	.+158    	; 0x1170 <DIO_enuGetPinValue+0x118>
		{
			case DIO_u8_PORTA:
				*Add_pu8PinValue = (DIO_u8_PINA_REG >> Copy_u8Pin) & 0x01;
    10d2:	e9 e3       	ldi	r30, 0x39	; 57
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	88 2f       	mov	r24, r24
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	a9 01       	movw	r20, r18
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <DIO_enuGetPinValue+0x92>
    10e6:	55 95       	asr	r21
    10e8:	47 95       	ror	r20
    10ea:	8a 95       	dec	r24
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <DIO_enuGetPinValue+0x8e>
    10ee:	ca 01       	movw	r24, r20
    10f0:	81 70       	andi	r24, 0x01	; 1
    10f2:	ec 81       	ldd	r30, Y+4	; 0x04
    10f4:	fd 81       	ldd	r31, Y+5	; 0x05
    10f6:	80 83       	st	Z, r24
    10f8:	3b c0       	rjmp	.+118    	; 0x1170 <DIO_enuGetPinValue+0x118>
				break;

			case DIO_u8_PORTB:
				*Add_pu8PinValue = (DIO_u8_PINB_REG >> Copy_u8Pin) & 0x01;
    10fa:	e6 e3       	ldi	r30, 0x36	; 54
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	88 2f       	mov	r24, r24
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	a9 01       	movw	r20, r18
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <DIO_enuGetPinValue+0xba>
    110e:	55 95       	asr	r21
    1110:	47 95       	ror	r20
    1112:	8a 95       	dec	r24
    1114:	e2 f7       	brpl	.-8      	; 0x110e <DIO_enuGetPinValue+0xb6>
    1116:	ca 01       	movw	r24, r20
    1118:	81 70       	andi	r24, 0x01	; 1
    111a:	ec 81       	ldd	r30, Y+4	; 0x04
    111c:	fd 81       	ldd	r31, Y+5	; 0x05
    111e:	80 83       	st	Z, r24
    1120:	27 c0       	rjmp	.+78     	; 0x1170 <DIO_enuGetPinValue+0x118>
				break;

			case DIO_u8_PORTC:
				*Add_pu8PinValue = (DIO_u8_PINC_REG >> Copy_u8Pin) & 0x01;
    1122:	e3 e3       	ldi	r30, 0x33	; 51
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	88 2f       	mov	r24, r24
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	a9 01       	movw	r20, r18
    1134:	02 c0       	rjmp	.+4      	; 0x113a <DIO_enuGetPinValue+0xe2>
    1136:	55 95       	asr	r21
    1138:	47 95       	ror	r20
    113a:	8a 95       	dec	r24
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <DIO_enuGetPinValue+0xde>
    113e:	ca 01       	movw	r24, r20
    1140:	81 70       	andi	r24, 0x01	; 1
    1142:	ec 81       	ldd	r30, Y+4	; 0x04
    1144:	fd 81       	ldd	r31, Y+5	; 0x05
    1146:	80 83       	st	Z, r24
    1148:	13 c0       	rjmp	.+38     	; 0x1170 <DIO_enuGetPinValue+0x118>
				break;

			case DIO_u8_PORTD:
				*Add_pu8PinValue = (DIO_u8_PIND_REG >> Copy_u8Pin) & 0x01;
    114a:	e0 e3       	ldi	r30, 0x30	; 48
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	88 2f       	mov	r24, r24
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	a9 01       	movw	r20, r18
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <DIO_enuGetPinValue+0x10a>
    115e:	55 95       	asr	r21
    1160:	47 95       	ror	r20
    1162:	8a 95       	dec	r24
    1164:	e2 f7       	brpl	.-8      	; 0x115e <DIO_enuGetPinValue+0x106>
    1166:	ca 01       	movw	r24, r20
    1168:	81 70       	andi	r24, 0x01	; 1
    116a:	ec 81       	ldd	r30, Y+4	; 0x04
    116c:	fd 81       	ldd	r31, Y+5	; 0x05
    116e:	80 83       	st	Z, r24
				break;
		}
	}
	return Local_enuErrorStatus;
    1170:	89 81       	ldd	r24, Y+1	; 0x01
}
    1172:	27 96       	adiw	r28, 0x07	; 7
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	f8 94       	cli
    1178:	de bf       	out	0x3e, r29	; 62
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	cd bf       	out	0x3d, r28	; 61
    117e:	cf 91       	pop	r28
    1180:	df 91       	pop	r29
    1182:	08 95       	ret

00001184 <DIO_enuGetPortValue>:
 * Arguments:
 * 				first Argument: Copy_u8Port, 			options (DIO_u8_PORTA, DIO_u8_PORTB, DIO_u8_PORTC, DIO_u8_PORTD)
 * 				second Argument: variable address to store PORT value
 * Return:	Error Status -----> DIO_OK , DIO_NOK
 */
DIO_tenuErrorStatus DIO_enuGetPortValue(u8 Copy_u8Port, u8 *Add_pu8PortValue){
    1184:	df 93       	push	r29
    1186:	cf 93       	push	r28
    1188:	00 d0       	rcall	.+0      	; 0x118a <DIO_enuGetPortValue+0x6>
    118a:	00 d0       	rcall	.+0      	; 0x118c <DIO_enuGetPortValue+0x8>
    118c:	00 d0       	rcall	.+0      	; 0x118e <DIO_enuGetPortValue+0xa>
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	8a 83       	std	Y+2, r24	; 0x02
    1194:	7c 83       	std	Y+4, r23	; 0x04
    1196:	6b 83       	std	Y+3, r22	; 0x03
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
    1198:	19 82       	std	Y+1, r1	; 0x01
			switch(Copy_u8Port) {
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	3e 83       	std	Y+6, r19	; 0x06
    11a2:	2d 83       	std	Y+5, r18	; 0x05
    11a4:	8d 81       	ldd	r24, Y+5	; 0x05
    11a6:	9e 81       	ldd	r25, Y+6	; 0x06
    11a8:	81 30       	cpi	r24, 0x01	; 1
    11aa:	91 05       	cpc	r25, r1
    11ac:	e1 f0       	breq	.+56     	; 0x11e6 <DIO_enuGetPortValue+0x62>
    11ae:	2d 81       	ldd	r18, Y+5	; 0x05
    11b0:	3e 81       	ldd	r19, Y+6	; 0x06
    11b2:	22 30       	cpi	r18, 0x02	; 2
    11b4:	31 05       	cpc	r19, r1
    11b6:	2c f4       	brge	.+10     	; 0x11c2 <DIO_enuGetPortValue+0x3e>
    11b8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ba:	9e 81       	ldd	r25, Y+6	; 0x06
    11bc:	00 97       	sbiw	r24, 0x00	; 0
    11be:	61 f0       	breq	.+24     	; 0x11d8 <DIO_enuGetPortValue+0x54>
    11c0:	26 c0       	rjmp	.+76     	; 0x120e <DIO_enuGetPortValue+0x8a>
    11c2:	2d 81       	ldd	r18, Y+5	; 0x05
    11c4:	3e 81       	ldd	r19, Y+6	; 0x06
    11c6:	22 30       	cpi	r18, 0x02	; 2
    11c8:	31 05       	cpc	r19, r1
    11ca:	a1 f0       	breq	.+40     	; 0x11f4 <DIO_enuGetPortValue+0x70>
    11cc:	8d 81       	ldd	r24, Y+5	; 0x05
    11ce:	9e 81       	ldd	r25, Y+6	; 0x06
    11d0:	83 30       	cpi	r24, 0x03	; 3
    11d2:	91 05       	cpc	r25, r1
    11d4:	b1 f0       	breq	.+44     	; 0x1202 <DIO_enuGetPortValue+0x7e>
    11d6:	1b c0       	rjmp	.+54     	; 0x120e <DIO_enuGetPortValue+0x8a>
				case DIO_u8_PORTA:
					*Add_pu8PortValue = DIO_u8_PINA_REG;
    11d8:	e9 e3       	ldi	r30, 0x39	; 57
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	eb 81       	ldd	r30, Y+3	; 0x03
    11e0:	fc 81       	ldd	r31, Y+4	; 0x04
    11e2:	80 83       	st	Z, r24
    11e4:	14 c0       	rjmp	.+40     	; 0x120e <DIO_enuGetPortValue+0x8a>
					break;

				case DIO_u8_PORTB:
					*Add_pu8PortValue = DIO_u8_PINB_REG;
    11e6:	e6 e3       	ldi	r30, 0x36	; 54
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	eb 81       	ldd	r30, Y+3	; 0x03
    11ee:	fc 81       	ldd	r31, Y+4	; 0x04
    11f0:	80 83       	st	Z, r24
    11f2:	0d c0       	rjmp	.+26     	; 0x120e <DIO_enuGetPortValue+0x8a>
					break;

				case DIO_u8_PORTC:
					*Add_pu8PortValue = DIO_u8_PINC_REG;
    11f4:	e3 e3       	ldi	r30, 0x33	; 51
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	eb 81       	ldd	r30, Y+3	; 0x03
    11fc:	fc 81       	ldd	r31, Y+4	; 0x04
    11fe:	80 83       	st	Z, r24
    1200:	06 c0       	rjmp	.+12     	; 0x120e <DIO_enuGetPortValue+0x8a>
					break;

				case DIO_u8_PORTD:
					*Add_pu8PortValue = DIO_u8_PIND_REG;
    1202:	e0 e3       	ldi	r30, 0x30	; 48
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	eb 81       	ldd	r30, Y+3	; 0x03
    120a:	fc 81       	ldd	r31, Y+4	; 0x04
    120c:	80 83       	st	Z, r24
					break;
			}
	return Local_enuErrorStatus;
    120e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1210:	26 96       	adiw	r28, 0x06	; 6
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	de bf       	out	0x3e, r29	; 62
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	cd bf       	out	0x3d, r28	; 61
    121c:	cf 91       	pop	r28
    121e:	df 91       	pop	r29
    1220:	08 95       	ret

00001222 <LED_vidInit>:
 * Name: LED_vidInit
 * Description: initialize LEDs status
 * Arguments: void
 * Return:	void
*/
void LED_vidInit(void){
    1222:	df 93       	push	r29
    1224:	cf 93       	push	r28
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
	DIO_vidInit();
    122a:	0e 94 c7 06 	call	0xd8e	; 0xd8e <DIO_vidInit>
}
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	08 95       	ret

00001234 <LED_enuTurnOn>:
 * Arguments:
 * 				first Argument: Copy_u8Port, 			options (LED_u8_PORTA, LED_u8_PORTB, LED_u8_PORTC, LED_u8_PORTD)
 * 				second Argument: Copy_u8Pin, 			options (from LED_u8_PIN0 to LED_u8_PIN7)
 * Return:	Error Status -----> LED_OK , LED_NOK
*/
LED_tenuErrorStatus LED_enuTurnOn(u8 Copy_u8LEDPort, u8 Copy_u8LEDPin){
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	00 d0       	rcall	.+0      	; 0x123a <LED_enuTurnOn+0x6>
    123a:	0f 92       	push	r0
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
    1240:	8a 83       	std	Y+2, r24	; 0x02
    1242:	6b 83       	std	Y+3, r22	; 0x03
	LED_tenuErrorStatus Local_enuErrorStatus = LED_OK;
    1244:	19 82       	std	Y+1, r1	; 0x01
	/*check arguments*/
	if ((Copy_u8LEDPort > LED_u8_PORTD) || (Copy_u8LEDPin > LED_u8_PIN7)){
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	84 30       	cpi	r24, 0x04	; 4
    124a:	18 f4       	brcc	.+6      	; 0x1252 <LED_enuTurnOn+0x1e>
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	88 30       	cpi	r24, 0x08	; 8
    1250:	18 f0       	brcs	.+6      	; 0x1258 <LED_enuTurnOn+0x24>
		Local_enuErrorStatus = LED_NOK;
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	89 83       	std	Y+1, r24	; 0x01
    1256:	05 c0       	rjmp	.+10     	; 0x1262 <LED_enuTurnOn+0x2e>
	} else {
	/*****IMPLEMENTATION*****/
		DIO_enuSetPinValue(Copy_u8LEDPort, Copy_u8LEDPin, LED_u8_ON);
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	6b 81       	ldd	r22, Y+3	; 0x03
    125c:	41 e0       	ldi	r20, 0x01	; 1
    125e:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_enuSetPinValue>
	}
	return Local_enuErrorStatus;
    1262:	89 81       	ldd	r24, Y+1	; 0x01
}
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	08 95       	ret

00001270 <LED_enuTurnOff>:
 * Arguments:
 * 				first Argument: Copy_u8Port, 			options (LED_u8_PORTA, LED_u8_PORTB, LED_u8_PORTC, LED_u8_PORTD)
 * 				second Argument: Copy_u8Pin, 			options (from LED_u8_PIN0 to LED_u8_PIN7)
 * Return:	Error Status -----> LED_OK , LED_NOK
*/
LED_tenuErrorStatus LED_enuTurnOff(u8 Copy_u8LEDPort, u8 Copy_u8LEDPin){
    1270:	df 93       	push	r29
    1272:	cf 93       	push	r28
    1274:	00 d0       	rcall	.+0      	; 0x1276 <LED_enuTurnOff+0x6>
    1276:	0f 92       	push	r0
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
    127c:	8a 83       	std	Y+2, r24	; 0x02
    127e:	6b 83       	std	Y+3, r22	; 0x03
	LED_tenuErrorStatus Local_enuErrorStatus = LED_OK;
    1280:	19 82       	std	Y+1, r1	; 0x01
	/*check arguments*/
	if ((Copy_u8LEDPort > LED_u8_PORTD) || (Copy_u8LEDPin > LED_u8_PIN7)){
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	84 30       	cpi	r24, 0x04	; 4
    1286:	18 f4       	brcc	.+6      	; 0x128e <LED_enuTurnOff+0x1e>
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	88 30       	cpi	r24, 0x08	; 8
    128c:	18 f0       	brcs	.+6      	; 0x1294 <LED_enuTurnOff+0x24>
		Local_enuErrorStatus = LED_NOK;
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	89 83       	std	Y+1, r24	; 0x01
    1292:	05 c0       	rjmp	.+10     	; 0x129e <LED_enuTurnOff+0x2e>
	} else {
	/*****IMPLEMENTATION*****/
		DIO_enuSetPinValue(Copy_u8LEDPort, Copy_u8LEDPin, LED_u8_OFF);
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	6b 81       	ldd	r22, Y+3	; 0x03
    1298:	40 e0       	ldi	r20, 0x00	; 0
    129a:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_enuSetPinValue>
	}
	return Local_enuErrorStatus;
    129e:	89 81       	ldd	r24, Y+1	; 0x01
}
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <LED_enuToggleLED>:
 * Arguments:
 * 				first Argument: Copy_u8Port, 			options (LED_u8_PORTA, LED_u8_PORTB, LED_u8_PORTC, LED_u8_PORTD)
 * 				second Argument: Copy_u8Pin, 			options (from LED_u8_PIN0 to LED_u8_PIN7)
 * Return:	Error Status -----> LED_OK , LED_NOK
*/
LED_tenuErrorStatus LED_enuToggleLED(u8 Copy_u8LEDPort, u8 Copy_u8LEDPin){
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	00 d0       	rcall	.+0      	; 0x12b2 <LED_enuToggleLED+0x6>
    12b2:	00 d0       	rcall	.+0      	; 0x12b4 <LED_enuToggleLED+0x8>
    12b4:	00 d0       	rcall	.+0      	; 0x12b6 <LED_enuToggleLED+0xa>
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
    12ba:	8b 83       	std	Y+3, r24	; 0x03
    12bc:	6c 83       	std	Y+4, r22	; 0x04
	LED_tenuErrorStatus Local_enuErrorStatus = LED_OK;
    12be:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_u8LEDstatus;
	/*check arguments*/
	if ((Copy_u8LEDPort > LED_u8_PORTD) || (Copy_u8LEDPin > LED_u8_PIN7)){
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	84 30       	cpi	r24, 0x04	; 4
    12c4:	18 f4       	brcc	.+6      	; 0x12cc <LED_enuToggleLED+0x20>
    12c6:	8c 81       	ldd	r24, Y+4	; 0x04
    12c8:	88 30       	cpi	r24, 0x08	; 8
    12ca:	18 f0       	brcs	.+6      	; 0x12d2 <LED_enuToggleLED+0x26>
		Local_enuErrorStatus = LED_NOK;
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	89 83       	std	Y+1, r24	; 0x01
    12d0:	22 c0       	rjmp	.+68     	; 0x1316 <LED_enuToggleLED+0x6a>
	} else {
	/*****IMPLEMENTATION*****/
		DIO_enuGetPinValue(Copy_u8LEDPort, Copy_u8LEDPin, &Local_u8LEDstatus);
    12d2:	9e 01       	movw	r18, r28
    12d4:	2e 5f       	subi	r18, 0xFE	; 254
    12d6:	3f 4f       	sbci	r19, 0xFF	; 255
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	6c 81       	ldd	r22, Y+4	; 0x04
    12dc:	a9 01       	movw	r20, r18
    12de:	0e 94 2c 08 	call	0x1058	; 0x1058 <DIO_enuGetPinValue>
		switch(Local_u8LEDstatus){
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	3e 83       	std	Y+6, r19	; 0x06
    12ea:	2d 83       	std	Y+5, r18	; 0x05
    12ec:	8d 81       	ldd	r24, Y+5	; 0x05
    12ee:	9e 81       	ldd	r25, Y+6	; 0x06
    12f0:	00 97       	sbiw	r24, 0x00	; 0
    12f2:	31 f0       	breq	.+12     	; 0x1300 <LED_enuToggleLED+0x54>
    12f4:	2d 81       	ldd	r18, Y+5	; 0x05
    12f6:	3e 81       	ldd	r19, Y+6	; 0x06
    12f8:	21 30       	cpi	r18, 0x01	; 1
    12fa:	31 05       	cpc	r19, r1
    12fc:	39 f0       	breq	.+14     	; 0x130c <LED_enuToggleLED+0x60>
    12fe:	0b c0       	rjmp	.+22     	; 0x1316 <LED_enuToggleLED+0x6a>
		case LED_u8_OFF:
			DIO_enuSetPinValue(Copy_u8LEDPort, Copy_u8LEDPin, LED_u8_ON);
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	6c 81       	ldd	r22, Y+4	; 0x04
    1304:	41 e0       	ldi	r20, 0x01	; 1
    1306:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_enuSetPinValue>
    130a:	05 c0       	rjmp	.+10     	; 0x1316 <LED_enuToggleLED+0x6a>
			break;
		case LED_u8_ON:
			DIO_enuSetPinValue(Copy_u8LEDPort, Copy_u8LEDPin, LED_u8_OFF);
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	6c 81       	ldd	r22, Y+4	; 0x04
    1310:	40 e0       	ldi	r20, 0x00	; 0
    1312:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_enuSetPinValue>
			break;
		default:
			break;
		}
	}
	return Local_enuErrorStatus;
    1316:	89 81       	ldd	r24, Y+1	; 0x01
}
    1318:	26 96       	adiw	r28, 0x06	; 6
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	f8 94       	cli
    131e:	de bf       	out	0x3e, r29	; 62
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	cd bf       	out	0x3d, r28	; 61
    1324:	cf 91       	pop	r28
    1326:	df 91       	pop	r29
    1328:	08 95       	ret

0000132a <LCD_vidInit>:
 * Name: LCD_vidInit
 * Description: Initialize the LCD ... According to DATASHEET instruction
 * Arguments: void
 * Return:	void
 */
void LCD_vidInit(void){
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
    1332:	e8 97       	sbiw	r28, 0x38	; 56
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	f8 94       	cli
    1338:	de bf       	out	0x3e, r29	; 62
    133a:	0f be       	out	0x3f, r0	; 63
    133c:	cd bf       	out	0x3d, r28	; 61
	DIO_vidInit();
    133e:	0e 94 c7 06 	call	0xd8e	; 0xd8e <DIO_vidInit>
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	a0 e0       	ldi	r26, 0x00	; 0
    1348:	b2 e4       	ldi	r27, 0x42	; 66
    134a:	8d ab       	std	Y+53, r24	; 0x35
    134c:	9e ab       	std	Y+54, r25	; 0x36
    134e:	af ab       	std	Y+55, r26	; 0x37
    1350:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1352:	6d a9       	ldd	r22, Y+53	; 0x35
    1354:	7e a9       	ldd	r23, Y+54	; 0x36
    1356:	8f a9       	ldd	r24, Y+55	; 0x37
    1358:	98 ad       	ldd	r25, Y+56	; 0x38
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	4a e7       	ldi	r20, 0x7A	; 122
    1360:	55 e4       	ldi	r21, 0x45	; 69
    1362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	89 ab       	std	Y+49, r24	; 0x31
    136c:	9a ab       	std	Y+50, r25	; 0x32
    136e:	ab ab       	std	Y+51, r26	; 0x33
    1370:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1372:	69 a9       	ldd	r22, Y+49	; 0x31
    1374:	7a a9       	ldd	r23, Y+50	; 0x32
    1376:	8b a9       	ldd	r24, Y+51	; 0x33
    1378:	9c a9       	ldd	r25, Y+52	; 0x34
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	40 e8       	ldi	r20, 0x80	; 128
    1380:	5f e3       	ldi	r21, 0x3F	; 63
    1382:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1386:	88 23       	and	r24, r24
    1388:	2c f4       	brge	.+10     	; 0x1394 <LCD_vidInit+0x6a>
		__ticks = 1;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	98 ab       	std	Y+48, r25	; 0x30
    1390:	8f a7       	std	Y+47, r24	; 0x2f
    1392:	3f c0       	rjmp	.+126    	; 0x1412 <LCD_vidInit+0xe8>
	else if (__tmp > 65535)
    1394:	69 a9       	ldd	r22, Y+49	; 0x31
    1396:	7a a9       	ldd	r23, Y+50	; 0x32
    1398:	8b a9       	ldd	r24, Y+51	; 0x33
    139a:	9c a9       	ldd	r25, Y+52	; 0x34
    139c:	20 e0       	ldi	r18, 0x00	; 0
    139e:	3f ef       	ldi	r19, 0xFF	; 255
    13a0:	4f e7       	ldi	r20, 0x7F	; 127
    13a2:	57 e4       	ldi	r21, 0x47	; 71
    13a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13a8:	18 16       	cp	r1, r24
    13aa:	4c f5       	brge	.+82     	; 0x13fe <LCD_vidInit+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ac:	6d a9       	ldd	r22, Y+53	; 0x35
    13ae:	7e a9       	ldd	r23, Y+54	; 0x36
    13b0:	8f a9       	ldd	r24, Y+55	; 0x37
    13b2:	98 ad       	ldd	r25, Y+56	; 0x38
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	40 e2       	ldi	r20, 0x20	; 32
    13ba:	51 e4       	ldi	r21, 0x41	; 65
    13bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	bc 01       	movw	r22, r24
    13c6:	cd 01       	movw	r24, r26
    13c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	98 ab       	std	Y+48, r25	; 0x30
    13d2:	8f a7       	std	Y+47, r24	; 0x2f
    13d4:	0f c0       	rjmp	.+30     	; 0x13f4 <LCD_vidInit+0xca>
    13d6:	80 e9       	ldi	r24, 0x90	; 144
    13d8:	91 e0       	ldi	r25, 0x01	; 1
    13da:	9e a7       	std	Y+46, r25	; 0x2e
    13dc:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13de:	8d a5       	ldd	r24, Y+45	; 0x2d
    13e0:	9e a5       	ldd	r25, Y+46	; 0x2e
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	f1 f7       	brne	.-4      	; 0x13e2 <LCD_vidInit+0xb8>
    13e6:	9e a7       	std	Y+46, r25	; 0x2e
    13e8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    13ec:	98 a9       	ldd	r25, Y+48	; 0x30
    13ee:	01 97       	sbiw	r24, 0x01	; 1
    13f0:	98 ab       	std	Y+48, r25	; 0x30
    13f2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    13f6:	98 a9       	ldd	r25, Y+48	; 0x30
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	69 f7       	brne	.-38     	; 0x13d6 <LCD_vidInit+0xac>
    13fc:	14 c0       	rjmp	.+40     	; 0x1426 <LCD_vidInit+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13fe:	69 a9       	ldd	r22, Y+49	; 0x31
    1400:	7a a9       	ldd	r23, Y+50	; 0x32
    1402:	8b a9       	ldd	r24, Y+51	; 0x33
    1404:	9c a9       	ldd	r25, Y+52	; 0x34
    1406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	98 ab       	std	Y+48, r25	; 0x30
    1410:	8f a7       	std	Y+47, r24	; 0x2f
    1412:	8f a5       	ldd	r24, Y+47	; 0x2f
    1414:	98 a9       	ldd	r25, Y+48	; 0x30
    1416:	9c a7       	std	Y+44, r25	; 0x2c
    1418:	8b a7       	std	Y+43, r24	; 0x2b
    141a:	8b a5       	ldd	r24, Y+43	; 0x2b
    141c:	9c a5       	ldd	r25, Y+44	; 0x2c
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	f1 f7       	brne	.-4      	; 0x141e <LCD_vidInit+0xf4>
    1422:	9c a7       	std	Y+44, r25	; 0x2c
    1424:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(32);
	/*Function Set*/
	LCD_enuSendInstruction(LCD_u8_FUNCTION_SET);
    1426:	88 e3       	ldi	r24, 0x38	; 56
    1428:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	a0 e8       	ldi	r26, 0x80	; 128
    1432:	bf e3       	ldi	r27, 0x3F	; 63
    1434:	8f a3       	std	Y+39, r24	; 0x27
    1436:	98 a7       	std	Y+40, r25	; 0x28
    1438:	a9 a7       	std	Y+41, r26	; 0x29
    143a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    143c:	6f a1       	ldd	r22, Y+39	; 0x27
    143e:	78 a5       	ldd	r23, Y+40	; 0x28
    1440:	89 a5       	ldd	r24, Y+41	; 0x29
    1442:	9a a5       	ldd	r25, Y+42	; 0x2a
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	4a e7       	ldi	r20, 0x7A	; 122
    144a:	55 e4       	ldi	r21, 0x45	; 69
    144c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1450:	dc 01       	movw	r26, r24
    1452:	cb 01       	movw	r24, r22
    1454:	8b a3       	std	Y+35, r24	; 0x23
    1456:	9c a3       	std	Y+36, r25	; 0x24
    1458:	ad a3       	std	Y+37, r26	; 0x25
    145a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    145c:	6b a1       	ldd	r22, Y+35	; 0x23
    145e:	7c a1       	ldd	r23, Y+36	; 0x24
    1460:	8d a1       	ldd	r24, Y+37	; 0x25
    1462:	9e a1       	ldd	r25, Y+38	; 0x26
    1464:	20 e0       	ldi	r18, 0x00	; 0
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	40 e8       	ldi	r20, 0x80	; 128
    146a:	5f e3       	ldi	r21, 0x3F	; 63
    146c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1470:	88 23       	and	r24, r24
    1472:	2c f4       	brge	.+10     	; 0x147e <LCD_vidInit+0x154>
		__ticks = 1;
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	9a a3       	std	Y+34, r25	; 0x22
    147a:	89 a3       	std	Y+33, r24	; 0x21
    147c:	3f c0       	rjmp	.+126    	; 0x14fc <LCD_vidInit+0x1d2>
	else if (__tmp > 65535)
    147e:	6b a1       	ldd	r22, Y+35	; 0x23
    1480:	7c a1       	ldd	r23, Y+36	; 0x24
    1482:	8d a1       	ldd	r24, Y+37	; 0x25
    1484:	9e a1       	ldd	r25, Y+38	; 0x26
    1486:	20 e0       	ldi	r18, 0x00	; 0
    1488:	3f ef       	ldi	r19, 0xFF	; 255
    148a:	4f e7       	ldi	r20, 0x7F	; 127
    148c:	57 e4       	ldi	r21, 0x47	; 71
    148e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1492:	18 16       	cp	r1, r24
    1494:	4c f5       	brge	.+82     	; 0x14e8 <LCD_vidInit+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1496:	6f a1       	ldd	r22, Y+39	; 0x27
    1498:	78 a5       	ldd	r23, Y+40	; 0x28
    149a:	89 a5       	ldd	r24, Y+41	; 0x29
    149c:	9a a5       	ldd	r25, Y+42	; 0x2a
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	40 e2       	ldi	r20, 0x20	; 32
    14a4:	51 e4       	ldi	r21, 0x41	; 65
    14a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14aa:	dc 01       	movw	r26, r24
    14ac:	cb 01       	movw	r24, r22
    14ae:	bc 01       	movw	r22, r24
    14b0:	cd 01       	movw	r24, r26
    14b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14b6:	dc 01       	movw	r26, r24
    14b8:	cb 01       	movw	r24, r22
    14ba:	9a a3       	std	Y+34, r25	; 0x22
    14bc:	89 a3       	std	Y+33, r24	; 0x21
    14be:	0f c0       	rjmp	.+30     	; 0x14de <LCD_vidInit+0x1b4>
    14c0:	80 e9       	ldi	r24, 0x90	; 144
    14c2:	91 e0       	ldi	r25, 0x01	; 1
    14c4:	98 a3       	std	Y+32, r25	; 0x20
    14c6:	8f 8f       	std	Y+31, r24	; 0x1f
    14c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14ca:	98 a1       	ldd	r25, Y+32	; 0x20
    14cc:	01 97       	sbiw	r24, 0x01	; 1
    14ce:	f1 f7       	brne	.-4      	; 0x14cc <LCD_vidInit+0x1a2>
    14d0:	98 a3       	std	Y+32, r25	; 0x20
    14d2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d4:	89 a1       	ldd	r24, Y+33	; 0x21
    14d6:	9a a1       	ldd	r25, Y+34	; 0x22
    14d8:	01 97       	sbiw	r24, 0x01	; 1
    14da:	9a a3       	std	Y+34, r25	; 0x22
    14dc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14de:	89 a1       	ldd	r24, Y+33	; 0x21
    14e0:	9a a1       	ldd	r25, Y+34	; 0x22
    14e2:	00 97       	sbiw	r24, 0x00	; 0
    14e4:	69 f7       	brne	.-38     	; 0x14c0 <LCD_vidInit+0x196>
    14e6:	14 c0       	rjmp	.+40     	; 0x1510 <LCD_vidInit+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e8:	6b a1       	ldd	r22, Y+35	; 0x23
    14ea:	7c a1       	ldd	r23, Y+36	; 0x24
    14ec:	8d a1       	ldd	r24, Y+37	; 0x25
    14ee:	9e a1       	ldd	r25, Y+38	; 0x26
    14f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f4:	dc 01       	movw	r26, r24
    14f6:	cb 01       	movw	r24, r22
    14f8:	9a a3       	std	Y+34, r25	; 0x22
    14fa:	89 a3       	std	Y+33, r24	; 0x21
    14fc:	89 a1       	ldd	r24, Y+33	; 0x21
    14fe:	9a a1       	ldd	r25, Y+34	; 0x22
    1500:	9e 8f       	std	Y+30, r25	; 0x1e
    1502:	8d 8f       	std	Y+29, r24	; 0x1d
    1504:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1506:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1508:	01 97       	sbiw	r24, 0x01	; 1
    150a:	f1 f7       	brne	.-4      	; 0x1508 <LCD_vidInit+0x1de>
    150c:	9e 8f       	std	Y+30, r25	; 0x1e
    150e:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1);

	/*Display Control*/
	LCD_enuSendInstruction(LCD_u8_DISPLAY_ON_CURRSOR_ON);
    1510:	8e e0       	ldi	r24, 0x0E	; 14
    1512:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	a0 e8       	ldi	r26, 0x80	; 128
    151c:	bf e3       	ldi	r27, 0x3F	; 63
    151e:	89 8f       	std	Y+25, r24	; 0x19
    1520:	9a 8f       	std	Y+26, r25	; 0x1a
    1522:	ab 8f       	std	Y+27, r26	; 0x1b
    1524:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1526:	69 8d       	ldd	r22, Y+25	; 0x19
    1528:	7a 8d       	ldd	r23, Y+26	; 0x1a
    152a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    152c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	4a e7       	ldi	r20, 0x7A	; 122
    1534:	55 e4       	ldi	r21, 0x45	; 69
    1536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	8d 8b       	std	Y+21, r24	; 0x15
    1540:	9e 8b       	std	Y+22, r25	; 0x16
    1542:	af 8b       	std	Y+23, r26	; 0x17
    1544:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1546:	6d 89       	ldd	r22, Y+21	; 0x15
    1548:	7e 89       	ldd	r23, Y+22	; 0x16
    154a:	8f 89       	ldd	r24, Y+23	; 0x17
    154c:	98 8d       	ldd	r25, Y+24	; 0x18
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	40 e8       	ldi	r20, 0x80	; 128
    1554:	5f e3       	ldi	r21, 0x3F	; 63
    1556:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    155a:	88 23       	and	r24, r24
    155c:	2c f4       	brge	.+10     	; 0x1568 <LCD_vidInit+0x23e>
		__ticks = 1;
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	9c 8b       	std	Y+20, r25	; 0x14
    1564:	8b 8b       	std	Y+19, r24	; 0x13
    1566:	3f c0       	rjmp	.+126    	; 0x15e6 <LCD_vidInit+0x2bc>
	else if (__tmp > 65535)
    1568:	6d 89       	ldd	r22, Y+21	; 0x15
    156a:	7e 89       	ldd	r23, Y+22	; 0x16
    156c:	8f 89       	ldd	r24, Y+23	; 0x17
    156e:	98 8d       	ldd	r25, Y+24	; 0x18
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	3f ef       	ldi	r19, 0xFF	; 255
    1574:	4f e7       	ldi	r20, 0x7F	; 127
    1576:	57 e4       	ldi	r21, 0x47	; 71
    1578:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    157c:	18 16       	cp	r1, r24
    157e:	4c f5       	brge	.+82     	; 0x15d2 <LCD_vidInit+0x2a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1580:	69 8d       	ldd	r22, Y+25	; 0x19
    1582:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1584:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1586:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	40 e2       	ldi	r20, 0x20	; 32
    158e:	51 e4       	ldi	r21, 0x41	; 65
    1590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1594:	dc 01       	movw	r26, r24
    1596:	cb 01       	movw	r24, r22
    1598:	bc 01       	movw	r22, r24
    159a:	cd 01       	movw	r24, r26
    159c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a0:	dc 01       	movw	r26, r24
    15a2:	cb 01       	movw	r24, r22
    15a4:	9c 8b       	std	Y+20, r25	; 0x14
    15a6:	8b 8b       	std	Y+19, r24	; 0x13
    15a8:	0f c0       	rjmp	.+30     	; 0x15c8 <LCD_vidInit+0x29e>
    15aa:	80 e9       	ldi	r24, 0x90	; 144
    15ac:	91 e0       	ldi	r25, 0x01	; 1
    15ae:	9a 8b       	std	Y+18, r25	; 0x12
    15b0:	89 8b       	std	Y+17, r24	; 0x11
    15b2:	89 89       	ldd	r24, Y+17	; 0x11
    15b4:	9a 89       	ldd	r25, Y+18	; 0x12
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	f1 f7       	brne	.-4      	; 0x15b6 <LCD_vidInit+0x28c>
    15ba:	9a 8b       	std	Y+18, r25	; 0x12
    15bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15be:	8b 89       	ldd	r24, Y+19	; 0x13
    15c0:	9c 89       	ldd	r25, Y+20	; 0x14
    15c2:	01 97       	sbiw	r24, 0x01	; 1
    15c4:	9c 8b       	std	Y+20, r25	; 0x14
    15c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c8:	8b 89       	ldd	r24, Y+19	; 0x13
    15ca:	9c 89       	ldd	r25, Y+20	; 0x14
    15cc:	00 97       	sbiw	r24, 0x00	; 0
    15ce:	69 f7       	brne	.-38     	; 0x15aa <LCD_vidInit+0x280>
    15d0:	14 c0       	rjmp	.+40     	; 0x15fa <LCD_vidInit+0x2d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d2:	6d 89       	ldd	r22, Y+21	; 0x15
    15d4:	7e 89       	ldd	r23, Y+22	; 0x16
    15d6:	8f 89       	ldd	r24, Y+23	; 0x17
    15d8:	98 8d       	ldd	r25, Y+24	; 0x18
    15da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15de:	dc 01       	movw	r26, r24
    15e0:	cb 01       	movw	r24, r22
    15e2:	9c 8b       	std	Y+20, r25	; 0x14
    15e4:	8b 8b       	std	Y+19, r24	; 0x13
    15e6:	8b 89       	ldd	r24, Y+19	; 0x13
    15e8:	9c 89       	ldd	r25, Y+20	; 0x14
    15ea:	98 8b       	std	Y+16, r25	; 0x10
    15ec:	8f 87       	std	Y+15, r24	; 0x0f
    15ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    15f0:	98 89       	ldd	r25, Y+16	; 0x10
    15f2:	01 97       	sbiw	r24, 0x01	; 1
    15f4:	f1 f7       	brne	.-4      	; 0x15f2 <LCD_vidInit+0x2c8>
    15f6:	98 8b       	std	Y+16, r25	; 0x10
    15f8:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	/*Display Clear*/
	LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	a0 e0       	ldi	r26, 0x00	; 0
    1606:	b0 e4       	ldi	r27, 0x40	; 64
    1608:	8b 87       	std	Y+11, r24	; 0x0b
    160a:	9c 87       	std	Y+12, r25	; 0x0c
    160c:	ad 87       	std	Y+13, r26	; 0x0d
    160e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1610:	6b 85       	ldd	r22, Y+11	; 0x0b
    1612:	7c 85       	ldd	r23, Y+12	; 0x0c
    1614:	8d 85       	ldd	r24, Y+13	; 0x0d
    1616:	9e 85       	ldd	r25, Y+14	; 0x0e
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	4a e7       	ldi	r20, 0x7A	; 122
    161e:	55 e4       	ldi	r21, 0x45	; 69
    1620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	8f 83       	std	Y+7, r24	; 0x07
    162a:	98 87       	std	Y+8, r25	; 0x08
    162c:	a9 87       	std	Y+9, r26	; 0x09
    162e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1630:	6f 81       	ldd	r22, Y+7	; 0x07
    1632:	78 85       	ldd	r23, Y+8	; 0x08
    1634:	89 85       	ldd	r24, Y+9	; 0x09
    1636:	9a 85       	ldd	r25, Y+10	; 0x0a
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	40 e8       	ldi	r20, 0x80	; 128
    163e:	5f e3       	ldi	r21, 0x3F	; 63
    1640:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1644:	88 23       	and	r24, r24
    1646:	2c f4       	brge	.+10     	; 0x1652 <LCD_vidInit+0x328>
		__ticks = 1;
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	9e 83       	std	Y+6, r25	; 0x06
    164e:	8d 83       	std	Y+5, r24	; 0x05
    1650:	3f c0       	rjmp	.+126    	; 0x16d0 <LCD_vidInit+0x3a6>
	else if (__tmp > 65535)
    1652:	6f 81       	ldd	r22, Y+7	; 0x07
    1654:	78 85       	ldd	r23, Y+8	; 0x08
    1656:	89 85       	ldd	r24, Y+9	; 0x09
    1658:	9a 85       	ldd	r25, Y+10	; 0x0a
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	3f ef       	ldi	r19, 0xFF	; 255
    165e:	4f e7       	ldi	r20, 0x7F	; 127
    1660:	57 e4       	ldi	r21, 0x47	; 71
    1662:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1666:	18 16       	cp	r1, r24
    1668:	4c f5       	brge	.+82     	; 0x16bc <LCD_vidInit+0x392>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    166a:	6b 85       	ldd	r22, Y+11	; 0x0b
    166c:	7c 85       	ldd	r23, Y+12	; 0x0c
    166e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1670:	9e 85       	ldd	r25, Y+14	; 0x0e
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	40 e2       	ldi	r20, 0x20	; 32
    1678:	51 e4       	ldi	r21, 0x41	; 65
    167a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	bc 01       	movw	r22, r24
    1684:	cd 01       	movw	r24, r26
    1686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
    168e:	9e 83       	std	Y+6, r25	; 0x06
    1690:	8d 83       	std	Y+5, r24	; 0x05
    1692:	0f c0       	rjmp	.+30     	; 0x16b2 <LCD_vidInit+0x388>
    1694:	80 e9       	ldi	r24, 0x90	; 144
    1696:	91 e0       	ldi	r25, 0x01	; 1
    1698:	9c 83       	std	Y+4, r25	; 0x04
    169a:	8b 83       	std	Y+3, r24	; 0x03
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	9c 81       	ldd	r25, Y+4	; 0x04
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	f1 f7       	brne	.-4      	; 0x16a0 <LCD_vidInit+0x376>
    16a4:	9c 83       	std	Y+4, r25	; 0x04
    16a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16a8:	8d 81       	ldd	r24, Y+5	; 0x05
    16aa:	9e 81       	ldd	r25, Y+6	; 0x06
    16ac:	01 97       	sbiw	r24, 0x01	; 1
    16ae:	9e 83       	std	Y+6, r25	; 0x06
    16b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b2:	8d 81       	ldd	r24, Y+5	; 0x05
    16b4:	9e 81       	ldd	r25, Y+6	; 0x06
    16b6:	00 97       	sbiw	r24, 0x00	; 0
    16b8:	69 f7       	brne	.-38     	; 0x1694 <LCD_vidInit+0x36a>
    16ba:	14 c0       	rjmp	.+40     	; 0x16e4 <LCD_vidInit+0x3ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16bc:	6f 81       	ldd	r22, Y+7	; 0x07
    16be:	78 85       	ldd	r23, Y+8	; 0x08
    16c0:	89 85       	ldd	r24, Y+9	; 0x09
    16c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	9e 83       	std	Y+6, r25	; 0x06
    16ce:	8d 83       	std	Y+5, r24	; 0x05
    16d0:	8d 81       	ldd	r24, Y+5	; 0x05
    16d2:	9e 81       	ldd	r25, Y+6	; 0x06
    16d4:	9a 83       	std	Y+2, r25	; 0x02
    16d6:	89 83       	std	Y+1, r24	; 0x01
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	9a 81       	ldd	r25, Y+2	; 0x02
    16dc:	01 97       	sbiw	r24, 0x01	; 1
    16de:	f1 f7       	brne	.-4      	; 0x16dc <LCD_vidInit+0x3b2>
    16e0:	9a 83       	std	Y+2, r25	; 0x02
    16e2:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

	/*Entry Mode Set*/
	LCD_enuSendInstruction(LCD_u8_CURSOR_INC_SHIFT_OFF);
    16e4:	86 e0       	ldi	r24, 0x06	; 6
    16e6:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
}
    16ea:	e8 96       	adiw	r28, 0x38	; 56
    16ec:	0f b6       	in	r0, 0x3f	; 63
    16ee:	f8 94       	cli
    16f0:	de bf       	out	0x3e, r29	; 62
    16f2:	0f be       	out	0x3f, r0	; 63
    16f4:	cd bf       	out	0x3d, r28	; 61
    16f6:	cf 91       	pop	r28
    16f8:	df 91       	pop	r29
    16fa:	08 95       	ret

000016fc <LCD_enuSendInstruction>:
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 LCD_u8_SHIFT_CURSOR_RIGHT, LCD_u8_SHIFT_DISPLAY_LEFT,
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 LCD_u8_SHIFT_DISPLAY_RIGHT, LCD_u8_FUNCTION_SET,
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 LCD_u8_FIRST_CGRAM_ADDRESS, LCD_u8_FIRST_DDRAM_ADDRESS)
 * Return:	Error Status -----> LCD_OK , LCD_NOK
 */
LCD_tenuErrorStatus LCD_enuSendInstruction(u8 Copy_u8Instruction){
    16fc:	df 93       	push	r29
    16fe:	cf 93       	push	r28
    1700:	00 d0       	rcall	.+0      	; 0x1702 <LCD_enuSendInstruction+0x6>
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	8a 83       	std	Y+2, r24	; 0x02
	LCD_tenuErrorStatus Local_enuErrorStatus = LCD_OK;
    1708:	19 82       	std	Y+1, r1	; 0x01
	if(0) {
		Local_enuErrorStatus = LCD_NOK;
	} else {
	/*****IMPLEMENTATION*****/
		/*RS PIN --------> low*/
		DIO_enuSetPinValue(LCD_u8_RS_PORT, LCD_u8_RS_PIN, DIO_u8_LOW);
    170a:	82 e0       	ldi	r24, 0x02	; 2
    170c:	60 e0       	ldi	r22, 0x00	; 0
    170e:	40 e0       	ldi	r20, 0x00	; 0
    1710:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_enuSetPinValue>

		/*RW PIN --------> low*/
		DIO_enuSetPinValue(LCD_u8_RW_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
    1714:	82 e0       	ldi	r24, 0x02	; 2
    1716:	61 e0       	ldi	r22, 0x01	; 1
    1718:	40 e0       	ldi	r20, 0x00	; 0
    171a:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_enuSetPinValue>

		/*Send instruction*/		// set port()*1 OR set pin()*8
		DIO_enuSetPortValue(LCD_u8_DATA_PORT, Copy_u8Instruction);
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	6a 81       	ldd	r22, Y+2	; 0x02
    1722:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_enuSetPortValue>

		/*Send enable*/
		LCD_SendEnable();
    1726:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <LCD_SendEnable>
	}

	return Local_enuErrorStatus;
    172a:	89 81       	ldd	r24, Y+1	; 0x01
}
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	cf 91       	pop	r28
    1732:	df 91       	pop	r29
    1734:	08 95       	ret

00001736 <LCD_enuSendCharacter>:
 * Name: LCD_enuSendCharacter
 * Description: Send a character to display on the LCD
 * Arguments:	Copy_u8Character				OPTIONS --> (Any character its ascii code exist in the CG ROM)
 * Return:	Error Status -----> LCD_OK , LCD_NOK
 */
LCD_tenuErrorStatus LCD_enuSendCharacter(u8 Copy_u8Character){
    1736:	df 93       	push	r29
    1738:	cf 93       	push	r28
    173a:	00 d0       	rcall	.+0      	; 0x173c <LCD_enuSendCharacter+0x6>
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
    1740:	8a 83       	std	Y+2, r24	; 0x02
	LCD_tenuErrorStatus Local_enuErrorStatus = LCD_OK;
    1742:	19 82       	std	Y+1, r1	; 0x01

	/*****IMPLEMENTATION*****/
	/*RS PIN --------> low*/
	DIO_enuSetPinValue(LCD_u8_RS_PORT, LCD_u8_RS_PIN, DIO_u8_HIGH);
    1744:	82 e0       	ldi	r24, 0x02	; 2
    1746:	60 e0       	ldi	r22, 0x00	; 0
    1748:	41 e0       	ldi	r20, 0x01	; 1
    174a:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_enuSetPinValue>

	/*RW PIN --------> high*/
	DIO_enuSetPinValue(LCD_u8_RW_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
    174e:	82 e0       	ldi	r24, 0x02	; 2
    1750:	61 e0       	ldi	r22, 0x01	; 1
    1752:	40 e0       	ldi	r20, 0x00	; 0
    1754:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_enuSetPinValue>

	/*Send Data*/
	DIO_enuSetPortValue(LCD_u8_DATA_PORT, Copy_u8Character);
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	6a 81       	ldd	r22, Y+2	; 0x02
    175c:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_enuSetPortValue>

	/*Send enable*/
	LCD_SendEnable();
    1760:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <LCD_SendEnable>

	return Local_enuErrorStatus;
    1764:	89 81       	ldd	r24, Y+1	; 0x01
}
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	cf 91       	pop	r28
    176c:	df 91       	pop	r29
    176e:	08 95       	ret

00001770 <LCD_enuSendString>:
 * Name: LCD_enuSendString
 * Description: Send a string to display it on the LCD
 * Arguments: Add_pu8String	--------> pointer refer to the first address of the string array
 * Return:	Error Status -----> LCD_OK , LCD_NOK
 */
LCD_tenuErrorStatus LCD_enuSendString(u8* Add_pu8String){
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	00 d0       	rcall	.+0      	; 0x1776 <LCD_enuSendString+0x6>
    1776:	0f 92       	push	r0
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
    177c:	9b 83       	std	Y+3, r25	; 0x03
    177e:	8a 83       	std	Y+2, r24	; 0x02
	LCD_tenuErrorStatus Local_enuErrorStatus = LCD_OK;
    1780:	19 82       	std	Y+1, r1	; 0x01

	/*check arguments*/
	if(Add_pu8String == NULL){
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	9b 81       	ldd	r25, Y+3	; 0x03
    1786:	00 97       	sbiw	r24, 0x00	; 0
    1788:	69 f4       	brne	.+26     	; 0x17a4 <LCD_enuSendString+0x34>
		Local_enuErrorStatus = LCD_NOK;
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	89 83       	std	Y+1, r24	; 0x01
    178e:	0f c0       	rjmp	.+30     	; 0x17ae <LCD_enuSendString+0x3e>
	} else {
	/*****IMPLEMENTATION*****/
		while (*Add_pu8String != '\0'){
			LCD_enuSendCharacter(*Add_pu8String);
    1790:	ea 81       	ldd	r30, Y+2	; 0x02
    1792:	fb 81       	ldd	r31, Y+3	; 0x03
    1794:	80 81       	ld	r24, Z
    1796:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LCD_enuSendCharacter>
			Add_pu8String++;
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	9b 81       	ldd	r25, Y+3	; 0x03
    179e:	01 96       	adiw	r24, 0x01	; 1
    17a0:	9b 83       	std	Y+3, r25	; 0x03
    17a2:	8a 83       	std	Y+2, r24	; 0x02
	/*check arguments*/
	if(Add_pu8String == NULL){
		Local_enuErrorStatus = LCD_NOK;
	} else {
	/*****IMPLEMENTATION*****/
		while (*Add_pu8String != '\0'){
    17a4:	ea 81       	ldd	r30, Y+2	; 0x02
    17a6:	fb 81       	ldd	r31, Y+3	; 0x03
    17a8:	80 81       	ld	r24, Z
    17aa:	88 23       	and	r24, r24
    17ac:	89 f7       	brne	.-30     	; 0x1790 <LCD_enuSendString+0x20>
			LCD_enuSendCharacter(*Add_pu8String);
			Add_pu8String++;
		}
	}

	return Local_enuErrorStatus;
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	0f 90       	pop	r0
    17b6:	cf 91       	pop	r28
    17b8:	df 91       	pop	r29
    17ba:	08 95       	ret

000017bc <LCD_enuGoTo>:
 * Description: Make the AC point to specific address
 * Arguments:	first Argument:		Copy_u8Row,				options (LCD_u8_ROW0, LCD_u8_ROW1)
 * 				second Argument: 	Copy_u8Column, 			options (LCD_u8_COLUMN0 : LCD_u8_COLUMN15)
 * Return:	Error Status -----> LCD_OK , LCD_NOK
 */
LCD_tenuErrorStatus LCD_enuGoTo(u8 Copy_u8Row, u8 Copy_u8Column){
    17bc:	df 93       	push	r29
    17be:	cf 93       	push	r28
    17c0:	00 d0       	rcall	.+0      	; 0x17c2 <LCD_enuGoTo+0x6>
    17c2:	00 d0       	rcall	.+0      	; 0x17c4 <LCD_enuGoTo+0x8>
    17c4:	0f 92       	push	r0
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
    17ca:	8a 83       	std	Y+2, r24	; 0x02
    17cc:	6b 83       	std	Y+3, r22	; 0x03
	LCD_tenuErrorStatus Local_enuErrorStatus = LCD_OK;
    17ce:	19 82       	std	Y+1, r1	; 0x01

	/*check arguments*/
	if ((Copy_u8Row > LCD_u8_ROW1) || (Copy_u8Column > LCD_u8_COLUMN15)){
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	82 30       	cpi	r24, 0x02	; 2
    17d4:	18 f4       	brcc	.+6      	; 0x17dc <LCD_enuGoTo+0x20>
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	80 31       	cpi	r24, 0x10	; 16
    17da:	18 f0       	brcs	.+6      	; 0x17e2 <LCD_enuGoTo+0x26>
		Local_enuErrorStatus = LCD_NOK;
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	89 83       	std	Y+1, r24	; 0x01
    17e0:	19 c0       	rjmp	.+50     	; 0x1814 <LCD_enuGoTo+0x58>
	} else {
	/*****IMPLEMENTATION*****/
		switch(Copy_u8Row){
    17e2:	8a 81       	ldd	r24, Y+2	; 0x02
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	3d 83       	std	Y+5, r19	; 0x05
    17ea:	2c 83       	std	Y+4, r18	; 0x04
    17ec:	8c 81       	ldd	r24, Y+4	; 0x04
    17ee:	9d 81       	ldd	r25, Y+5	; 0x05
    17f0:	00 97       	sbiw	r24, 0x00	; 0
    17f2:	31 f0       	breq	.+12     	; 0x1800 <LCD_enuGoTo+0x44>
    17f4:	2c 81       	ldd	r18, Y+4	; 0x04
    17f6:	3d 81       	ldd	r19, Y+5	; 0x05
    17f8:	21 30       	cpi	r18, 0x01	; 1
    17fa:	31 05       	cpc	r19, r1
    17fc:	31 f0       	breq	.+12     	; 0x180a <LCD_enuGoTo+0x4e>
    17fe:	0a c0       	rjmp	.+20     	; 0x1814 <LCD_enuGoTo+0x58>
		case LCD_u8_ROW0:
			LCD_enuSendInstruction(LCD_u8_FIRST_DDRAM_ADDRESS | Copy_u8Column);
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	80 68       	ori	r24, 0x80	; 128
    1804:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
    1808:	05 c0       	rjmp	.+10     	; 0x1814 <LCD_enuGoTo+0x58>
			break;
		case LCD_u8_ROW1:
			LCD_enuSendInstruction(LCD_u8_FIRST_DDRAM_ADDRESS | (Copy_u8Column + LCD_u8_COLUMN_IN_ROW1));
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	80 5c       	subi	r24, 0xC0	; 192
    180e:	80 68       	ori	r24, 0x80	; 128
    1810:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
			break;
		}
	}

	return Local_enuErrorStatus;
    1814:	89 81       	ldd	r24, Y+1	; 0x01
}
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <LCD_enuSendCustomCharacter>:
 * 				second Argument: 	Copy_u8NumOfBlock, 				options (0 : 7)
 * 				third Argument: 	Copy_u8Row, 					options (LCD_u8_ROW0, LCD_u8_ROW1)
 * 				fourth Argument: 	Copy_u8Column, 					options (LCD_u8_COLUMN0 : LCD_u8_COLUMN15)
 * Return:	Error Status -----> LCD_OK , LCD_NOK
 */
LCD_tenuErrorStatus	LCD_enuSendCustomCharacter(u8 *Add_pu8Pattern, u8 Copy_u8NumOfBlock, u8 Copy_u8Row, u8 Copy_u8Column){
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
    182e:	65 97       	sbiw	r28, 0x15	; 21
    1830:	0f b6       	in	r0, 0x3f	; 63
    1832:	f8 94       	cli
    1834:	de bf       	out	0x3e, r29	; 62
    1836:	0f be       	out	0x3f, r0	; 63
    1838:	cd bf       	out	0x3d, r28	; 61
    183a:	9a 8b       	std	Y+18, r25	; 0x12
    183c:	89 8b       	std	Y+17, r24	; 0x11
    183e:	6b 8b       	std	Y+19, r22	; 0x13
    1840:	4c 8b       	std	Y+20, r20	; 0x14
    1842:	2d 8b       	std	Y+21, r18	; 0x15
	LCD_tenuErrorStatus Local_enuErrorStatus = LCD_OK;
    1844:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_u8Iterator;

	/*check arguments*/
	if ((Add_pu8Pattern == NULL) || (Copy_u8NumOfBlock > LCD_u8_CGRAM_BLOCK_8) || (Copy_u8Row > LCD_u8_ROW1) || (Copy_u8Column > LCD_u8_COLUMN15)){
    1846:	89 89       	ldd	r24, Y+17	; 0x11
    1848:	9a 89       	ldd	r25, Y+18	; 0x12
    184a:	00 97       	sbiw	r24, 0x00	; 0
    184c:	49 f0       	breq	.+18     	; 0x1860 <LCD_enuSendCustomCharacter+0x3a>
    184e:	8b 89       	ldd	r24, Y+19	; 0x13
    1850:	88 30       	cpi	r24, 0x08	; 8
    1852:	30 f4       	brcc	.+12     	; 0x1860 <LCD_enuSendCustomCharacter+0x3a>
    1854:	8c 89       	ldd	r24, Y+20	; 0x14
    1856:	82 30       	cpi	r24, 0x02	; 2
    1858:	18 f4       	brcc	.+6      	; 0x1860 <LCD_enuSendCustomCharacter+0x3a>
    185a:	8d 89       	ldd	r24, Y+21	; 0x15
    185c:	80 31       	cpi	r24, 0x10	; 16
    185e:	18 f0       	brcs	.+6      	; 0x1866 <LCD_enuSendCustomCharacter+0x40>
		Local_enuErrorStatus = LCD_NOK;
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	88 8b       	std	Y+16, r24	; 0x10
    1864:	99 c0       	rjmp	.+306    	; 0x1998 <LCD_enuSendCustomCharacter+0x172>
	} else {
	/*****IMPLEMENTATION*****/
		LCD_enuSendInstruction(LCD_u8_FIRST_CGRAM_ADDRESS + (Copy_u8NumOfBlock * LCD_u8_BYTES_IN_BLOCK));
    1866:	8b 89       	ldd	r24, Y+19	; 0x13
    1868:	88 2f       	mov	r24, r24
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	08 96       	adiw	r24, 0x08	; 8
    186e:	88 0f       	add	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	88 0f       	add	r24, r24
    1874:	99 1f       	adc	r25, r25
    1876:	88 0f       	add	r24, r24
    1878:	99 1f       	adc	r25, r25
    187a:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
		for (Local_u8Iterator = 0; Local_u8Iterator < LCD_u8_BYTES_IN_BLOCK; Local_u8Iterator++){
    187e:	1f 86       	std	Y+15, r1	; 0x0f
    1880:	80 c0       	rjmp	.+256    	; 0x1982 <LCD_enuSendCustomCharacter+0x15c>
			LCD_enuSendCharacter(Add_pu8Pattern[Local_u8Iterator]);
    1882:	8f 85       	ldd	r24, Y+15	; 0x0f
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	89 89       	ldd	r24, Y+17	; 0x11
    188a:	9a 89       	ldd	r25, Y+18	; 0x12
    188c:	fc 01       	movw	r30, r24
    188e:	e2 0f       	add	r30, r18
    1890:	f3 1f       	adc	r31, r19
    1892:	80 81       	ld	r24, Z
    1894:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LCD_enuSendCharacter>
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	a0 ea       	ldi	r26, 0xA0	; 160
    189e:	b0 e4       	ldi	r27, 0x40	; 64
    18a0:	8b 87       	std	Y+11, r24	; 0x0b
    18a2:	9c 87       	std	Y+12, r25	; 0x0c
    18a4:	ad 87       	std	Y+13, r26	; 0x0d
    18a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    18aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	4a e7       	ldi	r20, 0x7A	; 122
    18b6:	55 e4       	ldi	r21, 0x45	; 69
    18b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	8f 83       	std	Y+7, r24	; 0x07
    18c2:	98 87       	std	Y+8, r25	; 0x08
    18c4:	a9 87       	std	Y+9, r26	; 0x09
    18c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18c8:	6f 81       	ldd	r22, Y+7	; 0x07
    18ca:	78 85       	ldd	r23, Y+8	; 0x08
    18cc:	89 85       	ldd	r24, Y+9	; 0x09
    18ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	40 e8       	ldi	r20, 0x80	; 128
    18d6:	5f e3       	ldi	r21, 0x3F	; 63
    18d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18dc:	88 23       	and	r24, r24
    18de:	2c f4       	brge	.+10     	; 0x18ea <LCD_enuSendCustomCharacter+0xc4>
		__ticks = 1;
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	9e 83       	std	Y+6, r25	; 0x06
    18e6:	8d 83       	std	Y+5, r24	; 0x05
    18e8:	3f c0       	rjmp	.+126    	; 0x1968 <LCD_enuSendCustomCharacter+0x142>
	else if (__tmp > 65535)
    18ea:	6f 81       	ldd	r22, Y+7	; 0x07
    18ec:	78 85       	ldd	r23, Y+8	; 0x08
    18ee:	89 85       	ldd	r24, Y+9	; 0x09
    18f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	3f ef       	ldi	r19, 0xFF	; 255
    18f6:	4f e7       	ldi	r20, 0x7F	; 127
    18f8:	57 e4       	ldi	r21, 0x47	; 71
    18fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18fe:	18 16       	cp	r1, r24
    1900:	4c f5       	brge	.+82     	; 0x1954 <LCD_enuSendCustomCharacter+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1902:	6b 85       	ldd	r22, Y+11	; 0x0b
    1904:	7c 85       	ldd	r23, Y+12	; 0x0c
    1906:	8d 85       	ldd	r24, Y+13	; 0x0d
    1908:	9e 85       	ldd	r25, Y+14	; 0x0e
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	40 e2       	ldi	r20, 0x20	; 32
    1910:	51 e4       	ldi	r21, 0x41	; 65
    1912:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	bc 01       	movw	r22, r24
    191c:	cd 01       	movw	r24, r26
    191e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	9e 83       	std	Y+6, r25	; 0x06
    1928:	8d 83       	std	Y+5, r24	; 0x05
    192a:	0f c0       	rjmp	.+30     	; 0x194a <LCD_enuSendCustomCharacter+0x124>
    192c:	80 e9       	ldi	r24, 0x90	; 144
    192e:	91 e0       	ldi	r25, 0x01	; 1
    1930:	9c 83       	std	Y+4, r25	; 0x04
    1932:	8b 83       	std	Y+3, r24	; 0x03
    1934:	8b 81       	ldd	r24, Y+3	; 0x03
    1936:	9c 81       	ldd	r25, Y+4	; 0x04
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	f1 f7       	brne	.-4      	; 0x1938 <LCD_enuSendCustomCharacter+0x112>
    193c:	9c 83       	std	Y+4, r25	; 0x04
    193e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1940:	8d 81       	ldd	r24, Y+5	; 0x05
    1942:	9e 81       	ldd	r25, Y+6	; 0x06
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	9e 83       	std	Y+6, r25	; 0x06
    1948:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    194a:	8d 81       	ldd	r24, Y+5	; 0x05
    194c:	9e 81       	ldd	r25, Y+6	; 0x06
    194e:	00 97       	sbiw	r24, 0x00	; 0
    1950:	69 f7       	brne	.-38     	; 0x192c <LCD_enuSendCustomCharacter+0x106>
    1952:	14 c0       	rjmp	.+40     	; 0x197c <LCD_enuSendCustomCharacter+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1954:	6f 81       	ldd	r22, Y+7	; 0x07
    1956:	78 85       	ldd	r23, Y+8	; 0x08
    1958:	89 85       	ldd	r24, Y+9	; 0x09
    195a:	9a 85       	ldd	r25, Y+10	; 0x0a
    195c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	9e 83       	std	Y+6, r25	; 0x06
    1966:	8d 83       	std	Y+5, r24	; 0x05
    1968:	8d 81       	ldd	r24, Y+5	; 0x05
    196a:	9e 81       	ldd	r25, Y+6	; 0x06
    196c:	9a 83       	std	Y+2, r25	; 0x02
    196e:	89 83       	std	Y+1, r24	; 0x01
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	9a 81       	ldd	r25, Y+2	; 0x02
    1974:	01 97       	sbiw	r24, 0x01	; 1
    1976:	f1 f7       	brne	.-4      	; 0x1974 <LCD_enuSendCustomCharacter+0x14e>
    1978:	9a 83       	std	Y+2, r25	; 0x02
    197a:	89 83       	std	Y+1, r24	; 0x01
	if ((Add_pu8Pattern == NULL) || (Copy_u8NumOfBlock > LCD_u8_CGRAM_BLOCK_8) || (Copy_u8Row > LCD_u8_ROW1) || (Copy_u8Column > LCD_u8_COLUMN15)){
		Local_enuErrorStatus = LCD_NOK;
	} else {
	/*****IMPLEMENTATION*****/
		LCD_enuSendInstruction(LCD_u8_FIRST_CGRAM_ADDRESS + (Copy_u8NumOfBlock * LCD_u8_BYTES_IN_BLOCK));
		for (Local_u8Iterator = 0; Local_u8Iterator < LCD_u8_BYTES_IN_BLOCK; Local_u8Iterator++){
    197c:	8f 85       	ldd	r24, Y+15	; 0x0f
    197e:	8f 5f       	subi	r24, 0xFF	; 255
    1980:	8f 87       	std	Y+15, r24	; 0x0f
    1982:	8f 85       	ldd	r24, Y+15	; 0x0f
    1984:	88 30       	cpi	r24, 0x08	; 8
    1986:	08 f4       	brcc	.+2      	; 0x198a <LCD_enuSendCustomCharacter+0x164>
    1988:	7c cf       	rjmp	.-264    	; 0x1882 <LCD_enuSendCustomCharacter+0x5c>
			LCD_enuSendCharacter(Add_pu8Pattern[Local_u8Iterator]);
			_delay_ms(5);
		}
		LCD_enuGoTo(Copy_u8Row, Copy_u8Column);
    198a:	8c 89       	ldd	r24, Y+20	; 0x14
    198c:	6d 89       	ldd	r22, Y+21	; 0x15
    198e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
		LCD_enuSendCharacter(Copy_u8NumOfBlock);
    1992:	8b 89       	ldd	r24, Y+19	; 0x13
    1994:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LCD_enuSendCharacter>
	}
	return Local_enuErrorStatus;
    1998:	88 89       	ldd	r24, Y+16	; 0x10
}
    199a:	65 96       	adiw	r28, 0x15	; 21
    199c:	0f b6       	in	r0, 0x3f	; 63
    199e:	f8 94       	cli
    19a0:	de bf       	out	0x3e, r29	; 62
    19a2:	0f be       	out	0x3f, r0	; 63
    19a4:	cd bf       	out	0x3d, r28	; 61
    19a6:	cf 91       	pop	r28
    19a8:	df 91       	pop	r29
    19aa:	08 95       	ret

000019ac <LCD_enuSendNumber>:
 * Name: LCD_enuSendNumber
 * Description: Send a number to display on the LCD
 * Arguments:	Copy_u8Number				OPTIONS --> (Any integer number)
 * Return:	Error Status -----> LCD_OK , LCD_NOK
 */
LCD_tenuErrorStatus	LCD_enuSendNumber(u8 Copy_u8Number){
    19ac:	df 93       	push	r29
    19ae:	cf 93       	push	r28
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
    19b4:	61 97       	sbiw	r28, 0x11	; 17
    19b6:	0f b6       	in	r0, 0x3f	; 63
    19b8:	f8 94       	cli
    19ba:	de bf       	out	0x3e, r29	; 62
    19bc:	0f be       	out	0x3f, r0	; 63
    19be:	cd bf       	out	0x3d, r28	; 61
    19c0:	8c 87       	std	Y+12, r24	; 0x0c
	LCD_tenuErrorStatus Local_enuErrorStatus = LCD_OK;
    19c2:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_u8Numbers[10] = "0123456789";
    19c4:	ce 01       	movw	r24, r28
    19c6:	02 96       	adiw	r24, 0x02	; 2
    19c8:	9e 87       	std	Y+14, r25	; 0x0e
    19ca:	8d 87       	std	Y+13, r24	; 0x0d
    19cc:	e0 e6       	ldi	r30, 0x60	; 96
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	f8 8b       	std	Y+16, r31	; 0x10
    19d2:	ef 87       	std	Y+15, r30	; 0x0f
    19d4:	fa e0       	ldi	r31, 0x0A	; 10
    19d6:	f9 8b       	std	Y+17, r31	; 0x11
    19d8:	ef 85       	ldd	r30, Y+15	; 0x0f
    19da:	f8 89       	ldd	r31, Y+16	; 0x10
    19dc:	00 80       	ld	r0, Z
    19de:	8f 85       	ldd	r24, Y+15	; 0x0f
    19e0:	98 89       	ldd	r25, Y+16	; 0x10
    19e2:	01 96       	adiw	r24, 0x01	; 1
    19e4:	98 8b       	std	Y+16, r25	; 0x10
    19e6:	8f 87       	std	Y+15, r24	; 0x0f
    19e8:	ed 85       	ldd	r30, Y+13	; 0x0d
    19ea:	fe 85       	ldd	r31, Y+14	; 0x0e
    19ec:	00 82       	st	Z, r0
    19ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f2:	01 96       	adiw	r24, 0x01	; 1
    19f4:	9e 87       	std	Y+14, r25	; 0x0e
    19f6:	8d 87       	std	Y+13, r24	; 0x0d
    19f8:	99 89       	ldd	r25, Y+17	; 0x11
    19fa:	91 50       	subi	r25, 0x01	; 1
    19fc:	99 8b       	std	Y+17, r25	; 0x11
    19fe:	e9 89       	ldd	r30, Y+17	; 0x11
    1a00:	ee 23       	and	r30, r30
    1a02:	51 f7       	brne	.-44     	; 0x19d8 <LCD_enuSendNumber+0x2c>
//	LCD_enuSendCharacter(Local_u8Numbers[Copy_u8Number/100%10]);
	LCD_enuSendCharacter(Local_u8Numbers[Copy_u8Number/10%10]);
    1a04:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a06:	9a e0       	ldi	r25, 0x0A	; 10
    1a08:	69 2f       	mov	r22, r25
    1a0a:	0e 94 0b 30 	call	0x6016	; 0x6016 <__udivmodqi4>
    1a0e:	9a e0       	ldi	r25, 0x0A	; 10
    1a10:	69 2f       	mov	r22, r25
    1a12:	0e 94 0b 30 	call	0x6016	; 0x6016 <__udivmodqi4>
    1a16:	89 2f       	mov	r24, r25
    1a18:	28 2f       	mov	r18, r24
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	ce 01       	movw	r24, r28
    1a1e:	02 96       	adiw	r24, 0x02	; 2
    1a20:	fc 01       	movw	r30, r24
    1a22:	e2 0f       	add	r30, r18
    1a24:	f3 1f       	adc	r31, r19
    1a26:	80 81       	ld	r24, Z
    1a28:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LCD_enuSendCharacter>
	LCD_enuSendCharacter(Local_u8Numbers[Copy_u8Number%10]);
    1a2c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a2e:	9a e0       	ldi	r25, 0x0A	; 10
    1a30:	69 2f       	mov	r22, r25
    1a32:	0e 94 0b 30 	call	0x6016	; 0x6016 <__udivmodqi4>
    1a36:	89 2f       	mov	r24, r25
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	ce 01       	movw	r24, r28
    1a3e:	02 96       	adiw	r24, 0x02	; 2
    1a40:	fc 01       	movw	r30, r24
    1a42:	e2 0f       	add	r30, r18
    1a44:	f3 1f       	adc	r31, r19
    1a46:	80 81       	ld	r24, Z
    1a48:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LCD_enuSendCharacter>


	return Local_enuErrorStatus;
    1a4c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a4e:	61 96       	adiw	r28, 0x11	; 17
    1a50:	0f b6       	in	r0, 0x3f	; 63
    1a52:	f8 94       	cli
    1a54:	de bf       	out	0x3e, r29	; 62
    1a56:	0f be       	out	0x3f, r0	; 63
    1a58:	cd bf       	out	0x3d, r28	; 61
    1a5a:	cf 91       	pop	r28
    1a5c:	df 91       	pop	r29
    1a5e:	08 95       	ret

00001a60 <LCD_enuClearLine>:
 * Name: LCD_enuSendSinusoidalString
 * Description: Clear a line or row in the LCD display screen
 * Arguments: Copy_u8Row,				options (LCD_u8_ROW0, LCD_u8_ROW1)
 * Return:	Error Status -----> LCD_OK , LCD_NOK
 */
LCD_tenuErrorStatus LCD_enuClearLine(u8 Copy_u8Row){
    1a60:	df 93       	push	r29
    1a62:	cf 93       	push	r28
    1a64:	00 d0       	rcall	.+0      	; 0x1a66 <LCD_enuClearLine+0x6>
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62
    1a6a:	8a 83       	std	Y+2, r24	; 0x02
	LCD_tenuErrorStatus Local_enuErrorStatus = LCD_OK;
    1a6c:	19 82       	std	Y+1, r1	; 0x01

	/*check arguments*/
	if(Copy_u8Row > LCD_u8_ROW1){
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	82 30       	cpi	r24, 0x02	; 2
    1a72:	18 f0       	brcs	.+6      	; 0x1a7a <LCD_enuClearLine+0x1a>
		Local_enuErrorStatus = LCD_NOK;
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	89 83       	std	Y+1, r24	; 0x01
    1a78:	0c c0       	rjmp	.+24     	; 0x1a92 <LCD_enuClearLine+0x32>
	} else {
	/*****IMPLEMENTATION*****/
	LCD_enuGoTo(Copy_u8Row, LCD_u8_COLUMN0);
    1a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7c:	60 e0       	ldi	r22, 0x00	; 0
    1a7e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
	LCD_enuSendString(LCD_u8_FREE_LINE);
    1a82:	8b e6       	ldi	r24, 0x6B	; 107
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
	LCD_enuGoTo(Copy_u8Row, LCD_u8_COLUMN0);
    1a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8c:	60 e0       	ldi	r22, 0x00	; 0
    1a8e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
	}

	return Local_enuErrorStatus;
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	cf 91       	pop	r28
    1a9a:	df 91       	pop	r29
    1a9c:	08 95       	ret

00001a9e <LCD_SendEnable>:



/******Private Function********/

static void LCD_SendEnable(void){									// Enable write data at the falling edge.
    1a9e:	df 93       	push	r29
    1aa0:	cf 93       	push	r28
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
    1aa6:	2e 97       	sbiw	r28, 0x0e	; 14
    1aa8:	0f b6       	in	r0, 0x3f	; 63
    1aaa:	f8 94       	cli
    1aac:	de bf       	out	0x3e, r29	; 62
    1aae:	0f be       	out	0x3f, r0	; 63
    1ab0:	cd bf       	out	0x3d, r28	; 61
	DIO_enuSetPinValue(LCD_u8_ENABLE_PORT, LCD_u8_ENABLE_PIN, DIO_u8_HIGH);		// select pin of enable and set it to be high.
    1ab2:	82 e0       	ldi	r24, 0x02	; 2
    1ab4:	62 e0       	ldi	r22, 0x02	; 2
    1ab6:	41 e0       	ldi	r20, 0x01	; 1
    1ab8:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_enuSetPinValue>
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	a0 e8       	ldi	r26, 0x80	; 128
    1ac2:	bf e3       	ldi	r27, 0x3F	; 63
    1ac4:	8b 87       	std	Y+11, r24	; 0x0b
    1ac6:	9c 87       	std	Y+12, r25	; 0x0c
    1ac8:	ad 87       	std	Y+13, r26	; 0x0d
    1aca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1acc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ace:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	4a e7       	ldi	r20, 0x7A	; 122
    1ada:	55 e4       	ldi	r21, 0x45	; 69
    1adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	8f 83       	std	Y+7, r24	; 0x07
    1ae6:	98 87       	std	Y+8, r25	; 0x08
    1ae8:	a9 87       	std	Y+9, r26	; 0x09
    1aea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aec:	6f 81       	ldd	r22, Y+7	; 0x07
    1aee:	78 85       	ldd	r23, Y+8	; 0x08
    1af0:	89 85       	ldd	r24, Y+9	; 0x09
    1af2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	40 e8       	ldi	r20, 0x80	; 128
    1afa:	5f e3       	ldi	r21, 0x3F	; 63
    1afc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b00:	88 23       	and	r24, r24
    1b02:	2c f4       	brge	.+10     	; 0x1b0e <LCD_SendEnable+0x70>
		__ticks = 1;
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	9e 83       	std	Y+6, r25	; 0x06
    1b0a:	8d 83       	std	Y+5, r24	; 0x05
    1b0c:	3f c0       	rjmp	.+126    	; 0x1b8c <LCD_SendEnable+0xee>
	else if (__tmp > 65535)
    1b0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b10:	78 85       	ldd	r23, Y+8	; 0x08
    1b12:	89 85       	ldd	r24, Y+9	; 0x09
    1b14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	3f ef       	ldi	r19, 0xFF	; 255
    1b1a:	4f e7       	ldi	r20, 0x7F	; 127
    1b1c:	57 e4       	ldi	r21, 0x47	; 71
    1b1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b22:	18 16       	cp	r1, r24
    1b24:	4c f5       	brge	.+82     	; 0x1b78 <LCD_SendEnable+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	40 e2       	ldi	r20, 0x20	; 32
    1b34:	51 e4       	ldi	r21, 0x41	; 65
    1b36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	bc 01       	movw	r22, r24
    1b40:	cd 01       	movw	r24, r26
    1b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	9e 83       	std	Y+6, r25	; 0x06
    1b4c:	8d 83       	std	Y+5, r24	; 0x05
    1b4e:	0f c0       	rjmp	.+30     	; 0x1b6e <LCD_SendEnable+0xd0>
    1b50:	80 e9       	ldi	r24, 0x90	; 144
    1b52:	91 e0       	ldi	r25, 0x01	; 1
    1b54:	9c 83       	std	Y+4, r25	; 0x04
    1b56:	8b 83       	std	Y+3, r24	; 0x03
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	f1 f7       	brne	.-4      	; 0x1b5c <LCD_SendEnable+0xbe>
    1b60:	9c 83       	std	Y+4, r25	; 0x04
    1b62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b64:	8d 81       	ldd	r24, Y+5	; 0x05
    1b66:	9e 81       	ldd	r25, Y+6	; 0x06
    1b68:	01 97       	sbiw	r24, 0x01	; 1
    1b6a:	9e 83       	std	Y+6, r25	; 0x06
    1b6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b70:	9e 81       	ldd	r25, Y+6	; 0x06
    1b72:	00 97       	sbiw	r24, 0x00	; 0
    1b74:	69 f7       	brne	.-38     	; 0x1b50 <LCD_SendEnable+0xb2>
    1b76:	14 c0       	rjmp	.+40     	; 0x1ba0 <LCD_SendEnable+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b78:	6f 81       	ldd	r22, Y+7	; 0x07
    1b7a:	78 85       	ldd	r23, Y+8	; 0x08
    1b7c:	89 85       	ldd	r24, Y+9	; 0x09
    1b7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	9e 83       	std	Y+6, r25	; 0x06
    1b8a:	8d 83       	std	Y+5, r24	; 0x05
    1b8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b90:	9a 83       	std	Y+2, r25	; 0x02
    1b92:	89 83       	std	Y+1, r24	; 0x01
    1b94:	89 81       	ldd	r24, Y+1	; 0x01
    1b96:	9a 81       	ldd	r25, Y+2	; 0x02
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	f1 f7       	brne	.-4      	; 0x1b98 <LCD_SendEnable+0xfa>
    1b9c:	9a 83       	std	Y+2, r25	; 0x02
    1b9e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);													// delay 1ms before the falling.
	DIO_enuSetPinValue(LCD_u8_ENABLE_PORT, LCD_u8_ENABLE_PIN, DIO_u8_LOW);		//select pin of enable and set it to be low.
    1ba0:	82 e0       	ldi	r24, 0x02	; 2
    1ba2:	62 e0       	ldi	r22, 0x02	; 2
    1ba4:	40 e0       	ldi	r20, 0x00	; 0
    1ba6:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_enuSetPinValue>
}
    1baa:	2e 96       	adiw	r28, 0x0e	; 14
    1bac:	0f b6       	in	r0, 0x3f	; 63
    1bae:	f8 94       	cli
    1bb0:	de bf       	out	0x3e, r29	; 62
    1bb2:	0f be       	out	0x3f, r0	; 63
    1bb4:	cd bf       	out	0x3d, r28	; 61
    1bb6:	cf 91       	pop	r28
    1bb8:	df 91       	pop	r29
    1bba:	08 95       	ret

00001bbc <KEYPAD_vidTnti>:

extern const u8 KEYPAD_au8KeyValue [KEYPAD_u8_ROWS_NUM][KEYPAD_u8_COLUMNS_NUM];
extern const u8 KEYPAD_au8Rows[KEYPAD_u8_ROWS_NUM][KEYPAD_u8_PORT_PIN];
extern const u8 KEYPAD_au8Columns[KEYPAD_u8_COLUMNS_NUM][KEYPAD_u8_PORT_PIN];

void KEYPAD_vidTnti(void){
    1bbc:	df 93       	push	r29
    1bbe:	cf 93       	push	r28
    1bc0:	cd b7       	in	r28, 0x3d	; 61
    1bc2:	de b7       	in	r29, 0x3e	; 62
	DIO_vidInit();
    1bc4:	0e 94 c7 06 	call	0xd8e	; 0xd8e <DIO_vidInit>
}
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	08 95       	ret

00001bce <KEYPAD_vidGetPressedKey>:


KEYPAD_tenuErrorStatus KEYPAD_vidGetPressedKey(u8 *Add_pu8KeyValue){
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
    1bd6:	64 97       	sbiw	r28, 0x14	; 20
    1bd8:	0f b6       	in	r0, 0x3f	; 63
    1bda:	f8 94       	cli
    1bdc:	de bf       	out	0x3e, r29	; 62
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	cd bf       	out	0x3d, r28	; 61
    1be2:	9c 8b       	std	Y+20, r25	; 0x14
    1be4:	8b 8b       	std	Y+19, r24	; 0x13
	KEYPAD_tenuErrorStatus Local_enuErrorStatus = KEYPAD_OK;
    1be6:	19 8a       	std	Y+17, r1	; 0x11
	u8 Local_u8IteratorRow;
	u8 Local_u8IteratorColumn;
	u8 Local_u8KeyPressedIndicator;
	/* check argument */
	if(Add_pu8KeyValue == NULL){
    1be8:	8b 89       	ldd	r24, Y+19	; 0x13
    1bea:	9c 89       	ldd	r25, Y+20	; 0x14
    1bec:	00 97       	sbiw	r24, 0x00	; 0
    1bee:	19 f4       	brne	.+6      	; 0x1bf6 <KEYPAD_vidGetPressedKey+0x28>
		Local_enuErrorStatus = KEYPAD_NOK;
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	89 8b       	std	Y+17, r24	; 0x11
    1bf4:	e5 c0       	rjmp	.+458    	; 0x1dc0 <KEYPAD_vidGetPressedKey+0x1f2>
	} else {
		for(Local_u8IteratorColumn = 0; Local_u8IteratorColumn < KEYPAD_u8_COLUMNS_NUM; Local_u8IteratorColumn++){
    1bf6:	1f 86       	std	Y+15, r1	; 0x0f
    1bf8:	df c0       	rjmp	.+446    	; 0x1db8 <KEYPAD_vidGetPressedKey+0x1ea>
			DIO_enuSetPinValue(KEYPAD_au8Columns[Local_u8IteratorColumn][KEYPAD_u8_PORT],
    1bfa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bfc:	88 2f       	mov	r24, r24
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	88 0f       	add	r24, r24
    1c02:	99 1f       	adc	r25, r25
    1c04:	fc 01       	movw	r30, r24
    1c06:	ee 5f       	subi	r30, 0xFE	; 254
    1c08:	fc 4f       	sbci	r31, 0xFC	; 252
    1c0a:	20 81       	ld	r18, Z
    1c0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c0e:	88 2f       	mov	r24, r24
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	88 0f       	add	r24, r24
    1c14:	99 1f       	adc	r25, r25
    1c16:	fc 01       	movw	r30, r24
    1c18:	ed 5f       	subi	r30, 0xFD	; 253
    1c1a:	fc 4f       	sbci	r31, 0xFC	; 252
    1c1c:	90 81       	ld	r25, Z
    1c1e:	82 2f       	mov	r24, r18
    1c20:	69 2f       	mov	r22, r25
    1c22:	40 e0       	ldi	r20, 0x00	; 0
    1c24:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_enuSetPinValue>
								KEYPAD_au8Columns[Local_u8IteratorColumn][KEYPAD_u8_PIN], DIO_u8_LOW);
			for(Local_u8IteratorRow = 0; Local_u8IteratorRow < KEYPAD_u8_ROWS_NUM; Local_u8IteratorRow++){
    1c28:	18 8a       	std	Y+16, r1	; 0x10
    1c2a:	a8 c0       	rjmp	.+336    	; 0x1d7c <KEYPAD_vidGetPressedKey+0x1ae>
				DIO_enuGetPinValue(KEYPAD_au8Rows[Local_u8IteratorRow][KEYPAD_u8_PORT],
    1c2c:	88 89       	ldd	r24, Y+16	; 0x10
    1c2e:	88 2f       	mov	r24, r24
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	88 0f       	add	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	fc 01       	movw	r30, r24
    1c38:	e6 50       	subi	r30, 0x06	; 6
    1c3a:	fd 4f       	sbci	r31, 0xFD	; 253
    1c3c:	40 81       	ld	r20, Z
    1c3e:	88 89       	ldd	r24, Y+16	; 0x10
    1c40:	88 2f       	mov	r24, r24
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	88 0f       	add	r24, r24
    1c46:	99 1f       	adc	r25, r25
    1c48:	fc 01       	movw	r30, r24
    1c4a:	e5 50       	subi	r30, 0x05	; 5
    1c4c:	fd 4f       	sbci	r31, 0xFD	; 253
    1c4e:	90 81       	ld	r25, Z
    1c50:	9e 01       	movw	r18, r28
    1c52:	2e 5e       	subi	r18, 0xEE	; 238
    1c54:	3f 4f       	sbci	r19, 0xFF	; 255
    1c56:	84 2f       	mov	r24, r20
    1c58:	69 2f       	mov	r22, r25
    1c5a:	a9 01       	movw	r20, r18
    1c5c:	0e 94 2c 08 	call	0x1058	; 0x1058 <DIO_enuGetPinValue>
									KEYPAD_au8Rows[Local_u8IteratorRow][KEYPAD_u8_PIN], &Local_u8KeyPressedIndicator);
				if(Local_u8KeyPressedIndicator == 0){	// will be 0 only if any key pressed
    1c60:	8a 89       	ldd	r24, Y+18	; 0x12
    1c62:	88 23       	and	r24, r24
    1c64:	09 f0       	breq	.+2      	; 0x1c68 <KEYPAD_vidGetPressedKey+0x9a>
    1c66:	87 c0       	rjmp	.+270    	; 0x1d76 <KEYPAD_vidGetPressedKey+0x1a8>
					*Add_pu8KeyValue = KEYPAD_au8KeyValue[Local_u8IteratorRow][Local_u8IteratorColumn]; //put the selected pressed key to the retrurnval
    1c68:	88 89       	ldd	r24, Y+16	; 0x10
    1c6a:	28 2f       	mov	r18, r24
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c70:	48 2f       	mov	r20, r24
    1c72:	50 e0       	ldi	r21, 0x00	; 0
    1c74:	c9 01       	movw	r24, r18
    1c76:	88 0f       	add	r24, r24
    1c78:	99 1f       	adc	r25, r25
    1c7a:	82 0f       	add	r24, r18
    1c7c:	93 1f       	adc	r25, r19
    1c7e:	84 0f       	add	r24, r20
    1c80:	95 1f       	adc	r25, r21
    1c82:	fc 01       	movw	r30, r24
    1c84:	e2 51       	subi	r30, 0x12	; 18
    1c86:	fd 4f       	sbci	r31, 0xFD	; 253
    1c88:	80 81       	ld	r24, Z
    1c8a:	eb 89       	ldd	r30, Y+19	; 0x13
    1c8c:	fc 89       	ldd	r31, Y+20	; 0x14
    1c8e:	80 83       	st	Z, r24
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	a0 e7       	ldi	r26, 0x70	; 112
    1c96:	b1 e4       	ldi	r27, 0x41	; 65
    1c98:	8b 87       	std	Y+11, r24	; 0x0b
    1c9a:	9c 87       	std	Y+12, r25	; 0x0c
    1c9c:	ad 87       	std	Y+13, r26	; 0x0d
    1c9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	4a e7       	ldi	r20, 0x7A	; 122
    1cae:	55 e4       	ldi	r21, 0x45	; 69
    1cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	8f 83       	std	Y+7, r24	; 0x07
    1cba:	98 87       	std	Y+8, r25	; 0x08
    1cbc:	a9 87       	std	Y+9, r26	; 0x09
    1cbe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc2:	78 85       	ldd	r23, Y+8	; 0x08
    1cc4:	89 85       	ldd	r24, Y+9	; 0x09
    1cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	40 e8       	ldi	r20, 0x80	; 128
    1cce:	5f e3       	ldi	r21, 0x3F	; 63
    1cd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cd4:	88 23       	and	r24, r24
    1cd6:	2c f4       	brge	.+10     	; 0x1ce2 <KEYPAD_vidGetPressedKey+0x114>
		__ticks = 1;
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	9e 83       	std	Y+6, r25	; 0x06
    1cde:	8d 83       	std	Y+5, r24	; 0x05
    1ce0:	3f c0       	rjmp	.+126    	; 0x1d60 <KEYPAD_vidGetPressedKey+0x192>
	else if (__tmp > 65535)
    1ce2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce4:	78 85       	ldd	r23, Y+8	; 0x08
    1ce6:	89 85       	ldd	r24, Y+9	; 0x09
    1ce8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	3f ef       	ldi	r19, 0xFF	; 255
    1cee:	4f e7       	ldi	r20, 0x7F	; 127
    1cf0:	57 e4       	ldi	r21, 0x47	; 71
    1cf2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cf6:	18 16       	cp	r1, r24
    1cf8:	4c f5       	brge	.+82     	; 0x1d4c <KEYPAD_vidGetPressedKey+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	40 e2       	ldi	r20, 0x20	; 32
    1d08:	51 e4       	ldi	r21, 0x41	; 65
    1d0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	cb 01       	movw	r24, r22
    1d12:	bc 01       	movw	r22, r24
    1d14:	cd 01       	movw	r24, r26
    1d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	9e 83       	std	Y+6, r25	; 0x06
    1d20:	8d 83       	std	Y+5, r24	; 0x05
    1d22:	0f c0       	rjmp	.+30     	; 0x1d42 <KEYPAD_vidGetPressedKey+0x174>
    1d24:	80 e9       	ldi	r24, 0x90	; 144
    1d26:	91 e0       	ldi	r25, 0x01	; 1
    1d28:	9c 83       	std	Y+4, r25	; 0x04
    1d2a:	8b 83       	std	Y+3, r24	; 0x03
    1d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d30:	01 97       	sbiw	r24, 0x01	; 1
    1d32:	f1 f7       	brne	.-4      	; 0x1d30 <KEYPAD_vidGetPressedKey+0x162>
    1d34:	9c 83       	std	Y+4, r25	; 0x04
    1d36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d38:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3c:	01 97       	sbiw	r24, 0x01	; 1
    1d3e:	9e 83       	std	Y+6, r25	; 0x06
    1d40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d42:	8d 81       	ldd	r24, Y+5	; 0x05
    1d44:	9e 81       	ldd	r25, Y+6	; 0x06
    1d46:	00 97       	sbiw	r24, 0x00	; 0
    1d48:	69 f7       	brne	.-38     	; 0x1d24 <KEYPAD_vidGetPressedKey+0x156>
    1d4a:	1c c0       	rjmp	.+56     	; 0x1d84 <KEYPAD_vidGetPressedKey+0x1b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d4e:	78 85       	ldd	r23, Y+8	; 0x08
    1d50:	89 85       	ldd	r24, Y+9	; 0x09
    1d52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	9e 83       	std	Y+6, r25	; 0x06
    1d5e:	8d 83       	std	Y+5, r24	; 0x05
    1d60:	8d 81       	ldd	r24, Y+5	; 0x05
    1d62:	9e 81       	ldd	r25, Y+6	; 0x06
    1d64:	9a 83       	std	Y+2, r25	; 0x02
    1d66:	89 83       	std	Y+1, r24	; 0x01
    1d68:	89 81       	ldd	r24, Y+1	; 0x01
    1d6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d6c:	01 97       	sbiw	r24, 0x01	; 1
    1d6e:	f1 f7       	brne	.-4      	; 0x1d6c <KEYPAD_vidGetPressedKey+0x19e>
    1d70:	9a 83       	std	Y+2, r25	; 0x02
    1d72:	89 83       	std	Y+1, r24	; 0x01
    1d74:	07 c0       	rjmp	.+14     	; 0x1d84 <KEYPAD_vidGetPressedKey+0x1b6>
		Local_enuErrorStatus = KEYPAD_NOK;
	} else {
		for(Local_u8IteratorColumn = 0; Local_u8IteratorColumn < KEYPAD_u8_COLUMNS_NUM; Local_u8IteratorColumn++){
			DIO_enuSetPinValue(KEYPAD_au8Columns[Local_u8IteratorColumn][KEYPAD_u8_PORT],
								KEYPAD_au8Columns[Local_u8IteratorColumn][KEYPAD_u8_PIN], DIO_u8_LOW);
			for(Local_u8IteratorRow = 0; Local_u8IteratorRow < KEYPAD_u8_ROWS_NUM; Local_u8IteratorRow++){
    1d76:	88 89       	ldd	r24, Y+16	; 0x10
    1d78:	8f 5f       	subi	r24, 0xFF	; 255
    1d7a:	88 8b       	std	Y+16, r24	; 0x10
    1d7c:	88 89       	ldd	r24, Y+16	; 0x10
    1d7e:	84 30       	cpi	r24, 0x04	; 4
    1d80:	08 f4       	brcc	.+2      	; 0x1d84 <KEYPAD_vidGetPressedKey+0x1b6>
    1d82:	54 cf       	rjmp	.-344    	; 0x1c2c <KEYPAD_vidGetPressedKey+0x5e>
					*Add_pu8KeyValue = KEYPAD_au8KeyValue[Local_u8IteratorRow][Local_u8IteratorColumn]; //put the selected pressed key to the retrurnval
					_delay_ms(15);
					break; // break from the loop
				}
			}
			DIO_enuSetPinValue(KEYPAD_au8Columns[Local_u8IteratorColumn][KEYPAD_u8_PORT],
    1d84:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d86:	88 2f       	mov	r24, r24
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	88 0f       	add	r24, r24
    1d8c:	99 1f       	adc	r25, r25
    1d8e:	fc 01       	movw	r30, r24
    1d90:	ee 5f       	subi	r30, 0xFE	; 254
    1d92:	fc 4f       	sbci	r31, 0xFC	; 252
    1d94:	20 81       	ld	r18, Z
    1d96:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d98:	88 2f       	mov	r24, r24
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	88 0f       	add	r24, r24
    1d9e:	99 1f       	adc	r25, r25
    1da0:	fc 01       	movw	r30, r24
    1da2:	ed 5f       	subi	r30, 0xFD	; 253
    1da4:	fc 4f       	sbci	r31, 0xFC	; 252
    1da6:	90 81       	ld	r25, Z
    1da8:	82 2f       	mov	r24, r18
    1daa:	69 2f       	mov	r22, r25
    1dac:	41 e0       	ldi	r20, 0x01	; 1
    1dae:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_enuSetPinValue>
	u8 Local_u8KeyPressedIndicator;
	/* check argument */
	if(Add_pu8KeyValue == NULL){
		Local_enuErrorStatus = KEYPAD_NOK;
	} else {
		for(Local_u8IteratorColumn = 0; Local_u8IteratorColumn < KEYPAD_u8_COLUMNS_NUM; Local_u8IteratorColumn++){
    1db2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1db4:	8f 5f       	subi	r24, 0xFF	; 255
    1db6:	8f 87       	std	Y+15, r24	; 0x0f
    1db8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dba:	83 30       	cpi	r24, 0x03	; 3
    1dbc:	08 f4       	brcc	.+2      	; 0x1dc0 <KEYPAD_vidGetPressedKey+0x1f2>
    1dbe:	1d cf       	rjmp	.-454    	; 0x1bfa <KEYPAD_vidGetPressedKey+0x2c>
			}
			DIO_enuSetPinValue(KEYPAD_au8Columns[Local_u8IteratorColumn][KEYPAD_u8_PORT],
								KEYPAD_au8Columns[Local_u8IteratorColumn][KEYPAD_u8_PIN], DIO_u8_HIGH);
		}
	}
	return Local_enuErrorStatus;
    1dc0:	89 89       	ldd	r24, Y+17	; 0x11
}
    1dc2:	64 96       	adiw	r28, 0x14	; 20
    1dc4:	0f b6       	in	r0, 0x3f	; 63
    1dc6:	f8 94       	cli
    1dc8:	de bf       	out	0x3e, r29	; 62
    1dca:	0f be       	out	0x3f, r0	; 63
    1dcc:	cd bf       	out	0x3d, r28	; 61
    1dce:	cf 91       	pop	r28
    1dd0:	df 91       	pop	r29
    1dd2:	08 95       	ret

00001dd4 <HELPER_vidSucessLogin>:
/* Name: HELPER_vidSucessLogin
 * Description: block of code needed to exclude every time user login with a correct password
 * Arguments: void
 * Return:	void
 */
void HELPER_vidSucessLogin(void){
    1dd4:	df 93       	push	r29
    1dd6:	cf 93       	push	r28
    1dd8:	cd b7       	in	r28, 0x3d	; 61
    1dda:	de b7       	in	r29, 0x3e	; 62
    1ddc:	6b 97       	sbiw	r28, 0x1b	; 27
    1dde:	0f b6       	in	r0, 0x3f	; 63
    1de0:	f8 94       	cli
    1de2:	de bf       	out	0x3e, r29	; 62
    1de4:	0f be       	out	0x3f, r0	; 63
    1de6:	cd bf       	out	0x3d, r28	; 61
	/* local variable */
	u8 Local_au8CustomCharacterUnlock[BLOCK_SIZE] = {0x0E, 0x10, 0x10, 0x1F, 0x1B, 0x1B, 0x1F, 0x00}; //unlock pattern --> CGRAM_BLOCK_1
    1de8:	ce 01       	movw	r24, r28
    1dea:	0f 96       	adiw	r24, 0x0f	; 15
    1dec:	98 8f       	std	Y+24, r25	; 0x18
    1dee:	8f 8b       	std	Y+23, r24	; 0x17
    1df0:	e8 e0       	ldi	r30, 0x08	; 8
    1df2:	f3 e0       	ldi	r31, 0x03	; 3
    1df4:	fa 8f       	std	Y+26, r31	; 0x1a
    1df6:	e9 8f       	std	Y+25, r30	; 0x19
    1df8:	f8 e0       	ldi	r31, 0x08	; 8
    1dfa:	fb 8f       	std	Y+27, r31	; 0x1b
    1dfc:	e9 8d       	ldd	r30, Y+25	; 0x19
    1dfe:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1e00:	00 80       	ld	r0, Z
    1e02:	89 8d       	ldd	r24, Y+25	; 0x19
    1e04:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1e06:	01 96       	adiw	r24, 0x01	; 1
    1e08:	9a 8f       	std	Y+26, r25	; 0x1a
    1e0a:	89 8f       	std	Y+25, r24	; 0x19
    1e0c:	ef 89       	ldd	r30, Y+23	; 0x17
    1e0e:	f8 8d       	ldd	r31, Y+24	; 0x18
    1e10:	00 82       	st	Z, r0
    1e12:	8f 89       	ldd	r24, Y+23	; 0x17
    1e14:	98 8d       	ldd	r25, Y+24	; 0x18
    1e16:	01 96       	adiw	r24, 0x01	; 1
    1e18:	98 8f       	std	Y+24, r25	; 0x18
    1e1a:	8f 8b       	std	Y+23, r24	; 0x17
    1e1c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e1e:	91 50       	subi	r25, 0x01	; 1
    1e20:	9b 8f       	std	Y+27, r25	; 0x1b
    1e22:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1e24:	ee 23       	and	r30, r30
    1e26:	51 f7       	brne	.-44     	; 0x1dfc <HELPER_vidSucessLogin+0x28>

	/* success login LED */
	DIO_enuSetPinValue(DIO_u8_PORTD, DIO_u8_PIN7, DIO_u8_HIGH);
    1e28:	83 e0       	ldi	r24, 0x03	; 3
    1e2a:	67 e0       	ldi	r22, 0x07	; 7
    1e2c:	41 e0       	ldi	r20, 0x01	; 1
    1e2e:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_enuSetPinValue>

	/* success login screen */
	LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);		//clear LCD screen
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
	LCD_enuSendCustomCharacter(Local_au8CustomCharacterUnlock, LCD_u8_CGRAM_BLOCK_1, LCD_u8_ROW0, LCD_u8_COLUMN8);
    1e38:	ce 01       	movw	r24, r28
    1e3a:	0f 96       	adiw	r24, 0x0f	; 15
    1e3c:	60 e0       	ldi	r22, 0x00	; 0
    1e3e:	40 e0       	ldi	r20, 0x00	; 0
    1e40:	28 e0       	ldi	r18, 0x08	; 8
    1e42:	0e 94 13 0c 	call	0x1826	; 0x1826 <LCD_enuSendCustomCharacter>
	LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN2); //move the cursor to the middle of second row
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	62 e0       	ldi	r22, 0x02	; 2
    1e4a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
	LCD_enuSendString("Success Login");
    1e4e:	8c e7       	ldi	r24, 0x7C	; 124
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	a8 ec       	ldi	r26, 0xC8	; 200
    1e5c:	b2 e4       	ldi	r27, 0x42	; 66
    1e5e:	8b 87       	std	Y+11, r24	; 0x0b
    1e60:	9c 87       	std	Y+12, r25	; 0x0c
    1e62:	ad 87       	std	Y+13, r26	; 0x0d
    1e64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e66:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e68:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	4a e7       	ldi	r20, 0x7A	; 122
    1e74:	55 e4       	ldi	r21, 0x45	; 69
    1e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	8f 83       	std	Y+7, r24	; 0x07
    1e80:	98 87       	std	Y+8, r25	; 0x08
    1e82:	a9 87       	std	Y+9, r26	; 0x09
    1e84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e86:	6f 81       	ldd	r22, Y+7	; 0x07
    1e88:	78 85       	ldd	r23, Y+8	; 0x08
    1e8a:	89 85       	ldd	r24, Y+9	; 0x09
    1e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	40 e8       	ldi	r20, 0x80	; 128
    1e94:	5f e3       	ldi	r21, 0x3F	; 63
    1e96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e9a:	88 23       	and	r24, r24
    1e9c:	2c f4       	brge	.+10     	; 0x1ea8 <HELPER_vidSucessLogin+0xd4>
		__ticks = 1;
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	9e 83       	std	Y+6, r25	; 0x06
    1ea4:	8d 83       	std	Y+5, r24	; 0x05
    1ea6:	3f c0       	rjmp	.+126    	; 0x1f26 <HELPER_vidSucessLogin+0x152>
	else if (__tmp > 65535)
    1ea8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eaa:	78 85       	ldd	r23, Y+8	; 0x08
    1eac:	89 85       	ldd	r24, Y+9	; 0x09
    1eae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	3f ef       	ldi	r19, 0xFF	; 255
    1eb4:	4f e7       	ldi	r20, 0x7F	; 127
    1eb6:	57 e4       	ldi	r21, 0x47	; 71
    1eb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ebc:	18 16       	cp	r1, r24
    1ebe:	4c f5       	brge	.+82     	; 0x1f12 <HELPER_vidSucessLogin+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ec2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ec4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ec6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	40 e2       	ldi	r20, 0x20	; 32
    1ece:	51 e4       	ldi	r21, 0x41	; 65
    1ed0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	bc 01       	movw	r22, r24
    1eda:	cd 01       	movw	r24, r26
    1edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	9e 83       	std	Y+6, r25	; 0x06
    1ee6:	8d 83       	std	Y+5, r24	; 0x05
    1ee8:	0f c0       	rjmp	.+30     	; 0x1f08 <HELPER_vidSucessLogin+0x134>
    1eea:	80 e9       	ldi	r24, 0x90	; 144
    1eec:	91 e0       	ldi	r25, 0x01	; 1
    1eee:	9c 83       	std	Y+4, r25	; 0x04
    1ef0:	8b 83       	std	Y+3, r24	; 0x03
    1ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef6:	01 97       	sbiw	r24, 0x01	; 1
    1ef8:	f1 f7       	brne	.-4      	; 0x1ef6 <HELPER_vidSucessLogin+0x122>
    1efa:	9c 83       	std	Y+4, r25	; 0x04
    1efc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1efe:	8d 81       	ldd	r24, Y+5	; 0x05
    1f00:	9e 81       	ldd	r25, Y+6	; 0x06
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	9e 83       	std	Y+6, r25	; 0x06
    1f06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f08:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0c:	00 97       	sbiw	r24, 0x00	; 0
    1f0e:	69 f7       	brne	.-38     	; 0x1eea <HELPER_vidSucessLogin+0x116>
    1f10:	14 c0       	rjmp	.+40     	; 0x1f3a <HELPER_vidSucessLogin+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f12:	6f 81       	ldd	r22, Y+7	; 0x07
    1f14:	78 85       	ldd	r23, Y+8	; 0x08
    1f16:	89 85       	ldd	r24, Y+9	; 0x09
    1f18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	9e 83       	std	Y+6, r25	; 0x06
    1f24:	8d 83       	std	Y+5, r24	; 0x05
    1f26:	8d 81       	ldd	r24, Y+5	; 0x05
    1f28:	9e 81       	ldd	r25, Y+6	; 0x06
    1f2a:	9a 83       	std	Y+2, r25	; 0x02
    1f2c:	89 83       	std	Y+1, r24	; 0x01
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
    1f30:	9a 81       	ldd	r25, Y+2	; 0x02
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	f1 f7       	brne	.-4      	; 0x1f32 <HELPER_vidSucessLogin+0x15e>
    1f36:	9a 83       	std	Y+2, r25	; 0x02
    1f38:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);	//stand the system up to display success login message for 100 ms
}
    1f3a:	6b 96       	adiw	r28, 0x1b	; 27
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	de bf       	out	0x3e, r29	; 62
    1f42:	0f be       	out	0x3f, r0	; 63
    1f44:	cd bf       	out	0x3d, r28	; 61
    1f46:	cf 91       	pop	r28
    1f48:	df 91       	pop	r29
    1f4a:	08 95       	ret

00001f4c <main>:
#include "helper.h"

/**************** GLOBAL Variables ****************/
u8 u8_loginMode = NO_LOGIN;	//create a global variable carry the value that refer to the login state

void main(void) {
    1f4c:	0f 93       	push	r16
    1f4e:	1f 93       	push	r17
    1f50:	df 93       	push	r29
    1f52:	cf 93       	push	r28
    1f54:	cd b7       	in	r28, 0x3d	; 61
    1f56:	de b7       	in	r29, 0x3e	; 62
    1f58:	c0 5d       	subi	r28, 0xD0	; 208
    1f5a:	d0 40       	sbci	r29, 0x00	; 0
    1f5c:	0f b6       	in	r0, 0x3f	; 63
    1f5e:	f8 94       	cli
    1f60:	de bf       	out	0x3e, r29	; 62
    1f62:	0f be       	out	0x3f, r0	; 63
    1f64:	cd bf       	out	0x3d, r28	; 61
/**************** LOCAL VARIABLE ****************/
	u8 Local_u8passCounter;	//create a counter to limit the password character as setting in the main_prv.h file
//	u8 Local_au8password[PASS_SIZE] = {NO_VALUE, NO_VALUE, NO_VALUE, NO_VALUE};	//create an array to store the password in it
	u8 Local_au8ownerPassword[PASS_SIZE] = {NO_VALUE, NO_VALUE, NO_VALUE, NO_VALUE};	//create an array to store the owner password in it
    1f66:	fe 01       	movw	r30, r28
    1f68:	e7 54       	subi	r30, 0x47	; 71
    1f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6c:	8f ef       	ldi	r24, 0xFF	; 255
    1f6e:	80 83       	st	Z, r24
    1f70:	fe 01       	movw	r30, r28
    1f72:	e7 54       	subi	r30, 0x47	; 71
    1f74:	ff 4f       	sbci	r31, 0xFF	; 255
    1f76:	8f ef       	ldi	r24, 0xFF	; 255
    1f78:	81 83       	std	Z+1, r24	; 0x01
    1f7a:	fe 01       	movw	r30, r28
    1f7c:	e7 54       	subi	r30, 0x47	; 71
    1f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f80:	8f ef       	ldi	r24, 0xFF	; 255
    1f82:	82 83       	std	Z+2, r24	; 0x02
    1f84:	fe 01       	movw	r30, r28
    1f86:	e7 54       	subi	r30, 0x47	; 71
    1f88:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8a:	8f ef       	ldi	r24, 0xFF	; 255
    1f8c:	83 83       	std	Z+3, r24	; 0x03
	u8 Local_au8tenantPassword[PASS_SIZE] = {NO_VALUE, NO_VALUE, NO_VALUE, NO_VALUE};	//create an array to store the tenant password in it
    1f8e:	fe 01       	movw	r30, r28
    1f90:	e3 54       	subi	r30, 0x43	; 67
    1f92:	ff 4f       	sbci	r31, 0xFF	; 255
    1f94:	8f ef       	ldi	r24, 0xFF	; 255
    1f96:	80 83       	st	Z, r24
    1f98:	fe 01       	movw	r30, r28
    1f9a:	e3 54       	subi	r30, 0x43	; 67
    1f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9e:	8f ef       	ldi	r24, 0xFF	; 255
    1fa0:	81 83       	std	Z+1, r24	; 0x01
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	e3 54       	subi	r30, 0x43	; 67
    1fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa8:	8f ef       	ldi	r24, 0xFF	; 255
    1faa:	82 83       	std	Z+2, r24	; 0x02
    1fac:	fe 01       	movw	r30, r28
    1fae:	e3 54       	subi	r30, 0x43	; 67
    1fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb2:	8f ef       	ldi	r24, 0xFF	; 255
    1fb4:	83 83       	std	Z+3, r24	; 0x03
	u8 Local_u8keyPressed = WAITING_PRESS_KEY;	//create a variable to store the pressed key
    1fb6:	fe 01       	movw	r30, r28
    1fb8:	ef 53       	subi	r30, 0x3F	; 63
    1fba:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbc:	8f ef       	ldi	r24, 0xFF	; 255
    1fbe:	80 83       	st	Z, r24
	u8 Local_u8inputPassword;	//create a variable to refer to the input password right or wrong
	u8 Local_au8CustomCharacterSmile[8] = { 0x00, 0x00, 0x0A, 0x00, 0x04, 0x11, 0x0E, 0x00 };
    1fc0:	ce 01       	movw	r24, r28
    1fc2:	8e 53       	subi	r24, 0x3E	; 62
    1fc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc6:	c4 53       	subi	r28, 0x34	; 52
    1fc8:	df 4f       	sbci	r29, 0xFF	; 255
    1fca:	99 83       	std	Y+1, r25	; 0x01
    1fcc:	88 83       	st	Y, r24
    1fce:	cc 5c       	subi	r28, 0xCC	; 204
    1fd0:	d0 40       	sbci	r29, 0x00	; 0
    1fd2:	20 e1       	ldi	r18, 0x10	; 16
    1fd4:	33 e0       	ldi	r19, 0x03	; 3
    1fd6:	c2 53       	subi	r28, 0x32	; 50
    1fd8:	df 4f       	sbci	r29, 0xFF	; 255
    1fda:	39 83       	std	Y+1, r19	; 0x01
    1fdc:	28 83       	st	Y, r18
    1fde:	ce 5c       	subi	r28, 0xCE	; 206
    1fe0:	d0 40       	sbci	r29, 0x00	; 0
    1fe2:	38 e0       	ldi	r19, 0x08	; 8
    1fe4:	c0 53       	subi	r28, 0x30	; 48
    1fe6:	df 4f       	sbci	r29, 0xFF	; 255
    1fe8:	38 83       	st	Y, r19
    1fea:	c0 5d       	subi	r28, 0xD0	; 208
    1fec:	d0 40       	sbci	r29, 0x00	; 0
    1fee:	c2 53       	subi	r28, 0x32	; 50
    1ff0:	df 4f       	sbci	r29, 0xFF	; 255
    1ff2:	e8 81       	ld	r30, Y
    1ff4:	f9 81       	ldd	r31, Y+1	; 0x01
    1ff6:	ce 5c       	subi	r28, 0xCE	; 206
    1ff8:	d0 40       	sbci	r29, 0x00	; 0
    1ffa:	00 80       	ld	r0, Z
    1ffc:	c2 53       	subi	r28, 0x32	; 50
    1ffe:	df 4f       	sbci	r29, 0xFF	; 255
    2000:	28 81       	ld	r18, Y
    2002:	39 81       	ldd	r19, Y+1	; 0x01
    2004:	ce 5c       	subi	r28, 0xCE	; 206
    2006:	d0 40       	sbci	r29, 0x00	; 0
    2008:	2f 5f       	subi	r18, 0xFF	; 255
    200a:	3f 4f       	sbci	r19, 0xFF	; 255
    200c:	c2 53       	subi	r28, 0x32	; 50
    200e:	df 4f       	sbci	r29, 0xFF	; 255
    2010:	39 83       	std	Y+1, r19	; 0x01
    2012:	28 83       	st	Y, r18
    2014:	ce 5c       	subi	r28, 0xCE	; 206
    2016:	d0 40       	sbci	r29, 0x00	; 0
    2018:	c4 53       	subi	r28, 0x34	; 52
    201a:	df 4f       	sbci	r29, 0xFF	; 255
    201c:	e8 81       	ld	r30, Y
    201e:	f9 81       	ldd	r31, Y+1	; 0x01
    2020:	cc 5c       	subi	r28, 0xCC	; 204
    2022:	d0 40       	sbci	r29, 0x00	; 0
    2024:	00 82       	st	Z, r0
    2026:	c4 53       	subi	r28, 0x34	; 52
    2028:	df 4f       	sbci	r29, 0xFF	; 255
    202a:	28 81       	ld	r18, Y
    202c:	39 81       	ldd	r19, Y+1	; 0x01
    202e:	cc 5c       	subi	r28, 0xCC	; 204
    2030:	d0 40       	sbci	r29, 0x00	; 0
    2032:	2f 5f       	subi	r18, 0xFF	; 255
    2034:	3f 4f       	sbci	r19, 0xFF	; 255
    2036:	c4 53       	subi	r28, 0x34	; 52
    2038:	df 4f       	sbci	r29, 0xFF	; 255
    203a:	39 83       	std	Y+1, r19	; 0x01
    203c:	28 83       	st	Y, r18
    203e:	cc 5c       	subi	r28, 0xCC	; 204
    2040:	d0 40       	sbci	r29, 0x00	; 0
    2042:	c0 53       	subi	r28, 0x30	; 48
    2044:	df 4f       	sbci	r29, 0xFF	; 255
    2046:	38 81       	ld	r19, Y
    2048:	c0 5d       	subi	r28, 0xD0	; 208
    204a:	d0 40       	sbci	r29, 0x00	; 0
    204c:	31 50       	subi	r19, 0x01	; 1
    204e:	c0 53       	subi	r28, 0x30	; 48
    2050:	df 4f       	sbci	r29, 0xFF	; 255
    2052:	38 83       	st	Y, r19
    2054:	c0 5d       	subi	r28, 0xD0	; 208
    2056:	d0 40       	sbci	r29, 0x00	; 0
    2058:	c0 53       	subi	r28, 0x30	; 48
    205a:	df 4f       	sbci	r29, 0xFF	; 255
    205c:	88 81       	ld	r24, Y
    205e:	c0 5d       	subi	r28, 0xD0	; 208
    2060:	d0 40       	sbci	r29, 0x00	; 0
    2062:	88 23       	and	r24, r24
    2064:	21 f6       	brne	.-120    	; 0x1fee <main+0xa2>

/**************** INITIALIZE ****************/
	SPI_vidSPIInitMaster(); //initialize this MC as a master node
    2066:	0e 94 a3 05 	call	0xb46	; 0xb46 <SPI_vidSPIInitMaster>
	LCD_vidInit();	//initialize the LCD connected to master MC
    206a:	0e 94 95 09 	call	0x132a	; 0x132a <LCD_vidInit>
	GPT_vidConfigure(GPT_u8_TIMER0);
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	0e 94 0a 06 	call	0xc14	; 0xc14 <GPT_vidConfigure>


/**************** START SCREEN ****************/
	DIO_enuSetPinValue(DIO_u8_PORTD, DIO_u8_PIN6, DIO_u8_HIGH);
    2074:	83 e0       	ldi	r24, 0x03	; 3
    2076:	66 e0       	ldi	r22, 0x06	; 6
    2078:	41 e0       	ldi	r20, 0x01	; 1
    207a:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <DIO_enuSetPinValue>
	LCD_enuSendInstruction(LCD_u8_DISPLAY_ON_CURRSOR_OFF);
    207e:	8c e0       	ldi	r24, 0x0C	; 12
    2080:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
	LCD_enuGoTo(LCD_u8_ROW0, LCD_u8_COLUMN3);	//move the Cursor to the middle of first row in the LCD screen
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	63 e0       	ldi	r22, 0x03	; 3
    2088:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
	LCD_enuSendString("SMART HMOME");	//print in the LCD screen
    208c:	8a e8       	ldi	r24, 0x8A	; 138
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
	LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN5);	//move the Cursor to the middle of second row in the LCD screen
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	65 e0       	ldi	r22, 0x05	; 5
    2098:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
	LCD_enuSendString("SYSTEM");	//print in the LCD screen
    209c:	86 e9       	ldi	r24, 0x96	; 150
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
    20a4:	fe 01       	movw	r30, r28
    20a6:	ed 54       	subi	r30, 0x4D	; 77
    20a8:	ff 4f       	sbci	r31, 0xFF	; 255
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	a8 ec       	ldi	r26, 0xC8	; 200
    20b0:	b2 e4       	ldi	r27, 0x42	; 66
    20b2:	80 83       	st	Z, r24
    20b4:	91 83       	std	Z+1, r25	; 0x01
    20b6:	a2 83       	std	Z+2, r26	; 0x02
    20b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ba:	8e 01       	movw	r16, r28
    20bc:	01 55       	subi	r16, 0x51	; 81
    20be:	1f 4f       	sbci	r17, 0xFF	; 255
    20c0:	fe 01       	movw	r30, r28
    20c2:	ed 54       	subi	r30, 0x4D	; 77
    20c4:	ff 4f       	sbci	r31, 0xFF	; 255
    20c6:	60 81       	ld	r22, Z
    20c8:	71 81       	ldd	r23, Z+1	; 0x01
    20ca:	82 81       	ldd	r24, Z+2	; 0x02
    20cc:	93 81       	ldd	r25, Z+3	; 0x03
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	4a e7       	ldi	r20, 0x7A	; 122
    20d4:	55 e4       	ldi	r21, 0x45	; 69
    20d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	f8 01       	movw	r30, r16
    20e0:	80 83       	st	Z, r24
    20e2:	91 83       	std	Z+1, r25	; 0x01
    20e4:	a2 83       	std	Z+2, r26	; 0x02
    20e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20e8:	fe 01       	movw	r30, r28
    20ea:	e1 55       	subi	r30, 0x51	; 81
    20ec:	ff 4f       	sbci	r31, 0xFF	; 255
    20ee:	60 81       	ld	r22, Z
    20f0:	71 81       	ldd	r23, Z+1	; 0x01
    20f2:	82 81       	ldd	r24, Z+2	; 0x02
    20f4:	93 81       	ldd	r25, Z+3	; 0x03
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e8       	ldi	r20, 0x80	; 128
    20fc:	5f e3       	ldi	r21, 0x3F	; 63
    20fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2102:	88 23       	and	r24, r24
    2104:	44 f4       	brge	.+16     	; 0x2116 <main+0x1ca>
		__ticks = 1;
    2106:	fe 01       	movw	r30, r28
    2108:	e3 55       	subi	r30, 0x53	; 83
    210a:	ff 4f       	sbci	r31, 0xFF	; 255
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	91 83       	std	Z+1, r25	; 0x01
    2112:	80 83       	st	Z, r24
    2114:	64 c0       	rjmp	.+200    	; 0x21de <main+0x292>
	else if (__tmp > 65535)
    2116:	fe 01       	movw	r30, r28
    2118:	e1 55       	subi	r30, 0x51	; 81
    211a:	ff 4f       	sbci	r31, 0xFF	; 255
    211c:	60 81       	ld	r22, Z
    211e:	71 81       	ldd	r23, Z+1	; 0x01
    2120:	82 81       	ldd	r24, Z+2	; 0x02
    2122:	93 81       	ldd	r25, Z+3	; 0x03
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	3f ef       	ldi	r19, 0xFF	; 255
    2128:	4f e7       	ldi	r20, 0x7F	; 127
    212a:	57 e4       	ldi	r21, 0x47	; 71
    212c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2130:	18 16       	cp	r1, r24
    2132:	0c f0       	brlt	.+2      	; 0x2136 <main+0x1ea>
    2134:	43 c0       	rjmp	.+134    	; 0x21bc <main+0x270>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2136:	fe 01       	movw	r30, r28
    2138:	ed 54       	subi	r30, 0x4D	; 77
    213a:	ff 4f       	sbci	r31, 0xFF	; 255
    213c:	60 81       	ld	r22, Z
    213e:	71 81       	ldd	r23, Z+1	; 0x01
    2140:	82 81       	ldd	r24, Z+2	; 0x02
    2142:	93 81       	ldd	r25, Z+3	; 0x03
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	40 e2       	ldi	r20, 0x20	; 32
    214a:	51 e4       	ldi	r21, 0x41	; 65
    214c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	8e 01       	movw	r16, r28
    2156:	03 55       	subi	r16, 0x53	; 83
    2158:	1f 4f       	sbci	r17, 0xFF	; 255
    215a:	bc 01       	movw	r22, r24
    215c:	cd 01       	movw	r24, r26
    215e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	f8 01       	movw	r30, r16
    2168:	91 83       	std	Z+1, r25	; 0x01
    216a:	80 83       	st	Z, r24
    216c:	1f c0       	rjmp	.+62     	; 0x21ac <main+0x260>
    216e:	fe 01       	movw	r30, r28
    2170:	e5 55       	subi	r30, 0x55	; 85
    2172:	ff 4f       	sbci	r31, 0xFF	; 255
    2174:	80 e9       	ldi	r24, 0x90	; 144
    2176:	91 e0       	ldi	r25, 0x01	; 1
    2178:	91 83       	std	Z+1, r25	; 0x01
    217a:	80 83       	st	Z, r24
    217c:	fe 01       	movw	r30, r28
    217e:	e5 55       	subi	r30, 0x55	; 85
    2180:	ff 4f       	sbci	r31, 0xFF	; 255
    2182:	80 81       	ld	r24, Z
    2184:	91 81       	ldd	r25, Z+1	; 0x01
    2186:	01 97       	sbiw	r24, 0x01	; 1
    2188:	f1 f7       	brne	.-4      	; 0x2186 <main+0x23a>
    218a:	fe 01       	movw	r30, r28
    218c:	e5 55       	subi	r30, 0x55	; 85
    218e:	ff 4f       	sbci	r31, 0xFF	; 255
    2190:	91 83       	std	Z+1, r25	; 0x01
    2192:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2194:	de 01       	movw	r26, r28
    2196:	a3 55       	subi	r26, 0x53	; 83
    2198:	bf 4f       	sbci	r27, 0xFF	; 255
    219a:	fe 01       	movw	r30, r28
    219c:	e3 55       	subi	r30, 0x53	; 83
    219e:	ff 4f       	sbci	r31, 0xFF	; 255
    21a0:	80 81       	ld	r24, Z
    21a2:	91 81       	ldd	r25, Z+1	; 0x01
    21a4:	01 97       	sbiw	r24, 0x01	; 1
    21a6:	11 96       	adiw	r26, 0x01	; 1
    21a8:	9c 93       	st	X, r25
    21aa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ac:	fe 01       	movw	r30, r28
    21ae:	e3 55       	subi	r30, 0x53	; 83
    21b0:	ff 4f       	sbci	r31, 0xFF	; 255
    21b2:	80 81       	ld	r24, Z
    21b4:	91 81       	ldd	r25, Z+1	; 0x01
    21b6:	00 97       	sbiw	r24, 0x00	; 0
    21b8:	d1 f6       	brne	.-76     	; 0x216e <main+0x222>
    21ba:	27 c0       	rjmp	.+78     	; 0x220a <main+0x2be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21bc:	8e 01       	movw	r16, r28
    21be:	03 55       	subi	r16, 0x53	; 83
    21c0:	1f 4f       	sbci	r17, 0xFF	; 255
    21c2:	fe 01       	movw	r30, r28
    21c4:	e1 55       	subi	r30, 0x51	; 81
    21c6:	ff 4f       	sbci	r31, 0xFF	; 255
    21c8:	60 81       	ld	r22, Z
    21ca:	71 81       	ldd	r23, Z+1	; 0x01
    21cc:	82 81       	ldd	r24, Z+2	; 0x02
    21ce:	93 81       	ldd	r25, Z+3	; 0x03
    21d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	f8 01       	movw	r30, r16
    21da:	91 83       	std	Z+1, r25	; 0x01
    21dc:	80 83       	st	Z, r24
    21de:	de 01       	movw	r26, r28
    21e0:	a7 55       	subi	r26, 0x57	; 87
    21e2:	bf 4f       	sbci	r27, 0xFF	; 255
    21e4:	fe 01       	movw	r30, r28
    21e6:	e3 55       	subi	r30, 0x53	; 83
    21e8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ea:	80 81       	ld	r24, Z
    21ec:	91 81       	ldd	r25, Z+1	; 0x01
    21ee:	8d 93       	st	X+, r24
    21f0:	9c 93       	st	X, r25
    21f2:	fe 01       	movw	r30, r28
    21f4:	e7 55       	subi	r30, 0x57	; 87
    21f6:	ff 4f       	sbci	r31, 0xFF	; 255
    21f8:	80 81       	ld	r24, Z
    21fa:	91 81       	ldd	r25, Z+1	; 0x01
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	f1 f7       	brne	.-4      	; 0x21fc <main+0x2b0>
    2200:	fe 01       	movw	r30, r28
    2202:	e7 55       	subi	r30, 0x57	; 87
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	91 83       	std	Z+1, r25	; 0x01
    2208:	80 83       	st	Z, r24
	_delay_ms(100);	//stand the system up to display start message for 100 ms
	LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);	//clear the screen
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
	LCD_enuGoTo(LCD_u8_ROW0, LCD_u8_COLUMN0);	//move the Cursor to the first location in the LCD screen
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	60 e0       	ldi	r22, 0x00	; 0
    2214:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
    2218:	fe 01       	movw	r30, r28
    221a:	eb 55       	subi	r30, 0x5B	; 91
    221c:	ff 4f       	sbci	r31, 0xFF	; 255
    221e:	80 e0       	ldi	r24, 0x00	; 0
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	a8 ec       	ldi	r26, 0xC8	; 200
    2224:	b2 e4       	ldi	r27, 0x42	; 66
    2226:	80 83       	st	Z, r24
    2228:	91 83       	std	Z+1, r25	; 0x01
    222a:	a2 83       	std	Z+2, r26	; 0x02
    222c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    222e:	8e 01       	movw	r16, r28
    2230:	0f 55       	subi	r16, 0x5F	; 95
    2232:	1f 4f       	sbci	r17, 0xFF	; 255
    2234:	fe 01       	movw	r30, r28
    2236:	eb 55       	subi	r30, 0x5B	; 91
    2238:	ff 4f       	sbci	r31, 0xFF	; 255
    223a:	60 81       	ld	r22, Z
    223c:	71 81       	ldd	r23, Z+1	; 0x01
    223e:	82 81       	ldd	r24, Z+2	; 0x02
    2240:	93 81       	ldd	r25, Z+3	; 0x03
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	4a e7       	ldi	r20, 0x7A	; 122
    2248:	55 e4       	ldi	r21, 0x45	; 69
    224a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	f8 01       	movw	r30, r16
    2254:	80 83       	st	Z, r24
    2256:	91 83       	std	Z+1, r25	; 0x01
    2258:	a2 83       	std	Z+2, r26	; 0x02
    225a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    225c:	fe 01       	movw	r30, r28
    225e:	ef 55       	subi	r30, 0x5F	; 95
    2260:	ff 4f       	sbci	r31, 0xFF	; 255
    2262:	60 81       	ld	r22, Z
    2264:	71 81       	ldd	r23, Z+1	; 0x01
    2266:	82 81       	ldd	r24, Z+2	; 0x02
    2268:	93 81       	ldd	r25, Z+3	; 0x03
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	40 e8       	ldi	r20, 0x80	; 128
    2270:	5f e3       	ldi	r21, 0x3F	; 63
    2272:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2276:	88 23       	and	r24, r24
    2278:	44 f4       	brge	.+16     	; 0x228a <main+0x33e>
		__ticks = 1;
    227a:	fe 01       	movw	r30, r28
    227c:	e1 56       	subi	r30, 0x61	; 97
    227e:	ff 4f       	sbci	r31, 0xFF	; 255
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	91 83       	std	Z+1, r25	; 0x01
    2286:	80 83       	st	Z, r24
    2288:	64 c0       	rjmp	.+200    	; 0x2352 <main+0x406>
	else if (__tmp > 65535)
    228a:	fe 01       	movw	r30, r28
    228c:	ef 55       	subi	r30, 0x5F	; 95
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	60 81       	ld	r22, Z
    2292:	71 81       	ldd	r23, Z+1	; 0x01
    2294:	82 81       	ldd	r24, Z+2	; 0x02
    2296:	93 81       	ldd	r25, Z+3	; 0x03
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	3f ef       	ldi	r19, 0xFF	; 255
    229c:	4f e7       	ldi	r20, 0x7F	; 127
    229e:	57 e4       	ldi	r21, 0x47	; 71
    22a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22a4:	18 16       	cp	r1, r24
    22a6:	0c f0       	brlt	.+2      	; 0x22aa <main+0x35e>
    22a8:	43 c0       	rjmp	.+134    	; 0x2330 <main+0x3e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22aa:	fe 01       	movw	r30, r28
    22ac:	eb 55       	subi	r30, 0x5B	; 91
    22ae:	ff 4f       	sbci	r31, 0xFF	; 255
    22b0:	60 81       	ld	r22, Z
    22b2:	71 81       	ldd	r23, Z+1	; 0x01
    22b4:	82 81       	ldd	r24, Z+2	; 0x02
    22b6:	93 81       	ldd	r25, Z+3	; 0x03
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	40 e2       	ldi	r20, 0x20	; 32
    22be:	51 e4       	ldi	r21, 0x41	; 65
    22c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c4:	dc 01       	movw	r26, r24
    22c6:	cb 01       	movw	r24, r22
    22c8:	8e 01       	movw	r16, r28
    22ca:	01 56       	subi	r16, 0x61	; 97
    22cc:	1f 4f       	sbci	r17, 0xFF	; 255
    22ce:	bc 01       	movw	r22, r24
    22d0:	cd 01       	movw	r24, r26
    22d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	f8 01       	movw	r30, r16
    22dc:	91 83       	std	Z+1, r25	; 0x01
    22de:	80 83       	st	Z, r24
    22e0:	1f c0       	rjmp	.+62     	; 0x2320 <main+0x3d4>
    22e2:	fe 01       	movw	r30, r28
    22e4:	e3 56       	subi	r30, 0x63	; 99
    22e6:	ff 4f       	sbci	r31, 0xFF	; 255
    22e8:	80 e9       	ldi	r24, 0x90	; 144
    22ea:	91 e0       	ldi	r25, 0x01	; 1
    22ec:	91 83       	std	Z+1, r25	; 0x01
    22ee:	80 83       	st	Z, r24
    22f0:	fe 01       	movw	r30, r28
    22f2:	e3 56       	subi	r30, 0x63	; 99
    22f4:	ff 4f       	sbci	r31, 0xFF	; 255
    22f6:	80 81       	ld	r24, Z
    22f8:	91 81       	ldd	r25, Z+1	; 0x01
    22fa:	01 97       	sbiw	r24, 0x01	; 1
    22fc:	f1 f7       	brne	.-4      	; 0x22fa <main+0x3ae>
    22fe:	fe 01       	movw	r30, r28
    2300:	e3 56       	subi	r30, 0x63	; 99
    2302:	ff 4f       	sbci	r31, 0xFF	; 255
    2304:	91 83       	std	Z+1, r25	; 0x01
    2306:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2308:	de 01       	movw	r26, r28
    230a:	a1 56       	subi	r26, 0x61	; 97
    230c:	bf 4f       	sbci	r27, 0xFF	; 255
    230e:	fe 01       	movw	r30, r28
    2310:	e1 56       	subi	r30, 0x61	; 97
    2312:	ff 4f       	sbci	r31, 0xFF	; 255
    2314:	80 81       	ld	r24, Z
    2316:	91 81       	ldd	r25, Z+1	; 0x01
    2318:	01 97       	sbiw	r24, 0x01	; 1
    231a:	11 96       	adiw	r26, 0x01	; 1
    231c:	9c 93       	st	X, r25
    231e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2320:	fe 01       	movw	r30, r28
    2322:	e1 56       	subi	r30, 0x61	; 97
    2324:	ff 4f       	sbci	r31, 0xFF	; 255
    2326:	80 81       	ld	r24, Z
    2328:	91 81       	ldd	r25, Z+1	; 0x01
    232a:	00 97       	sbiw	r24, 0x00	; 0
    232c:	d1 f6       	brne	.-76     	; 0x22e2 <main+0x396>
    232e:	27 c0       	rjmp	.+78     	; 0x237e <main+0x432>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2330:	8e 01       	movw	r16, r28
    2332:	01 56       	subi	r16, 0x61	; 97
    2334:	1f 4f       	sbci	r17, 0xFF	; 255
    2336:	fe 01       	movw	r30, r28
    2338:	ef 55       	subi	r30, 0x5F	; 95
    233a:	ff 4f       	sbci	r31, 0xFF	; 255
    233c:	60 81       	ld	r22, Z
    233e:	71 81       	ldd	r23, Z+1	; 0x01
    2340:	82 81       	ldd	r24, Z+2	; 0x02
    2342:	93 81       	ldd	r25, Z+3	; 0x03
    2344:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	f8 01       	movw	r30, r16
    234e:	91 83       	std	Z+1, r25	; 0x01
    2350:	80 83       	st	Z, r24
    2352:	de 01       	movw	r26, r28
    2354:	a5 56       	subi	r26, 0x65	; 101
    2356:	bf 4f       	sbci	r27, 0xFF	; 255
    2358:	fe 01       	movw	r30, r28
    235a:	e1 56       	subi	r30, 0x61	; 97
    235c:	ff 4f       	sbci	r31, 0xFF	; 255
    235e:	80 81       	ld	r24, Z
    2360:	91 81       	ldd	r25, Z+1	; 0x01
    2362:	8d 93       	st	X+, r24
    2364:	9c 93       	st	X, r25
    2366:	fe 01       	movw	r30, r28
    2368:	e5 56       	subi	r30, 0x65	; 101
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	80 81       	ld	r24, Z
    236e:	91 81       	ldd	r25, Z+1	; 0x01
    2370:	01 97       	sbiw	r24, 0x01	; 1
    2372:	f1 f7       	brne	.-4      	; 0x2370 <main+0x424>
    2374:	fe 01       	movw	r30, r28
    2376:	e5 56       	subi	r30, 0x65	; 101
    2378:	ff 4f       	sbci	r31, 0xFF	; 255
    237a:	91 83       	std	Z+1, r25	; 0x01
    237c:	80 83       	st	Z, r24
	/*check if the program already run before and set a password for each user (OWNER/TENANT)
	 * if the application run for the first time and the user complete the registration process execute this code
	 * if user complete the registration process the value stored in EEPROM address that refer to the password status must be 0xFF
	 * if the two user set its password, pass this block of code
	 * */
	if((EEPROM_u8readByte(EEPROM_u16_OWNER_PASSWORD_STATUS) != PASSWORD_SET) || (EEPROM_u8readByte(EEPROM_u16_TENANT_PASSWORD_STATUS) != PASSWORD_SET)){ //start registration
    237e:	e0 ee       	ldi	r30, 0xE0	; 224
    2380:	f2 e0       	ldi	r31, 0x02	; 2
    2382:	80 81       	ld	r24, Z
    2384:	91 81       	ldd	r25, Z+1	; 0x01
    2386:	0e 94 a2 06 	call	0xd44	; 0xd44 <EEPROM_u8readByte>
    238a:	88 23       	and	r24, r24
    238c:	51 f4       	brne	.+20     	; 0x23a2 <main+0x456>
    238e:	e0 ef       	ldi	r30, 0xF0	; 240
    2390:	f2 e0       	ldi	r31, 0x02	; 2
    2392:	80 81       	ld	r24, Z
    2394:	91 81       	ldd	r25, Z+1	; 0x01
    2396:	0e 94 a2 06 	call	0xd44	; 0xd44 <EEPROM_u8readByte>
    239a:	88 23       	and	r24, r24
    239c:	11 f4       	brne	.+4      	; 0x23a2 <main+0x456>
    239e:	0c 94 12 1a 	jmp	0x3424	; 0x3424 <main+0x14d8>
		LCD_enuSendString("Registration ...");	//print screen title
    23a2:	8d e9       	ldi	r24, 0x9D	; 157
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
		LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN0);	//move the cursor to the second line
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	60 e0       	ldi	r22, 0x00	; 0
    23ae:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
    23b2:	fe 01       	movw	r30, r28
    23b4:	e9 56       	subi	r30, 0x69	; 105
    23b6:	ff 4f       	sbci	r31, 0xFF	; 255
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	a8 e4       	ldi	r26, 0x48	; 72
    23be:	b2 e4       	ldi	r27, 0x42	; 66
    23c0:	80 83       	st	Z, r24
    23c2:	91 83       	std	Z+1, r25	; 0x01
    23c4:	a2 83       	std	Z+2, r26	; 0x02
    23c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c8:	8e 01       	movw	r16, r28
    23ca:	0d 56       	subi	r16, 0x6D	; 109
    23cc:	1f 4f       	sbci	r17, 0xFF	; 255
    23ce:	fe 01       	movw	r30, r28
    23d0:	e9 56       	subi	r30, 0x69	; 105
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	60 81       	ld	r22, Z
    23d6:	71 81       	ldd	r23, Z+1	; 0x01
    23d8:	82 81       	ldd	r24, Z+2	; 0x02
    23da:	93 81       	ldd	r25, Z+3	; 0x03
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	4a e7       	ldi	r20, 0x7A	; 122
    23e2:	55 e4       	ldi	r21, 0x45	; 69
    23e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	f8 01       	movw	r30, r16
    23ee:	80 83       	st	Z, r24
    23f0:	91 83       	std	Z+1, r25	; 0x01
    23f2:	a2 83       	std	Z+2, r26	; 0x02
    23f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23f6:	fe 01       	movw	r30, r28
    23f8:	ed 56       	subi	r30, 0x6D	; 109
    23fa:	ff 4f       	sbci	r31, 0xFF	; 255
    23fc:	60 81       	ld	r22, Z
    23fe:	71 81       	ldd	r23, Z+1	; 0x01
    2400:	82 81       	ldd	r24, Z+2	; 0x02
    2402:	93 81       	ldd	r25, Z+3	; 0x03
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	40 e8       	ldi	r20, 0x80	; 128
    240a:	5f e3       	ldi	r21, 0x3F	; 63
    240c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2410:	88 23       	and	r24, r24
    2412:	44 f4       	brge	.+16     	; 0x2424 <main+0x4d8>
		__ticks = 1;
    2414:	fe 01       	movw	r30, r28
    2416:	ef 56       	subi	r30, 0x6F	; 111
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	91 83       	std	Z+1, r25	; 0x01
    2420:	80 83       	st	Z, r24
    2422:	64 c0       	rjmp	.+200    	; 0x24ec <main+0x5a0>
	else if (__tmp > 65535)
    2424:	fe 01       	movw	r30, r28
    2426:	ed 56       	subi	r30, 0x6D	; 109
    2428:	ff 4f       	sbci	r31, 0xFF	; 255
    242a:	60 81       	ld	r22, Z
    242c:	71 81       	ldd	r23, Z+1	; 0x01
    242e:	82 81       	ldd	r24, Z+2	; 0x02
    2430:	93 81       	ldd	r25, Z+3	; 0x03
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	3f ef       	ldi	r19, 0xFF	; 255
    2436:	4f e7       	ldi	r20, 0x7F	; 127
    2438:	57 e4       	ldi	r21, 0x47	; 71
    243a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    243e:	18 16       	cp	r1, r24
    2440:	0c f0       	brlt	.+2      	; 0x2444 <main+0x4f8>
    2442:	43 c0       	rjmp	.+134    	; 0x24ca <main+0x57e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2444:	fe 01       	movw	r30, r28
    2446:	e9 56       	subi	r30, 0x69	; 105
    2448:	ff 4f       	sbci	r31, 0xFF	; 255
    244a:	60 81       	ld	r22, Z
    244c:	71 81       	ldd	r23, Z+1	; 0x01
    244e:	82 81       	ldd	r24, Z+2	; 0x02
    2450:	93 81       	ldd	r25, Z+3	; 0x03
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	40 e2       	ldi	r20, 0x20	; 32
    2458:	51 e4       	ldi	r21, 0x41	; 65
    245a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245e:	dc 01       	movw	r26, r24
    2460:	cb 01       	movw	r24, r22
    2462:	8e 01       	movw	r16, r28
    2464:	0f 56       	subi	r16, 0x6F	; 111
    2466:	1f 4f       	sbci	r17, 0xFF	; 255
    2468:	bc 01       	movw	r22, r24
    246a:	cd 01       	movw	r24, r26
    246c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	f8 01       	movw	r30, r16
    2476:	91 83       	std	Z+1, r25	; 0x01
    2478:	80 83       	st	Z, r24
    247a:	1f c0       	rjmp	.+62     	; 0x24ba <main+0x56e>
    247c:	fe 01       	movw	r30, r28
    247e:	e1 57       	subi	r30, 0x71	; 113
    2480:	ff 4f       	sbci	r31, 0xFF	; 255
    2482:	80 e9       	ldi	r24, 0x90	; 144
    2484:	91 e0       	ldi	r25, 0x01	; 1
    2486:	91 83       	std	Z+1, r25	; 0x01
    2488:	80 83       	st	Z, r24
    248a:	fe 01       	movw	r30, r28
    248c:	e1 57       	subi	r30, 0x71	; 113
    248e:	ff 4f       	sbci	r31, 0xFF	; 255
    2490:	80 81       	ld	r24, Z
    2492:	91 81       	ldd	r25, Z+1	; 0x01
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	f1 f7       	brne	.-4      	; 0x2494 <main+0x548>
    2498:	fe 01       	movw	r30, r28
    249a:	e1 57       	subi	r30, 0x71	; 113
    249c:	ff 4f       	sbci	r31, 0xFF	; 255
    249e:	91 83       	std	Z+1, r25	; 0x01
    24a0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a2:	de 01       	movw	r26, r28
    24a4:	af 56       	subi	r26, 0x6F	; 111
    24a6:	bf 4f       	sbci	r27, 0xFF	; 255
    24a8:	fe 01       	movw	r30, r28
    24aa:	ef 56       	subi	r30, 0x6F	; 111
    24ac:	ff 4f       	sbci	r31, 0xFF	; 255
    24ae:	80 81       	ld	r24, Z
    24b0:	91 81       	ldd	r25, Z+1	; 0x01
    24b2:	01 97       	sbiw	r24, 0x01	; 1
    24b4:	11 96       	adiw	r26, 0x01	; 1
    24b6:	9c 93       	st	X, r25
    24b8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ba:	fe 01       	movw	r30, r28
    24bc:	ef 56       	subi	r30, 0x6F	; 111
    24be:	ff 4f       	sbci	r31, 0xFF	; 255
    24c0:	80 81       	ld	r24, Z
    24c2:	91 81       	ldd	r25, Z+1	; 0x01
    24c4:	00 97       	sbiw	r24, 0x00	; 0
    24c6:	d1 f6       	brne	.-76     	; 0x247c <main+0x530>
    24c8:	27 c0       	rjmp	.+78     	; 0x2518 <main+0x5cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ca:	8e 01       	movw	r16, r28
    24cc:	0f 56       	subi	r16, 0x6F	; 111
    24ce:	1f 4f       	sbci	r17, 0xFF	; 255
    24d0:	fe 01       	movw	r30, r28
    24d2:	ed 56       	subi	r30, 0x6D	; 109
    24d4:	ff 4f       	sbci	r31, 0xFF	; 255
    24d6:	60 81       	ld	r22, Z
    24d8:	71 81       	ldd	r23, Z+1	; 0x01
    24da:	82 81       	ldd	r24, Z+2	; 0x02
    24dc:	93 81       	ldd	r25, Z+3	; 0x03
    24de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	f8 01       	movw	r30, r16
    24e8:	91 83       	std	Z+1, r25	; 0x01
    24ea:	80 83       	st	Z, r24
    24ec:	de 01       	movw	r26, r28
    24ee:	a3 57       	subi	r26, 0x73	; 115
    24f0:	bf 4f       	sbci	r27, 0xFF	; 255
    24f2:	fe 01       	movw	r30, r28
    24f4:	ef 56       	subi	r30, 0x6F	; 111
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	80 81       	ld	r24, Z
    24fa:	91 81       	ldd	r25, Z+1	; 0x01
    24fc:	8d 93       	st	X+, r24
    24fe:	9c 93       	st	X, r25
    2500:	fe 01       	movw	r30, r28
    2502:	e3 57       	subi	r30, 0x73	; 115
    2504:	ff 4f       	sbci	r31, 0xFF	; 255
    2506:	80 81       	ld	r24, Z
    2508:	91 81       	ldd	r25, Z+1	; 0x01
    250a:	01 97       	sbiw	r24, 0x01	; 1
    250c:	f1 f7       	brne	.-4      	; 0x250a <main+0x5be>
    250e:	fe 01       	movw	r30, r28
    2510:	e3 57       	subi	r30, 0x73	; 115
    2512:	ff 4f       	sbci	r31, 0xFF	; 255
    2514:	91 83       	std	Z+1, r25	; 0x01
    2516:	80 83       	st	Z, r24
		_delay_ms(50); //hold the system for a few millisecond

		///SETTING THE PASSWORDS///
		/*setting the owner password*/
		LCD_enuSendString("Owner Pass: ");	//ask the user to enter OWNER password
    2518:	8e ea       	ldi	r24, 0xAE	; 174
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
		LCD_enuSendInstruction(LCD_u8_DISPLAY_ON_CURRSOR_ON);
    2520:	8e e0       	ldi	r24, 0x0E	; 14
    2522:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
		for(Local_u8passCounter = ZERO; Local_u8passCounter < PASS_SIZE; Local_u8passCounter++){	//loop to get the whole password from the user
    2526:	fe 01       	movw	r30, r28
    2528:	e8 54       	subi	r30, 0x48	; 72
    252a:	ff 4f       	sbci	r31, 0xFF	; 255
    252c:	10 82       	st	Z, r1
    252e:	f3 c0       	rjmp	.+486    	; 0x2716 <main+0x7ca>
			Local_u8keyPressed = WAITING_PRESS_KEY;	//assign the initial value refer to the application waiting the user to enter a value
    2530:	fe 01       	movw	r30, r28
    2532:	ef 53       	subi	r30, 0x3F	; 63
    2534:	ff 4f       	sbci	r31, 0xFF	; 255
    2536:	8f ef       	ldi	r24, 0xFF	; 255
    2538:	80 83       	st	Z, r24
    253a:	05 c0       	rjmp	.+10     	; 0x2546 <main+0x5fa>
			while(Local_u8keyPressed == WAITING_PRESS_KEY){	//loop until user enter a new value.... the break condition is the stored value in (Local_u8keyPressed) not equal the initial value
				KEYPAD_vidGetPressedKey(&Local_u8keyPressed);	//store the value of the pressed key in (Local_u8keyPressed)
    253c:	ce 01       	movw	r24, r28
    253e:	8f 53       	subi	r24, 0x3F	; 63
    2540:	9f 4f       	sbci	r25, 0xFF	; 255
    2542:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <KEYPAD_vidGetPressedKey>
		/*setting the owner password*/
		LCD_enuSendString("Owner Pass: ");	//ask the user to enter OWNER password
		LCD_enuSendInstruction(LCD_u8_DISPLAY_ON_CURRSOR_ON);
		for(Local_u8passCounter = ZERO; Local_u8passCounter < PASS_SIZE; Local_u8passCounter++){	//loop to get the whole password from the user
			Local_u8keyPressed = WAITING_PRESS_KEY;	//assign the initial value refer to the application waiting the user to enter a value
			while(Local_u8keyPressed == WAITING_PRESS_KEY){	//loop until user enter a new value.... the break condition is the stored value in (Local_u8keyPressed) not equal the initial value
    2546:	fe 01       	movw	r30, r28
    2548:	ef 53       	subi	r30, 0x3F	; 63
    254a:	ff 4f       	sbci	r31, 0xFF	; 255
    254c:	80 81       	ld	r24, Z
    254e:	8f 3f       	cpi	r24, 0xFF	; 255
    2550:	a9 f3       	breq	.-22     	; 0x253c <main+0x5f0>
				KEYPAD_vidGetPressedKey(&Local_u8keyPressed);	//store the value of the pressed key in (Local_u8keyPressed)
			}
			LCD_enuSendCharacter(Local_u8keyPressed);	//print the value of the pressed key on the LCD screen
    2552:	fe 01       	movw	r30, r28
    2554:	ef 53       	subi	r30, 0x3F	; 63
    2556:	ff 4f       	sbci	r31, 0xFF	; 255
    2558:	80 81       	ld	r24, Z
    255a:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LCD_enuSendCharacter>
    255e:	fe 01       	movw	r30, r28
    2560:	e7 57       	subi	r30, 0x77	; 119
    2562:	ff 4f       	sbci	r31, 0xFF	; 255
    2564:	80 e0       	ldi	r24, 0x00	; 0
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	a0 ef       	ldi	r26, 0xF0	; 240
    256a:	b1 e4       	ldi	r27, 0x41	; 65
    256c:	80 83       	st	Z, r24
    256e:	91 83       	std	Z+1, r25	; 0x01
    2570:	a2 83       	std	Z+2, r26	; 0x02
    2572:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2574:	8e 01       	movw	r16, r28
    2576:	0b 57       	subi	r16, 0x7B	; 123
    2578:	1f 4f       	sbci	r17, 0xFF	; 255
    257a:	fe 01       	movw	r30, r28
    257c:	e7 57       	subi	r30, 0x77	; 119
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	60 81       	ld	r22, Z
    2582:	71 81       	ldd	r23, Z+1	; 0x01
    2584:	82 81       	ldd	r24, Z+2	; 0x02
    2586:	93 81       	ldd	r25, Z+3	; 0x03
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	4a e7       	ldi	r20, 0x7A	; 122
    258e:	55 e4       	ldi	r21, 0x45	; 69
    2590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	f8 01       	movw	r30, r16
    259a:	80 83       	st	Z, r24
    259c:	91 83       	std	Z+1, r25	; 0x01
    259e:	a2 83       	std	Z+2, r26	; 0x02
    25a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25a2:	fe 01       	movw	r30, r28
    25a4:	eb 57       	subi	r30, 0x7B	; 123
    25a6:	ff 4f       	sbci	r31, 0xFF	; 255
    25a8:	60 81       	ld	r22, Z
    25aa:	71 81       	ldd	r23, Z+1	; 0x01
    25ac:	82 81       	ldd	r24, Z+2	; 0x02
    25ae:	93 81       	ldd	r25, Z+3	; 0x03
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	40 e8       	ldi	r20, 0x80	; 128
    25b6:	5f e3       	ldi	r21, 0x3F	; 63
    25b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25bc:	88 23       	and	r24, r24
    25be:	44 f4       	brge	.+16     	; 0x25d0 <main+0x684>
		__ticks = 1;
    25c0:	fe 01       	movw	r30, r28
    25c2:	ed 57       	subi	r30, 0x7D	; 125
    25c4:	ff 4f       	sbci	r31, 0xFF	; 255
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	91 83       	std	Z+1, r25	; 0x01
    25cc:	80 83       	st	Z, r24
    25ce:	64 c0       	rjmp	.+200    	; 0x2698 <main+0x74c>
	else if (__tmp > 65535)
    25d0:	fe 01       	movw	r30, r28
    25d2:	eb 57       	subi	r30, 0x7B	; 123
    25d4:	ff 4f       	sbci	r31, 0xFF	; 255
    25d6:	60 81       	ld	r22, Z
    25d8:	71 81       	ldd	r23, Z+1	; 0x01
    25da:	82 81       	ldd	r24, Z+2	; 0x02
    25dc:	93 81       	ldd	r25, Z+3	; 0x03
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	3f ef       	ldi	r19, 0xFF	; 255
    25e2:	4f e7       	ldi	r20, 0x7F	; 127
    25e4:	57 e4       	ldi	r21, 0x47	; 71
    25e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ea:	18 16       	cp	r1, r24
    25ec:	0c f0       	brlt	.+2      	; 0x25f0 <main+0x6a4>
    25ee:	43 c0       	rjmp	.+134    	; 0x2676 <main+0x72a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f0:	fe 01       	movw	r30, r28
    25f2:	e7 57       	subi	r30, 0x77	; 119
    25f4:	ff 4f       	sbci	r31, 0xFF	; 255
    25f6:	60 81       	ld	r22, Z
    25f8:	71 81       	ldd	r23, Z+1	; 0x01
    25fa:	82 81       	ldd	r24, Z+2	; 0x02
    25fc:	93 81       	ldd	r25, Z+3	; 0x03
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	40 e2       	ldi	r20, 0x20	; 32
    2604:	51 e4       	ldi	r21, 0x41	; 65
    2606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	8e 01       	movw	r16, r28
    2610:	0d 57       	subi	r16, 0x7D	; 125
    2612:	1f 4f       	sbci	r17, 0xFF	; 255
    2614:	bc 01       	movw	r22, r24
    2616:	cd 01       	movw	r24, r26
    2618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	f8 01       	movw	r30, r16
    2622:	91 83       	std	Z+1, r25	; 0x01
    2624:	80 83       	st	Z, r24
    2626:	1f c0       	rjmp	.+62     	; 0x2666 <main+0x71a>
    2628:	fe 01       	movw	r30, r28
    262a:	ef 57       	subi	r30, 0x7F	; 127
    262c:	ff 4f       	sbci	r31, 0xFF	; 255
    262e:	80 e9       	ldi	r24, 0x90	; 144
    2630:	91 e0       	ldi	r25, 0x01	; 1
    2632:	91 83       	std	Z+1, r25	; 0x01
    2634:	80 83       	st	Z, r24
    2636:	fe 01       	movw	r30, r28
    2638:	ef 57       	subi	r30, 0x7F	; 127
    263a:	ff 4f       	sbci	r31, 0xFF	; 255
    263c:	80 81       	ld	r24, Z
    263e:	91 81       	ldd	r25, Z+1	; 0x01
    2640:	01 97       	sbiw	r24, 0x01	; 1
    2642:	f1 f7       	brne	.-4      	; 0x2640 <main+0x6f4>
    2644:	fe 01       	movw	r30, r28
    2646:	ef 57       	subi	r30, 0x7F	; 127
    2648:	ff 4f       	sbci	r31, 0xFF	; 255
    264a:	91 83       	std	Z+1, r25	; 0x01
    264c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    264e:	de 01       	movw	r26, r28
    2650:	ad 57       	subi	r26, 0x7D	; 125
    2652:	bf 4f       	sbci	r27, 0xFF	; 255
    2654:	fe 01       	movw	r30, r28
    2656:	ed 57       	subi	r30, 0x7D	; 125
    2658:	ff 4f       	sbci	r31, 0xFF	; 255
    265a:	80 81       	ld	r24, Z
    265c:	91 81       	ldd	r25, Z+1	; 0x01
    265e:	01 97       	sbiw	r24, 0x01	; 1
    2660:	11 96       	adiw	r26, 0x01	; 1
    2662:	9c 93       	st	X, r25
    2664:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2666:	fe 01       	movw	r30, r28
    2668:	ed 57       	subi	r30, 0x7D	; 125
    266a:	ff 4f       	sbci	r31, 0xFF	; 255
    266c:	80 81       	ld	r24, Z
    266e:	91 81       	ldd	r25, Z+1	; 0x01
    2670:	00 97       	sbiw	r24, 0x00	; 0
    2672:	d1 f6       	brne	.-76     	; 0x2628 <main+0x6dc>
    2674:	27 c0       	rjmp	.+78     	; 0x26c4 <main+0x778>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2676:	8e 01       	movw	r16, r28
    2678:	0d 57       	subi	r16, 0x7D	; 125
    267a:	1f 4f       	sbci	r17, 0xFF	; 255
    267c:	fe 01       	movw	r30, r28
    267e:	eb 57       	subi	r30, 0x7B	; 123
    2680:	ff 4f       	sbci	r31, 0xFF	; 255
    2682:	60 81       	ld	r22, Z
    2684:	71 81       	ldd	r23, Z+1	; 0x01
    2686:	82 81       	ldd	r24, Z+2	; 0x02
    2688:	93 81       	ldd	r25, Z+3	; 0x03
    268a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	f8 01       	movw	r30, r16
    2694:	91 83       	std	Z+1, r25	; 0x01
    2696:	80 83       	st	Z, r24
    2698:	de 01       	movw	r26, r28
    269a:	a1 58       	subi	r26, 0x81	; 129
    269c:	bf 4f       	sbci	r27, 0xFF	; 255
    269e:	fe 01       	movw	r30, r28
    26a0:	ed 57       	subi	r30, 0x7D	; 125
    26a2:	ff 4f       	sbci	r31, 0xFF	; 255
    26a4:	80 81       	ld	r24, Z
    26a6:	91 81       	ldd	r25, Z+1	; 0x01
    26a8:	8d 93       	st	X+, r24
    26aa:	9c 93       	st	X, r25
    26ac:	fe 01       	movw	r30, r28
    26ae:	e1 58       	subi	r30, 0x81	; 129
    26b0:	ff 4f       	sbci	r31, 0xFF	; 255
    26b2:	80 81       	ld	r24, Z
    26b4:	91 81       	ldd	r25, Z+1	; 0x01
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	f1 f7       	brne	.-4      	; 0x26b6 <main+0x76a>
    26ba:	fe 01       	movw	r30, r28
    26bc:	e1 58       	subi	r30, 0x81	; 129
    26be:	ff 4f       	sbci	r31, 0xFF	; 255
    26c0:	91 83       	std	Z+1, r25	; 0x01
    26c2:	80 83       	st	Z, r24
//			Local_au8ownerPassword[Local_u8passCounter] = Local_u8keyPressed;	//store the value of the pressed key in array at index according the iterator value
			_delay_ms(PASSWORD_CHAR_APPEAR_TIME);	//system stand up for the defined time period in millisecond to preview the character before replace by password symbol
			LCD_enuGoTo(LCD_u8_ROW1, (CURSOR_POSITION_SET_PASSWORD + Local_u8passCounter));	//move the cursor to the previous location to write an asterisk symbol instead of the printed character
    26c4:	fe 01       	movw	r30, r28
    26c6:	e8 54       	subi	r30, 0x48	; 72
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	80 81       	ld	r24, Z
    26cc:	98 2f       	mov	r25, r24
    26ce:	94 5f       	subi	r25, 0xF4	; 244
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	69 2f       	mov	r22, r25
    26d4:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
			LCD_enuSendCharacter(PASSWORD_ASTERISK);	//print asterisk symbol
    26d8:	8a e2       	ldi	r24, 0x2A	; 42
    26da:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LCD_enuSendCharacter>
//			EEPROM_vidwriteByte((EEPROM_u16_OWNER_PASSWORD + Local_u8passCounter), Local_u8keyPressed); //store the password char in a EEPROM address
			eeprom_write_byte((EEPROM_u16_OWNER_PASSWORD + Local_u8passCounter), Local_u8keyPressed);
    26de:	e8 e0       	ldi	r30, 0x08	; 8
    26e0:	f2 e0       	ldi	r31, 0x02	; 2
    26e2:	20 81       	ld	r18, Z
    26e4:	31 81       	ldd	r19, Z+1	; 0x01
    26e6:	fe 01       	movw	r30, r28
    26e8:	e8 54       	subi	r30, 0x48	; 72
    26ea:	ff 4f       	sbci	r31, 0xFF	; 255
    26ec:	80 81       	ld	r24, Z
    26ee:	88 2f       	mov	r24, r24
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	82 0f       	add	r24, r18
    26f4:	93 1f       	adc	r25, r19
    26f6:	fe 01       	movw	r30, r28
    26f8:	ef 53       	subi	r30, 0x3F	; 63
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	20 81       	ld	r18, Z
    26fe:	62 2f       	mov	r22, r18
    2700:	0e 94 4e 30 	call	0x609c	; 0x609c <__eewr_byte_m32>

		///SETTING THE PASSWORDS///
		/*setting the owner password*/
		LCD_enuSendString("Owner Pass: ");	//ask the user to enter OWNER password
		LCD_enuSendInstruction(LCD_u8_DISPLAY_ON_CURRSOR_ON);
		for(Local_u8passCounter = ZERO; Local_u8passCounter < PASS_SIZE; Local_u8passCounter++){	//loop to get the whole password from the user
    2704:	de 01       	movw	r26, r28
    2706:	a8 54       	subi	r26, 0x48	; 72
    2708:	bf 4f       	sbci	r27, 0xFF	; 255
    270a:	fe 01       	movw	r30, r28
    270c:	e8 54       	subi	r30, 0x48	; 72
    270e:	ff 4f       	sbci	r31, 0xFF	; 255
    2710:	80 81       	ld	r24, Z
    2712:	8f 5f       	subi	r24, 0xFF	; 255
    2714:	8c 93       	st	X, r24
    2716:	fe 01       	movw	r30, r28
    2718:	e8 54       	subi	r30, 0x48	; 72
    271a:	ff 4f       	sbci	r31, 0xFF	; 255
    271c:	80 81       	ld	r24, Z
    271e:	84 30       	cpi	r24, 0x04	; 4
    2720:	08 f4       	brcc	.+2      	; 0x2724 <main+0x7d8>
    2722:	06 cf       	rjmp	.-500    	; 0x2530 <main+0x5e4>
			LCD_enuSendCharacter(PASSWORD_ASTERISK);	//print asterisk symbol
//			EEPROM_vidwriteByte((EEPROM_u16_OWNER_PASSWORD + Local_u8passCounter), Local_u8keyPressed); //store the password char in a EEPROM address
			eeprom_write_byte((EEPROM_u16_OWNER_PASSWORD + Local_u8passCounter), Local_u8keyPressed);
		}//end of setting the owner password
//		EEPROM_vidwriteByte(EEPROM_u16_OWNER_PASSWORD_STATUS, PASSWORD_SET);	//flag to completely save the owner password in EEPROM
		eeprom_write_byte(EEPROM_u16_OWNER_PASSWORD_STATUS, PASSWORD_SET);
    2724:	e0 ee       	ldi	r30, 0xE0	; 224
    2726:	f2 e0       	ldi	r31, 0x02	; 2
    2728:	80 81       	ld	r24, Z
    272a:	91 81       	ldd	r25, Z+1	; 0x01
    272c:	60 e0       	ldi	r22, 0x00	; 0
    272e:	0e 94 4e 30 	call	0x609c	; 0x609c <__eewr_byte_m32>
    2732:	fe 01       	movw	r30, r28
    2734:	e5 58       	subi	r30, 0x85	; 133
    2736:	ff 4f       	sbci	r31, 0xFF	; 255
    2738:	80 e0       	ldi	r24, 0x00	; 0
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	a0 ea       	ldi	r26, 0xA0	; 160
    273e:	b1 e4       	ldi	r27, 0x41	; 65
    2740:	80 83       	st	Z, r24
    2742:	91 83       	std	Z+1, r25	; 0x01
    2744:	a2 83       	std	Z+2, r26	; 0x02
    2746:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2748:	8e 01       	movw	r16, r28
    274a:	09 58       	subi	r16, 0x89	; 137
    274c:	1f 4f       	sbci	r17, 0xFF	; 255
    274e:	fe 01       	movw	r30, r28
    2750:	e5 58       	subi	r30, 0x85	; 133
    2752:	ff 4f       	sbci	r31, 0xFF	; 255
    2754:	60 81       	ld	r22, Z
    2756:	71 81       	ldd	r23, Z+1	; 0x01
    2758:	82 81       	ldd	r24, Z+2	; 0x02
    275a:	93 81       	ldd	r25, Z+3	; 0x03
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	4a e7       	ldi	r20, 0x7A	; 122
    2762:	55 e4       	ldi	r21, 0x45	; 69
    2764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2768:	dc 01       	movw	r26, r24
    276a:	cb 01       	movw	r24, r22
    276c:	f8 01       	movw	r30, r16
    276e:	80 83       	st	Z, r24
    2770:	91 83       	std	Z+1, r25	; 0x01
    2772:	a2 83       	std	Z+2, r26	; 0x02
    2774:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2776:	fe 01       	movw	r30, r28
    2778:	e9 58       	subi	r30, 0x89	; 137
    277a:	ff 4f       	sbci	r31, 0xFF	; 255
    277c:	60 81       	ld	r22, Z
    277e:	71 81       	ldd	r23, Z+1	; 0x01
    2780:	82 81       	ldd	r24, Z+2	; 0x02
    2782:	93 81       	ldd	r25, Z+3	; 0x03
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	40 e8       	ldi	r20, 0x80	; 128
    278a:	5f e3       	ldi	r21, 0x3F	; 63
    278c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2790:	88 23       	and	r24, r24
    2792:	44 f4       	brge	.+16     	; 0x27a4 <main+0x858>
		__ticks = 1;
    2794:	fe 01       	movw	r30, r28
    2796:	eb 58       	subi	r30, 0x8B	; 139
    2798:	ff 4f       	sbci	r31, 0xFF	; 255
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	91 83       	std	Z+1, r25	; 0x01
    27a0:	80 83       	st	Z, r24
    27a2:	64 c0       	rjmp	.+200    	; 0x286c <main+0x920>
	else if (__tmp > 65535)
    27a4:	fe 01       	movw	r30, r28
    27a6:	e9 58       	subi	r30, 0x89	; 137
    27a8:	ff 4f       	sbci	r31, 0xFF	; 255
    27aa:	60 81       	ld	r22, Z
    27ac:	71 81       	ldd	r23, Z+1	; 0x01
    27ae:	82 81       	ldd	r24, Z+2	; 0x02
    27b0:	93 81       	ldd	r25, Z+3	; 0x03
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	3f ef       	ldi	r19, 0xFF	; 255
    27b6:	4f e7       	ldi	r20, 0x7F	; 127
    27b8:	57 e4       	ldi	r21, 0x47	; 71
    27ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27be:	18 16       	cp	r1, r24
    27c0:	0c f0       	brlt	.+2      	; 0x27c4 <main+0x878>
    27c2:	43 c0       	rjmp	.+134    	; 0x284a <main+0x8fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27c4:	fe 01       	movw	r30, r28
    27c6:	e5 58       	subi	r30, 0x85	; 133
    27c8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ca:	60 81       	ld	r22, Z
    27cc:	71 81       	ldd	r23, Z+1	; 0x01
    27ce:	82 81       	ldd	r24, Z+2	; 0x02
    27d0:	93 81       	ldd	r25, Z+3	; 0x03
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	40 e2       	ldi	r20, 0x20	; 32
    27d8:	51 e4       	ldi	r21, 0x41	; 65
    27da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	8e 01       	movw	r16, r28
    27e4:	0b 58       	subi	r16, 0x8B	; 139
    27e6:	1f 4f       	sbci	r17, 0xFF	; 255
    27e8:	bc 01       	movw	r22, r24
    27ea:	cd 01       	movw	r24, r26
    27ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f0:	dc 01       	movw	r26, r24
    27f2:	cb 01       	movw	r24, r22
    27f4:	f8 01       	movw	r30, r16
    27f6:	91 83       	std	Z+1, r25	; 0x01
    27f8:	80 83       	st	Z, r24
    27fa:	1f c0       	rjmp	.+62     	; 0x283a <main+0x8ee>
    27fc:	fe 01       	movw	r30, r28
    27fe:	ed 58       	subi	r30, 0x8D	; 141
    2800:	ff 4f       	sbci	r31, 0xFF	; 255
    2802:	80 e9       	ldi	r24, 0x90	; 144
    2804:	91 e0       	ldi	r25, 0x01	; 1
    2806:	91 83       	std	Z+1, r25	; 0x01
    2808:	80 83       	st	Z, r24
    280a:	fe 01       	movw	r30, r28
    280c:	ed 58       	subi	r30, 0x8D	; 141
    280e:	ff 4f       	sbci	r31, 0xFF	; 255
    2810:	80 81       	ld	r24, Z
    2812:	91 81       	ldd	r25, Z+1	; 0x01
    2814:	01 97       	sbiw	r24, 0x01	; 1
    2816:	f1 f7       	brne	.-4      	; 0x2814 <main+0x8c8>
    2818:	fe 01       	movw	r30, r28
    281a:	ed 58       	subi	r30, 0x8D	; 141
    281c:	ff 4f       	sbci	r31, 0xFF	; 255
    281e:	91 83       	std	Z+1, r25	; 0x01
    2820:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2822:	de 01       	movw	r26, r28
    2824:	ab 58       	subi	r26, 0x8B	; 139
    2826:	bf 4f       	sbci	r27, 0xFF	; 255
    2828:	fe 01       	movw	r30, r28
    282a:	eb 58       	subi	r30, 0x8B	; 139
    282c:	ff 4f       	sbci	r31, 0xFF	; 255
    282e:	80 81       	ld	r24, Z
    2830:	91 81       	ldd	r25, Z+1	; 0x01
    2832:	01 97       	sbiw	r24, 0x01	; 1
    2834:	11 96       	adiw	r26, 0x01	; 1
    2836:	9c 93       	st	X, r25
    2838:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    283a:	fe 01       	movw	r30, r28
    283c:	eb 58       	subi	r30, 0x8B	; 139
    283e:	ff 4f       	sbci	r31, 0xFF	; 255
    2840:	80 81       	ld	r24, Z
    2842:	91 81       	ldd	r25, Z+1	; 0x01
    2844:	00 97       	sbiw	r24, 0x00	; 0
    2846:	d1 f6       	brne	.-76     	; 0x27fc <main+0x8b0>
    2848:	27 c0       	rjmp	.+78     	; 0x2898 <main+0x94c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    284a:	8e 01       	movw	r16, r28
    284c:	0b 58       	subi	r16, 0x8B	; 139
    284e:	1f 4f       	sbci	r17, 0xFF	; 255
    2850:	fe 01       	movw	r30, r28
    2852:	e9 58       	subi	r30, 0x89	; 137
    2854:	ff 4f       	sbci	r31, 0xFF	; 255
    2856:	60 81       	ld	r22, Z
    2858:	71 81       	ldd	r23, Z+1	; 0x01
    285a:	82 81       	ldd	r24, Z+2	; 0x02
    285c:	93 81       	ldd	r25, Z+3	; 0x03
    285e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	f8 01       	movw	r30, r16
    2868:	91 83       	std	Z+1, r25	; 0x01
    286a:	80 83       	st	Z, r24
    286c:	de 01       	movw	r26, r28
    286e:	af 58       	subi	r26, 0x8F	; 143
    2870:	bf 4f       	sbci	r27, 0xFF	; 255
    2872:	fe 01       	movw	r30, r28
    2874:	eb 58       	subi	r30, 0x8B	; 139
    2876:	ff 4f       	sbci	r31, 0xFF	; 255
    2878:	80 81       	ld	r24, Z
    287a:	91 81       	ldd	r25, Z+1	; 0x01
    287c:	8d 93       	st	X+, r24
    287e:	9c 93       	st	X, r25
    2880:	fe 01       	movw	r30, r28
    2882:	ef 58       	subi	r30, 0x8F	; 143
    2884:	ff 4f       	sbci	r31, 0xFF	; 255
    2886:	80 81       	ld	r24, Z
    2888:	91 81       	ldd	r25, Z+1	; 0x01
    288a:	01 97       	sbiw	r24, 0x01	; 1
    288c:	f1 f7       	brne	.-4      	; 0x288a <main+0x93e>
    288e:	fe 01       	movw	r30, r28
    2890:	ef 58       	subi	r30, 0x8F	; 143
    2892:	ff 4f       	sbci	r31, 0xFF	; 255
    2894:	91 83       	std	Z+1, r25	; 0x01
    2896:	80 83       	st	Z, r24
		_delay_ms(20);	//waiting a few milliseconds before continue
		LCD_enuSendInstruction(LCD_u8_DISPLAY_ON_CURRSOR_OFF);
    2898:	8c e0       	ldi	r24, 0x0C	; 12
    289a:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
		LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN0);	//move the cursor to the first position in the second row
    289e:	81 e0       	ldi	r24, 0x01	; 1
    28a0:	60 e0       	ldi	r22, 0x00	; 0
    28a2:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
		LCD_enuSendString(" Password Saved ");	//inform the user that the owner password has been saved to the system
    28a6:	8b eb       	ldi	r24, 0xBB	; 187
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
    28ae:	fe 01       	movw	r30, r28
    28b0:	e3 59       	subi	r30, 0x93	; 147
    28b2:	ff 4f       	sbci	r31, 0xFF	; 255
    28b4:	80 e0       	ldi	r24, 0x00	; 0
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	a0 ef       	ldi	r26, 0xF0	; 240
    28ba:	b1 e4       	ldi	r27, 0x41	; 65
    28bc:	80 83       	st	Z, r24
    28be:	91 83       	std	Z+1, r25	; 0x01
    28c0:	a2 83       	std	Z+2, r26	; 0x02
    28c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28c4:	8e 01       	movw	r16, r28
    28c6:	07 59       	subi	r16, 0x97	; 151
    28c8:	1f 4f       	sbci	r17, 0xFF	; 255
    28ca:	fe 01       	movw	r30, r28
    28cc:	e3 59       	subi	r30, 0x93	; 147
    28ce:	ff 4f       	sbci	r31, 0xFF	; 255
    28d0:	60 81       	ld	r22, Z
    28d2:	71 81       	ldd	r23, Z+1	; 0x01
    28d4:	82 81       	ldd	r24, Z+2	; 0x02
    28d6:	93 81       	ldd	r25, Z+3	; 0x03
    28d8:	20 e0       	ldi	r18, 0x00	; 0
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	4a e7       	ldi	r20, 0x7A	; 122
    28de:	55 e4       	ldi	r21, 0x45	; 69
    28e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	f8 01       	movw	r30, r16
    28ea:	80 83       	st	Z, r24
    28ec:	91 83       	std	Z+1, r25	; 0x01
    28ee:	a2 83       	std	Z+2, r26	; 0x02
    28f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28f2:	fe 01       	movw	r30, r28
    28f4:	e7 59       	subi	r30, 0x97	; 151
    28f6:	ff 4f       	sbci	r31, 0xFF	; 255
    28f8:	60 81       	ld	r22, Z
    28fa:	71 81       	ldd	r23, Z+1	; 0x01
    28fc:	82 81       	ldd	r24, Z+2	; 0x02
    28fe:	93 81       	ldd	r25, Z+3	; 0x03
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	40 e8       	ldi	r20, 0x80	; 128
    2906:	5f e3       	ldi	r21, 0x3F	; 63
    2908:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    290c:	88 23       	and	r24, r24
    290e:	44 f4       	brge	.+16     	; 0x2920 <main+0x9d4>
		__ticks = 1;
    2910:	fe 01       	movw	r30, r28
    2912:	e9 59       	subi	r30, 0x99	; 153
    2914:	ff 4f       	sbci	r31, 0xFF	; 255
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	91 83       	std	Z+1, r25	; 0x01
    291c:	80 83       	st	Z, r24
    291e:	64 c0       	rjmp	.+200    	; 0x29e8 <main+0xa9c>
	else if (__tmp > 65535)
    2920:	fe 01       	movw	r30, r28
    2922:	e7 59       	subi	r30, 0x97	; 151
    2924:	ff 4f       	sbci	r31, 0xFF	; 255
    2926:	60 81       	ld	r22, Z
    2928:	71 81       	ldd	r23, Z+1	; 0x01
    292a:	82 81       	ldd	r24, Z+2	; 0x02
    292c:	93 81       	ldd	r25, Z+3	; 0x03
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	3f ef       	ldi	r19, 0xFF	; 255
    2932:	4f e7       	ldi	r20, 0x7F	; 127
    2934:	57 e4       	ldi	r21, 0x47	; 71
    2936:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    293a:	18 16       	cp	r1, r24
    293c:	0c f0       	brlt	.+2      	; 0x2940 <main+0x9f4>
    293e:	43 c0       	rjmp	.+134    	; 0x29c6 <main+0xa7a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2940:	fe 01       	movw	r30, r28
    2942:	e3 59       	subi	r30, 0x93	; 147
    2944:	ff 4f       	sbci	r31, 0xFF	; 255
    2946:	60 81       	ld	r22, Z
    2948:	71 81       	ldd	r23, Z+1	; 0x01
    294a:	82 81       	ldd	r24, Z+2	; 0x02
    294c:	93 81       	ldd	r25, Z+3	; 0x03
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	40 e2       	ldi	r20, 0x20	; 32
    2954:	51 e4       	ldi	r21, 0x41	; 65
    2956:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	8e 01       	movw	r16, r28
    2960:	09 59       	subi	r16, 0x99	; 153
    2962:	1f 4f       	sbci	r17, 0xFF	; 255
    2964:	bc 01       	movw	r22, r24
    2966:	cd 01       	movw	r24, r26
    2968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    296c:	dc 01       	movw	r26, r24
    296e:	cb 01       	movw	r24, r22
    2970:	f8 01       	movw	r30, r16
    2972:	91 83       	std	Z+1, r25	; 0x01
    2974:	80 83       	st	Z, r24
    2976:	1f c0       	rjmp	.+62     	; 0x29b6 <main+0xa6a>
    2978:	fe 01       	movw	r30, r28
    297a:	eb 59       	subi	r30, 0x9B	; 155
    297c:	ff 4f       	sbci	r31, 0xFF	; 255
    297e:	80 e9       	ldi	r24, 0x90	; 144
    2980:	91 e0       	ldi	r25, 0x01	; 1
    2982:	91 83       	std	Z+1, r25	; 0x01
    2984:	80 83       	st	Z, r24
    2986:	fe 01       	movw	r30, r28
    2988:	eb 59       	subi	r30, 0x9B	; 155
    298a:	ff 4f       	sbci	r31, 0xFF	; 255
    298c:	80 81       	ld	r24, Z
    298e:	91 81       	ldd	r25, Z+1	; 0x01
    2990:	01 97       	sbiw	r24, 0x01	; 1
    2992:	f1 f7       	brne	.-4      	; 0x2990 <main+0xa44>
    2994:	fe 01       	movw	r30, r28
    2996:	eb 59       	subi	r30, 0x9B	; 155
    2998:	ff 4f       	sbci	r31, 0xFF	; 255
    299a:	91 83       	std	Z+1, r25	; 0x01
    299c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    299e:	de 01       	movw	r26, r28
    29a0:	a9 59       	subi	r26, 0x99	; 153
    29a2:	bf 4f       	sbci	r27, 0xFF	; 255
    29a4:	fe 01       	movw	r30, r28
    29a6:	e9 59       	subi	r30, 0x99	; 153
    29a8:	ff 4f       	sbci	r31, 0xFF	; 255
    29aa:	80 81       	ld	r24, Z
    29ac:	91 81       	ldd	r25, Z+1	; 0x01
    29ae:	01 97       	sbiw	r24, 0x01	; 1
    29b0:	11 96       	adiw	r26, 0x01	; 1
    29b2:	9c 93       	st	X, r25
    29b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b6:	fe 01       	movw	r30, r28
    29b8:	e9 59       	subi	r30, 0x99	; 153
    29ba:	ff 4f       	sbci	r31, 0xFF	; 255
    29bc:	80 81       	ld	r24, Z
    29be:	91 81       	ldd	r25, Z+1	; 0x01
    29c0:	00 97       	sbiw	r24, 0x00	; 0
    29c2:	d1 f6       	brne	.-76     	; 0x2978 <main+0xa2c>
    29c4:	27 c0       	rjmp	.+78     	; 0x2a14 <main+0xac8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c6:	8e 01       	movw	r16, r28
    29c8:	09 59       	subi	r16, 0x99	; 153
    29ca:	1f 4f       	sbci	r17, 0xFF	; 255
    29cc:	fe 01       	movw	r30, r28
    29ce:	e7 59       	subi	r30, 0x97	; 151
    29d0:	ff 4f       	sbci	r31, 0xFF	; 255
    29d2:	60 81       	ld	r22, Z
    29d4:	71 81       	ldd	r23, Z+1	; 0x01
    29d6:	82 81       	ldd	r24, Z+2	; 0x02
    29d8:	93 81       	ldd	r25, Z+3	; 0x03
    29da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29de:	dc 01       	movw	r26, r24
    29e0:	cb 01       	movw	r24, r22
    29e2:	f8 01       	movw	r30, r16
    29e4:	91 83       	std	Z+1, r25	; 0x01
    29e6:	80 83       	st	Z, r24
    29e8:	de 01       	movw	r26, r28
    29ea:	ad 59       	subi	r26, 0x9D	; 157
    29ec:	bf 4f       	sbci	r27, 0xFF	; 255
    29ee:	fe 01       	movw	r30, r28
    29f0:	e9 59       	subi	r30, 0x99	; 153
    29f2:	ff 4f       	sbci	r31, 0xFF	; 255
    29f4:	80 81       	ld	r24, Z
    29f6:	91 81       	ldd	r25, Z+1	; 0x01
    29f8:	8d 93       	st	X+, r24
    29fa:	9c 93       	st	X, r25
    29fc:	fe 01       	movw	r30, r28
    29fe:	ed 59       	subi	r30, 0x9D	; 157
    2a00:	ff 4f       	sbci	r31, 0xFF	; 255
    2a02:	80 81       	ld	r24, Z
    2a04:	91 81       	ldd	r25, Z+1	; 0x01
    2a06:	01 97       	sbiw	r24, 0x01	; 1
    2a08:	f1 f7       	brne	.-4      	; 0x2a06 <main+0xaba>
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	ed 59       	subi	r30, 0x9D	; 157
    2a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a10:	91 83       	std	Z+1, r25	; 0x01
    2a12:	80 83       	st	Z, r24
		_delay_ms(30);	//waiting a few milliseconds before continue
		/*setting the tenant password*/
		Local_u8passCounter = ZERO;	//reset password character counter to count entered values
    2a14:	fe 01       	movw	r30, r28
    2a16:	e8 54       	subi	r30, 0x48	; 72
    2a18:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1a:	10 82       	st	Z, r1
		LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN0);	//move the cursor to the first position in the second row
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	60 e0       	ldi	r22, 0x00	; 0
    2a20:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
		LCD_enuSendString("Tenant Pass:    ");	//ask the user to enter the tenant password
    2a24:	8c ec       	ldi	r24, 0xCC	; 204
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
		LCD_enuSendInstruction(LCD_u8_DISPLAY_ON_CURRSOR_ON);
    2a2c:	8e e0       	ldi	r24, 0x0E	; 14
    2a2e:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
		for(Local_u8passCounter = ZERO; Local_u8passCounter < PASS_SIZE; Local_u8passCounter++){	//loop to get the whole password from the user
    2a32:	fe 01       	movw	r30, r28
    2a34:	e8 54       	subi	r30, 0x48	; 72
    2a36:	ff 4f       	sbci	r31, 0xFF	; 255
    2a38:	10 82       	st	Z, r1
    2a3a:	f3 c0       	rjmp	.+486    	; 0x2c22 <main+0xcd6>
			Local_u8keyPressed = WAITING_PRESS_KEY;	//assign the initial value refer to the application waiting the user to enter a value
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	ef 53       	subi	r30, 0x3F	; 63
    2a40:	ff 4f       	sbci	r31, 0xFF	; 255
    2a42:	8f ef       	ldi	r24, 0xFF	; 255
    2a44:	80 83       	st	Z, r24
    2a46:	05 c0       	rjmp	.+10     	; 0x2a52 <main+0xb06>
			while(Local_u8keyPressed == WAITING_PRESS_KEY){	//loop until user enter a new value.... the break condition is the stored value in (Local_u8keyPressed) not equal the initial value
				KEYPAD_vidGetPressedKey(&Local_u8keyPressed);	//store the value of the pressed key in (Local_u8keyPressed)
    2a48:	ce 01       	movw	r24, r28
    2a4a:	8f 53       	subi	r24, 0x3F	; 63
    2a4c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a4e:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <KEYPAD_vidGetPressedKey>
		LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN0);	//move the cursor to the first position in the second row
		LCD_enuSendString("Tenant Pass:    ");	//ask the user to enter the tenant password
		LCD_enuSendInstruction(LCD_u8_DISPLAY_ON_CURRSOR_ON);
		for(Local_u8passCounter = ZERO; Local_u8passCounter < PASS_SIZE; Local_u8passCounter++){	//loop to get the whole password from the user
			Local_u8keyPressed = WAITING_PRESS_KEY;	//assign the initial value refer to the application waiting the user to enter a value
			while(Local_u8keyPressed == WAITING_PRESS_KEY){	//loop until user enter a new value.... the break condition is the stored value in (Local_u8keyPressed) not equal the initial value
    2a52:	fe 01       	movw	r30, r28
    2a54:	ef 53       	subi	r30, 0x3F	; 63
    2a56:	ff 4f       	sbci	r31, 0xFF	; 255
    2a58:	80 81       	ld	r24, Z
    2a5a:	8f 3f       	cpi	r24, 0xFF	; 255
    2a5c:	a9 f3       	breq	.-22     	; 0x2a48 <main+0xafc>
				KEYPAD_vidGetPressedKey(&Local_u8keyPressed);	//store the value of the pressed key in (Local_u8keyPressed)
			}
			LCD_enuSendCharacter(Local_u8keyPressed);	//print the value of the pressed key on the LCD screen
    2a5e:	fe 01       	movw	r30, r28
    2a60:	ef 53       	subi	r30, 0x3F	; 63
    2a62:	ff 4f       	sbci	r31, 0xFF	; 255
    2a64:	80 81       	ld	r24, Z
    2a66:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LCD_enuSendCharacter>
    2a6a:	fe 01       	movw	r30, r28
    2a6c:	e1 5a       	subi	r30, 0xA1	; 161
    2a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a70:	80 e0       	ldi	r24, 0x00	; 0
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	a0 ef       	ldi	r26, 0xF0	; 240
    2a76:	b1 e4       	ldi	r27, 0x41	; 65
    2a78:	80 83       	st	Z, r24
    2a7a:	91 83       	std	Z+1, r25	; 0x01
    2a7c:	a2 83       	std	Z+2, r26	; 0x02
    2a7e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a80:	8e 01       	movw	r16, r28
    2a82:	05 5a       	subi	r16, 0xA5	; 165
    2a84:	1f 4f       	sbci	r17, 0xFF	; 255
    2a86:	fe 01       	movw	r30, r28
    2a88:	e1 5a       	subi	r30, 0xA1	; 161
    2a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8c:	60 81       	ld	r22, Z
    2a8e:	71 81       	ldd	r23, Z+1	; 0x01
    2a90:	82 81       	ldd	r24, Z+2	; 0x02
    2a92:	93 81       	ldd	r25, Z+3	; 0x03
    2a94:	20 e0       	ldi	r18, 0x00	; 0
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	4a e7       	ldi	r20, 0x7A	; 122
    2a9a:	55 e4       	ldi	r21, 0x45	; 69
    2a9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	cb 01       	movw	r24, r22
    2aa4:	f8 01       	movw	r30, r16
    2aa6:	80 83       	st	Z, r24
    2aa8:	91 83       	std	Z+1, r25	; 0x01
    2aaa:	a2 83       	std	Z+2, r26	; 0x02
    2aac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2aae:	fe 01       	movw	r30, r28
    2ab0:	e5 5a       	subi	r30, 0xA5	; 165
    2ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab4:	60 81       	ld	r22, Z
    2ab6:	71 81       	ldd	r23, Z+1	; 0x01
    2ab8:	82 81       	ldd	r24, Z+2	; 0x02
    2aba:	93 81       	ldd	r25, Z+3	; 0x03
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	40 e8       	ldi	r20, 0x80	; 128
    2ac2:	5f e3       	ldi	r21, 0x3F	; 63
    2ac4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ac8:	88 23       	and	r24, r24
    2aca:	44 f4       	brge	.+16     	; 0x2adc <main+0xb90>
		__ticks = 1;
    2acc:	fe 01       	movw	r30, r28
    2ace:	e7 5a       	subi	r30, 0xA7	; 167
    2ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad2:	81 e0       	ldi	r24, 0x01	; 1
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	91 83       	std	Z+1, r25	; 0x01
    2ad8:	80 83       	st	Z, r24
    2ada:	64 c0       	rjmp	.+200    	; 0x2ba4 <main+0xc58>
	else if (__tmp > 65535)
    2adc:	fe 01       	movw	r30, r28
    2ade:	e5 5a       	subi	r30, 0xA5	; 165
    2ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae2:	60 81       	ld	r22, Z
    2ae4:	71 81       	ldd	r23, Z+1	; 0x01
    2ae6:	82 81       	ldd	r24, Z+2	; 0x02
    2ae8:	93 81       	ldd	r25, Z+3	; 0x03
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	3f ef       	ldi	r19, 0xFF	; 255
    2aee:	4f e7       	ldi	r20, 0x7F	; 127
    2af0:	57 e4       	ldi	r21, 0x47	; 71
    2af2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2af6:	18 16       	cp	r1, r24
    2af8:	0c f0       	brlt	.+2      	; 0x2afc <main+0xbb0>
    2afa:	43 c0       	rjmp	.+134    	; 0x2b82 <main+0xc36>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2afc:	fe 01       	movw	r30, r28
    2afe:	e1 5a       	subi	r30, 0xA1	; 161
    2b00:	ff 4f       	sbci	r31, 0xFF	; 255
    2b02:	60 81       	ld	r22, Z
    2b04:	71 81       	ldd	r23, Z+1	; 0x01
    2b06:	82 81       	ldd	r24, Z+2	; 0x02
    2b08:	93 81       	ldd	r25, Z+3	; 0x03
    2b0a:	20 e0       	ldi	r18, 0x00	; 0
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	40 e2       	ldi	r20, 0x20	; 32
    2b10:	51 e4       	ldi	r21, 0x41	; 65
    2b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	8e 01       	movw	r16, r28
    2b1c:	07 5a       	subi	r16, 0xA7	; 167
    2b1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b20:	bc 01       	movw	r22, r24
    2b22:	cd 01       	movw	r24, r26
    2b24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b28:	dc 01       	movw	r26, r24
    2b2a:	cb 01       	movw	r24, r22
    2b2c:	f8 01       	movw	r30, r16
    2b2e:	91 83       	std	Z+1, r25	; 0x01
    2b30:	80 83       	st	Z, r24
    2b32:	1f c0       	rjmp	.+62     	; 0x2b72 <main+0xc26>
    2b34:	fe 01       	movw	r30, r28
    2b36:	e9 5a       	subi	r30, 0xA9	; 169
    2b38:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3a:	80 e9       	ldi	r24, 0x90	; 144
    2b3c:	91 e0       	ldi	r25, 0x01	; 1
    2b3e:	91 83       	std	Z+1, r25	; 0x01
    2b40:	80 83       	st	Z, r24
    2b42:	fe 01       	movw	r30, r28
    2b44:	e9 5a       	subi	r30, 0xA9	; 169
    2b46:	ff 4f       	sbci	r31, 0xFF	; 255
    2b48:	80 81       	ld	r24, Z
    2b4a:	91 81       	ldd	r25, Z+1	; 0x01
    2b4c:	01 97       	sbiw	r24, 0x01	; 1
    2b4e:	f1 f7       	brne	.-4      	; 0x2b4c <main+0xc00>
    2b50:	fe 01       	movw	r30, r28
    2b52:	e9 5a       	subi	r30, 0xA9	; 169
    2b54:	ff 4f       	sbci	r31, 0xFF	; 255
    2b56:	91 83       	std	Z+1, r25	; 0x01
    2b58:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b5a:	de 01       	movw	r26, r28
    2b5c:	a7 5a       	subi	r26, 0xA7	; 167
    2b5e:	bf 4f       	sbci	r27, 0xFF	; 255
    2b60:	fe 01       	movw	r30, r28
    2b62:	e7 5a       	subi	r30, 0xA7	; 167
    2b64:	ff 4f       	sbci	r31, 0xFF	; 255
    2b66:	80 81       	ld	r24, Z
    2b68:	91 81       	ldd	r25, Z+1	; 0x01
    2b6a:	01 97       	sbiw	r24, 0x01	; 1
    2b6c:	11 96       	adiw	r26, 0x01	; 1
    2b6e:	9c 93       	st	X, r25
    2b70:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b72:	fe 01       	movw	r30, r28
    2b74:	e7 5a       	subi	r30, 0xA7	; 167
    2b76:	ff 4f       	sbci	r31, 0xFF	; 255
    2b78:	80 81       	ld	r24, Z
    2b7a:	91 81       	ldd	r25, Z+1	; 0x01
    2b7c:	00 97       	sbiw	r24, 0x00	; 0
    2b7e:	d1 f6       	brne	.-76     	; 0x2b34 <main+0xbe8>
    2b80:	27 c0       	rjmp	.+78     	; 0x2bd0 <main+0xc84>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b82:	8e 01       	movw	r16, r28
    2b84:	07 5a       	subi	r16, 0xA7	; 167
    2b86:	1f 4f       	sbci	r17, 0xFF	; 255
    2b88:	fe 01       	movw	r30, r28
    2b8a:	e5 5a       	subi	r30, 0xA5	; 165
    2b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8e:	60 81       	ld	r22, Z
    2b90:	71 81       	ldd	r23, Z+1	; 0x01
    2b92:	82 81       	ldd	r24, Z+2	; 0x02
    2b94:	93 81       	ldd	r25, Z+3	; 0x03
    2b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	f8 01       	movw	r30, r16
    2ba0:	91 83       	std	Z+1, r25	; 0x01
    2ba2:	80 83       	st	Z, r24
    2ba4:	de 01       	movw	r26, r28
    2ba6:	ab 5a       	subi	r26, 0xAB	; 171
    2ba8:	bf 4f       	sbci	r27, 0xFF	; 255
    2baa:	fe 01       	movw	r30, r28
    2bac:	e7 5a       	subi	r30, 0xA7	; 167
    2bae:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb0:	80 81       	ld	r24, Z
    2bb2:	91 81       	ldd	r25, Z+1	; 0x01
    2bb4:	8d 93       	st	X+, r24
    2bb6:	9c 93       	st	X, r25
    2bb8:	fe 01       	movw	r30, r28
    2bba:	eb 5a       	subi	r30, 0xAB	; 171
    2bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbe:	80 81       	ld	r24, Z
    2bc0:	91 81       	ldd	r25, Z+1	; 0x01
    2bc2:	01 97       	sbiw	r24, 0x01	; 1
    2bc4:	f1 f7       	brne	.-4      	; 0x2bc2 <main+0xc76>
    2bc6:	fe 01       	movw	r30, r28
    2bc8:	eb 5a       	subi	r30, 0xAB	; 171
    2bca:	ff 4f       	sbci	r31, 0xFF	; 255
    2bcc:	91 83       	std	Z+1, r25	; 0x01
    2bce:	80 83       	st	Z, r24
//			Local_au8tenantPassword[Local_u8passCounter] = Local_u8keyPressed;	//store the value of the pressed key in array at index according the iterator value
			_delay_ms(PASSWORD_CHAR_APPEAR_TIME);	//system stand up for the defined time period in millisecond to preview the character before replace by password symbol
			LCD_enuGoTo(LCD_u8_ROW1, (CURSOR_POSITION_SET_PASSWORD + Local_u8passCounter));	//Move the cursor to the previous location to write an asterisk symbol instead of the printed character
    2bd0:	fe 01       	movw	r30, r28
    2bd2:	e8 54       	subi	r30, 0x48	; 72
    2bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd6:	80 81       	ld	r24, Z
    2bd8:	98 2f       	mov	r25, r24
    2bda:	94 5f       	subi	r25, 0xF4	; 244
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	69 2f       	mov	r22, r25
    2be0:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
			LCD_enuSendCharacter(PASSWORD_ASTERISK);	//print asterisk symbol
    2be4:	8a e2       	ldi	r24, 0x2A	; 42
    2be6:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LCD_enuSendCharacter>
//			EEPROM_vidwriteByte((EEPROM_u16_TENANT_PASSWORD + Local_u8passCounter), Local_u8keyPressed); //store the password char in a EEPROM address
			eeprom_write_byte((EEPROM_u16_TENANT_PASSWORD + Local_u8passCounter), Local_u8keyPressed);
    2bea:	e0 ed       	ldi	r30, 0xD0	; 208
    2bec:	f2 e0       	ldi	r31, 0x02	; 2
    2bee:	20 81       	ld	r18, Z
    2bf0:	31 81       	ldd	r19, Z+1	; 0x01
    2bf2:	fe 01       	movw	r30, r28
    2bf4:	e8 54       	subi	r30, 0x48	; 72
    2bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf8:	80 81       	ld	r24, Z
    2bfa:	88 2f       	mov	r24, r24
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	82 0f       	add	r24, r18
    2c00:	93 1f       	adc	r25, r19
    2c02:	fe 01       	movw	r30, r28
    2c04:	ef 53       	subi	r30, 0x3F	; 63
    2c06:	ff 4f       	sbci	r31, 0xFF	; 255
    2c08:	20 81       	ld	r18, Z
    2c0a:	62 2f       	mov	r22, r18
    2c0c:	0e 94 4e 30 	call	0x609c	; 0x609c <__eewr_byte_m32>
		/*setting the tenant password*/
		Local_u8passCounter = ZERO;	//reset password character counter to count entered values
		LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN0);	//move the cursor to the first position in the second row
		LCD_enuSendString("Tenant Pass:    ");	//ask the user to enter the tenant password
		LCD_enuSendInstruction(LCD_u8_DISPLAY_ON_CURRSOR_ON);
		for(Local_u8passCounter = ZERO; Local_u8passCounter < PASS_SIZE; Local_u8passCounter++){	//loop to get the whole password from the user
    2c10:	de 01       	movw	r26, r28
    2c12:	a8 54       	subi	r26, 0x48	; 72
    2c14:	bf 4f       	sbci	r27, 0xFF	; 255
    2c16:	fe 01       	movw	r30, r28
    2c18:	e8 54       	subi	r30, 0x48	; 72
    2c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1c:	80 81       	ld	r24, Z
    2c1e:	8f 5f       	subi	r24, 0xFF	; 255
    2c20:	8c 93       	st	X, r24
    2c22:	fe 01       	movw	r30, r28
    2c24:	e8 54       	subi	r30, 0x48	; 72
    2c26:	ff 4f       	sbci	r31, 0xFF	; 255
    2c28:	80 81       	ld	r24, Z
    2c2a:	84 30       	cpi	r24, 0x04	; 4
    2c2c:	08 f4       	brcc	.+2      	; 0x2c30 <main+0xce4>
    2c2e:	06 cf       	rjmp	.-500    	; 0x2a3c <main+0xaf0>
			LCD_enuSendCharacter(PASSWORD_ASTERISK);	//print asterisk symbol
//			EEPROM_vidwriteByte((EEPROM_u16_TENANT_PASSWORD + Local_u8passCounter), Local_u8keyPressed); //store the password char in a EEPROM address
			eeprom_write_byte((EEPROM_u16_TENANT_PASSWORD + Local_u8passCounter), Local_u8keyPressed);
		}//end of setting the tenant password
//		EEPROM_vidwriteByte(EEPROM_u16_TENANT_PASSWORD_STATUS, PASSWORD_SET);	//flag to completely save the tenant password in EEPROM
		eeprom_write_byte(EEPROM_u16_TENANT_PASSWORD_STATUS, PASSWORD_SET);
    2c30:	e0 ef       	ldi	r30, 0xF0	; 240
    2c32:	f2 e0       	ldi	r31, 0x02	; 2
    2c34:	80 81       	ld	r24, Z
    2c36:	91 81       	ldd	r25, Z+1	; 0x01
    2c38:	60 e0       	ldi	r22, 0x00	; 0
    2c3a:	0e 94 4e 30 	call	0x609c	; 0x609c <__eewr_byte_m32>
    2c3e:	fe 01       	movw	r30, r28
    2c40:	ef 5a       	subi	r30, 0xAF	; 175
    2c42:	ff 4f       	sbci	r31, 0xFF	; 255
    2c44:	80 e0       	ldi	r24, 0x00	; 0
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	a0 ea       	ldi	r26, 0xA0	; 160
    2c4a:	b1 e4       	ldi	r27, 0x41	; 65
    2c4c:	80 83       	st	Z, r24
    2c4e:	91 83       	std	Z+1, r25	; 0x01
    2c50:	a2 83       	std	Z+2, r26	; 0x02
    2c52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c54:	8e 01       	movw	r16, r28
    2c56:	03 5b       	subi	r16, 0xB3	; 179
    2c58:	1f 4f       	sbci	r17, 0xFF	; 255
    2c5a:	fe 01       	movw	r30, r28
    2c5c:	ef 5a       	subi	r30, 0xAF	; 175
    2c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c60:	60 81       	ld	r22, Z
    2c62:	71 81       	ldd	r23, Z+1	; 0x01
    2c64:	82 81       	ldd	r24, Z+2	; 0x02
    2c66:	93 81       	ldd	r25, Z+3	; 0x03
    2c68:	20 e0       	ldi	r18, 0x00	; 0
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	4a e7       	ldi	r20, 0x7A	; 122
    2c6e:	55 e4       	ldi	r21, 0x45	; 69
    2c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	f8 01       	movw	r30, r16
    2c7a:	80 83       	st	Z, r24
    2c7c:	91 83       	std	Z+1, r25	; 0x01
    2c7e:	a2 83       	std	Z+2, r26	; 0x02
    2c80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c82:	fe 01       	movw	r30, r28
    2c84:	e3 5b       	subi	r30, 0xB3	; 179
    2c86:	ff 4f       	sbci	r31, 0xFF	; 255
    2c88:	60 81       	ld	r22, Z
    2c8a:	71 81       	ldd	r23, Z+1	; 0x01
    2c8c:	82 81       	ldd	r24, Z+2	; 0x02
    2c8e:	93 81       	ldd	r25, Z+3	; 0x03
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	40 e8       	ldi	r20, 0x80	; 128
    2c96:	5f e3       	ldi	r21, 0x3F	; 63
    2c98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c9c:	88 23       	and	r24, r24
    2c9e:	44 f4       	brge	.+16     	; 0x2cb0 <main+0xd64>
		__ticks = 1;
    2ca0:	fe 01       	movw	r30, r28
    2ca2:	e5 5b       	subi	r30, 0xB5	; 181
    2ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	91 83       	std	Z+1, r25	; 0x01
    2cac:	80 83       	st	Z, r24
    2cae:	64 c0       	rjmp	.+200    	; 0x2d78 <main+0xe2c>
	else if (__tmp > 65535)
    2cb0:	fe 01       	movw	r30, r28
    2cb2:	e3 5b       	subi	r30, 0xB3	; 179
    2cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb6:	60 81       	ld	r22, Z
    2cb8:	71 81       	ldd	r23, Z+1	; 0x01
    2cba:	82 81       	ldd	r24, Z+2	; 0x02
    2cbc:	93 81       	ldd	r25, Z+3	; 0x03
    2cbe:	20 e0       	ldi	r18, 0x00	; 0
    2cc0:	3f ef       	ldi	r19, 0xFF	; 255
    2cc2:	4f e7       	ldi	r20, 0x7F	; 127
    2cc4:	57 e4       	ldi	r21, 0x47	; 71
    2cc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cca:	18 16       	cp	r1, r24
    2ccc:	0c f0       	brlt	.+2      	; 0x2cd0 <main+0xd84>
    2cce:	43 c0       	rjmp	.+134    	; 0x2d56 <main+0xe0a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cd0:	fe 01       	movw	r30, r28
    2cd2:	ef 5a       	subi	r30, 0xAF	; 175
    2cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd6:	60 81       	ld	r22, Z
    2cd8:	71 81       	ldd	r23, Z+1	; 0x01
    2cda:	82 81       	ldd	r24, Z+2	; 0x02
    2cdc:	93 81       	ldd	r25, Z+3	; 0x03
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	40 e2       	ldi	r20, 0x20	; 32
    2ce4:	51 e4       	ldi	r21, 0x41	; 65
    2ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cea:	dc 01       	movw	r26, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	8e 01       	movw	r16, r28
    2cf0:	05 5b       	subi	r16, 0xB5	; 181
    2cf2:	1f 4f       	sbci	r17, 0xFF	; 255
    2cf4:	bc 01       	movw	r22, r24
    2cf6:	cd 01       	movw	r24, r26
    2cf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cfc:	dc 01       	movw	r26, r24
    2cfe:	cb 01       	movw	r24, r22
    2d00:	f8 01       	movw	r30, r16
    2d02:	91 83       	std	Z+1, r25	; 0x01
    2d04:	80 83       	st	Z, r24
    2d06:	1f c0       	rjmp	.+62     	; 0x2d46 <main+0xdfa>
    2d08:	fe 01       	movw	r30, r28
    2d0a:	e7 5b       	subi	r30, 0xB7	; 183
    2d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0e:	80 e9       	ldi	r24, 0x90	; 144
    2d10:	91 e0       	ldi	r25, 0x01	; 1
    2d12:	91 83       	std	Z+1, r25	; 0x01
    2d14:	80 83       	st	Z, r24
    2d16:	fe 01       	movw	r30, r28
    2d18:	e7 5b       	subi	r30, 0xB7	; 183
    2d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1c:	80 81       	ld	r24, Z
    2d1e:	91 81       	ldd	r25, Z+1	; 0x01
    2d20:	01 97       	sbiw	r24, 0x01	; 1
    2d22:	f1 f7       	brne	.-4      	; 0x2d20 <main+0xdd4>
    2d24:	fe 01       	movw	r30, r28
    2d26:	e7 5b       	subi	r30, 0xB7	; 183
    2d28:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2a:	91 83       	std	Z+1, r25	; 0x01
    2d2c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d2e:	de 01       	movw	r26, r28
    2d30:	a5 5b       	subi	r26, 0xB5	; 181
    2d32:	bf 4f       	sbci	r27, 0xFF	; 255
    2d34:	fe 01       	movw	r30, r28
    2d36:	e5 5b       	subi	r30, 0xB5	; 181
    2d38:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3a:	80 81       	ld	r24, Z
    2d3c:	91 81       	ldd	r25, Z+1	; 0x01
    2d3e:	01 97       	sbiw	r24, 0x01	; 1
    2d40:	11 96       	adiw	r26, 0x01	; 1
    2d42:	9c 93       	st	X, r25
    2d44:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d46:	fe 01       	movw	r30, r28
    2d48:	e5 5b       	subi	r30, 0xB5	; 181
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	80 81       	ld	r24, Z
    2d4e:	91 81       	ldd	r25, Z+1	; 0x01
    2d50:	00 97       	sbiw	r24, 0x00	; 0
    2d52:	d1 f6       	brne	.-76     	; 0x2d08 <main+0xdbc>
    2d54:	27 c0       	rjmp	.+78     	; 0x2da4 <main+0xe58>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d56:	8e 01       	movw	r16, r28
    2d58:	05 5b       	subi	r16, 0xB5	; 181
    2d5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d5c:	fe 01       	movw	r30, r28
    2d5e:	e3 5b       	subi	r30, 0xB3	; 179
    2d60:	ff 4f       	sbci	r31, 0xFF	; 255
    2d62:	60 81       	ld	r22, Z
    2d64:	71 81       	ldd	r23, Z+1	; 0x01
    2d66:	82 81       	ldd	r24, Z+2	; 0x02
    2d68:	93 81       	ldd	r25, Z+3	; 0x03
    2d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d6e:	dc 01       	movw	r26, r24
    2d70:	cb 01       	movw	r24, r22
    2d72:	f8 01       	movw	r30, r16
    2d74:	91 83       	std	Z+1, r25	; 0x01
    2d76:	80 83       	st	Z, r24
    2d78:	de 01       	movw	r26, r28
    2d7a:	a9 5b       	subi	r26, 0xB9	; 185
    2d7c:	bf 4f       	sbci	r27, 0xFF	; 255
    2d7e:	fe 01       	movw	r30, r28
    2d80:	e5 5b       	subi	r30, 0xB5	; 181
    2d82:	ff 4f       	sbci	r31, 0xFF	; 255
    2d84:	80 81       	ld	r24, Z
    2d86:	91 81       	ldd	r25, Z+1	; 0x01
    2d88:	8d 93       	st	X+, r24
    2d8a:	9c 93       	st	X, r25
    2d8c:	fe 01       	movw	r30, r28
    2d8e:	e9 5b       	subi	r30, 0xB9	; 185
    2d90:	ff 4f       	sbci	r31, 0xFF	; 255
    2d92:	80 81       	ld	r24, Z
    2d94:	91 81       	ldd	r25, Z+1	; 0x01
    2d96:	01 97       	sbiw	r24, 0x01	; 1
    2d98:	f1 f7       	brne	.-4      	; 0x2d96 <main+0xe4a>
    2d9a:	fe 01       	movw	r30, r28
    2d9c:	e9 5b       	subi	r30, 0xB9	; 185
    2d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2da0:	91 83       	std	Z+1, r25	; 0x01
    2da2:	80 83       	st	Z, r24
		_delay_ms(20);	//waiting a few milliseconds before continue
		LCD_enuSendInstruction(LCD_u8_DISPLAY_ON_CURRSOR_OFF);
    2da4:	8c e0       	ldi	r24, 0x0C	; 12
    2da6:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
		LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN0);	//move the cursor to the first position in the second row
    2daa:	81 e0       	ldi	r24, 0x01	; 1
    2dac:	60 e0       	ldi	r22, 0x00	; 0
    2dae:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
		LCD_enuSendString(" Password Saved ");	//inform the user that the owner password has been saved to the system
    2db2:	8b eb       	ldi	r24, 0xBB	; 187
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
    2dba:	fe 01       	movw	r30, r28
    2dbc:	ed 5b       	subi	r30, 0xBD	; 189
    2dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc0:	80 e0       	ldi	r24, 0x00	; 0
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	a0 ef       	ldi	r26, 0xF0	; 240
    2dc6:	b1 e4       	ldi	r27, 0x41	; 65
    2dc8:	80 83       	st	Z, r24
    2dca:	91 83       	std	Z+1, r25	; 0x01
    2dcc:	a2 83       	std	Z+2, r26	; 0x02
    2dce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dd0:	8e 01       	movw	r16, r28
    2dd2:	01 5c       	subi	r16, 0xC1	; 193
    2dd4:	1f 4f       	sbci	r17, 0xFF	; 255
    2dd6:	fe 01       	movw	r30, r28
    2dd8:	ed 5b       	subi	r30, 0xBD	; 189
    2dda:	ff 4f       	sbci	r31, 0xFF	; 255
    2ddc:	60 81       	ld	r22, Z
    2dde:	71 81       	ldd	r23, Z+1	; 0x01
    2de0:	82 81       	ldd	r24, Z+2	; 0x02
    2de2:	93 81       	ldd	r25, Z+3	; 0x03
    2de4:	20 e0       	ldi	r18, 0x00	; 0
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	4a e7       	ldi	r20, 0x7A	; 122
    2dea:	55 e4       	ldi	r21, 0x45	; 69
    2dec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df0:	dc 01       	movw	r26, r24
    2df2:	cb 01       	movw	r24, r22
    2df4:	f8 01       	movw	r30, r16
    2df6:	80 83       	st	Z, r24
    2df8:	91 83       	std	Z+1, r25	; 0x01
    2dfa:	a2 83       	std	Z+2, r26	; 0x02
    2dfc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dfe:	fe 01       	movw	r30, r28
    2e00:	ff 96       	adiw	r30, 0x3f	; 63
    2e02:	60 81       	ld	r22, Z
    2e04:	71 81       	ldd	r23, Z+1	; 0x01
    2e06:	82 81       	ldd	r24, Z+2	; 0x02
    2e08:	93 81       	ldd	r25, Z+3	; 0x03
    2e0a:	20 e0       	ldi	r18, 0x00	; 0
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
    2e0e:	40 e8       	ldi	r20, 0x80	; 128
    2e10:	5f e3       	ldi	r21, 0x3F	; 63
    2e12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e16:	88 23       	and	r24, r24
    2e18:	2c f4       	brge	.+10     	; 0x2e24 <main+0xed8>
		__ticks = 1;
    2e1a:	81 e0       	ldi	r24, 0x01	; 1
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	9e af       	std	Y+62, r25	; 0x3e
    2e20:	8d af       	std	Y+61, r24	; 0x3d
    2e22:	46 c0       	rjmp	.+140    	; 0x2eb0 <main+0xf64>
	else if (__tmp > 65535)
    2e24:	fe 01       	movw	r30, r28
    2e26:	ff 96       	adiw	r30, 0x3f	; 63
    2e28:	60 81       	ld	r22, Z
    2e2a:	71 81       	ldd	r23, Z+1	; 0x01
    2e2c:	82 81       	ldd	r24, Z+2	; 0x02
    2e2e:	93 81       	ldd	r25, Z+3	; 0x03
    2e30:	20 e0       	ldi	r18, 0x00	; 0
    2e32:	3f ef       	ldi	r19, 0xFF	; 255
    2e34:	4f e7       	ldi	r20, 0x7F	; 127
    2e36:	57 e4       	ldi	r21, 0x47	; 71
    2e38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e3c:	18 16       	cp	r1, r24
    2e3e:	64 f5       	brge	.+88     	; 0x2e98 <main+0xf4c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e40:	fe 01       	movw	r30, r28
    2e42:	ed 5b       	subi	r30, 0xBD	; 189
    2e44:	ff 4f       	sbci	r31, 0xFF	; 255
    2e46:	60 81       	ld	r22, Z
    2e48:	71 81       	ldd	r23, Z+1	; 0x01
    2e4a:	82 81       	ldd	r24, Z+2	; 0x02
    2e4c:	93 81       	ldd	r25, Z+3	; 0x03
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	40 e2       	ldi	r20, 0x20	; 32
    2e54:	51 e4       	ldi	r21, 0x41	; 65
    2e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	bc 01       	movw	r22, r24
    2e60:	cd 01       	movw	r24, r26
    2e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e66:	dc 01       	movw	r26, r24
    2e68:	cb 01       	movw	r24, r22
    2e6a:	9e af       	std	Y+62, r25	; 0x3e
    2e6c:	8d af       	std	Y+61, r24	; 0x3d
    2e6e:	0f c0       	rjmp	.+30     	; 0x2e8e <main+0xf42>
    2e70:	80 e9       	ldi	r24, 0x90	; 144
    2e72:	91 e0       	ldi	r25, 0x01	; 1
    2e74:	9c af       	std	Y+60, r25	; 0x3c
    2e76:	8b af       	std	Y+59, r24	; 0x3b
    2e78:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e7a:	9c ad       	ldd	r25, Y+60	; 0x3c
    2e7c:	01 97       	sbiw	r24, 0x01	; 1
    2e7e:	f1 f7       	brne	.-4      	; 0x2e7c <main+0xf30>
    2e80:	9c af       	std	Y+60, r25	; 0x3c
    2e82:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e84:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e86:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e88:	01 97       	sbiw	r24, 0x01	; 1
    2e8a:	9e af       	std	Y+62, r25	; 0x3e
    2e8c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e8e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e90:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e92:	00 97       	sbiw	r24, 0x00	; 0
    2e94:	69 f7       	brne	.-38     	; 0x2e70 <main+0xf24>
    2e96:	16 c0       	rjmp	.+44     	; 0x2ec4 <main+0xf78>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e98:	fe 01       	movw	r30, r28
    2e9a:	ff 96       	adiw	r30, 0x3f	; 63
    2e9c:	60 81       	ld	r22, Z
    2e9e:	71 81       	ldd	r23, Z+1	; 0x01
    2ea0:	82 81       	ldd	r24, Z+2	; 0x02
    2ea2:	93 81       	ldd	r25, Z+3	; 0x03
    2ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea8:	dc 01       	movw	r26, r24
    2eaa:	cb 01       	movw	r24, r22
    2eac:	9e af       	std	Y+62, r25	; 0x3e
    2eae:	8d af       	std	Y+61, r24	; 0x3d
    2eb0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2eb2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2eb4:	9a af       	std	Y+58, r25	; 0x3a
    2eb6:	89 af       	std	Y+57, r24	; 0x39
    2eb8:	89 ad       	ldd	r24, Y+57	; 0x39
    2eba:	9a ad       	ldd	r25, Y+58	; 0x3a
    2ebc:	01 97       	sbiw	r24, 0x01	; 1
    2ebe:	f1 f7       	brne	.-4      	; 0x2ebc <main+0xf70>
    2ec0:	9a af       	std	Y+58, r25	; 0x3a
    2ec2:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(30);	//waiting a few milliseconds before continue
		LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);	//clear the screen
    2ec4:	81 e0       	ldi	r24, 0x01	; 1
    2ec6:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
		LCD_enuGoTo(LCD_u8_ROW0, LCD_u8_COLUMN0);	//move the Cursor to the middle of first row in the LCD screen
    2eca:	80 e0       	ldi	r24, 0x00	; 0
    2ecc:	60 e0       	ldi	r22, 0x00	; 0
    2ece:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
		LCD_enuSendString("Registrtion Done");	//print message inform user that the registration is done
    2ed2:	8d ed       	ldi	r24, 0xDD	; 221
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
		LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN3);	//move the Cursor to the middle of second row in the LCD screen
    2eda:	81 e0       	ldi	r24, 0x01	; 1
    2edc:	63 e0       	ldi	r22, 0x03	; 3
    2ede:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
		LCD_enuSendString("Thank You");	//print thanks message
    2ee2:	8e ee       	ldi	r24, 0xEE	; 238
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
		LCD_enuSendCustomCharacter(Local_au8CustomCharacterSmile, LCD_u8_CGRAM_BLOCK_1, LCD_u8_ROW1, LCD_u8_COLUMN13);	//print a smile icon stored in LCD_CGRAM block 1
    2eea:	ce 01       	movw	r24, r28
    2eec:	8e 53       	subi	r24, 0x3E	; 62
    2eee:	9f 4f       	sbci	r25, 0xFF	; 255
    2ef0:	60 e0       	ldi	r22, 0x00	; 0
    2ef2:	41 e0       	ldi	r20, 0x01	; 1
    2ef4:	2d e0       	ldi	r18, 0x0D	; 13
    2ef6:	0e 94 13 0c 	call	0x1826	; 0x1826 <LCD_enuSendCustomCharacter>
    2efa:	80 e0       	ldi	r24, 0x00	; 0
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	a8 e4       	ldi	r26, 0x48	; 72
    2f00:	b2 e4       	ldi	r27, 0x42	; 66
    2f02:	8d ab       	std	Y+53, r24	; 0x35
    2f04:	9e ab       	std	Y+54, r25	; 0x36
    2f06:	af ab       	std	Y+55, r26	; 0x37
    2f08:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f0a:	6d a9       	ldd	r22, Y+53	; 0x35
    2f0c:	7e a9       	ldd	r23, Y+54	; 0x36
    2f0e:	8f a9       	ldd	r24, Y+55	; 0x37
    2f10:	98 ad       	ldd	r25, Y+56	; 0x38
    2f12:	20 e0       	ldi	r18, 0x00	; 0
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	4a e7       	ldi	r20, 0x7A	; 122
    2f18:	55 e4       	ldi	r21, 0x45	; 69
    2f1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f1e:	dc 01       	movw	r26, r24
    2f20:	cb 01       	movw	r24, r22
    2f22:	89 ab       	std	Y+49, r24	; 0x31
    2f24:	9a ab       	std	Y+50, r25	; 0x32
    2f26:	ab ab       	std	Y+51, r26	; 0x33
    2f28:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f2a:	69 a9       	ldd	r22, Y+49	; 0x31
    2f2c:	7a a9       	ldd	r23, Y+50	; 0x32
    2f2e:	8b a9       	ldd	r24, Y+51	; 0x33
    2f30:	9c a9       	ldd	r25, Y+52	; 0x34
    2f32:	20 e0       	ldi	r18, 0x00	; 0
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	40 e8       	ldi	r20, 0x80	; 128
    2f38:	5f e3       	ldi	r21, 0x3F	; 63
    2f3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f3e:	88 23       	and	r24, r24
    2f40:	2c f4       	brge	.+10     	; 0x2f4c <main+0x1000>
		__ticks = 1;
    2f42:	81 e0       	ldi	r24, 0x01	; 1
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	98 ab       	std	Y+48, r25	; 0x30
    2f48:	8f a7       	std	Y+47, r24	; 0x2f
    2f4a:	3f c0       	rjmp	.+126    	; 0x2fca <main+0x107e>
	else if (__tmp > 65535)
    2f4c:	69 a9       	ldd	r22, Y+49	; 0x31
    2f4e:	7a a9       	ldd	r23, Y+50	; 0x32
    2f50:	8b a9       	ldd	r24, Y+51	; 0x33
    2f52:	9c a9       	ldd	r25, Y+52	; 0x34
    2f54:	20 e0       	ldi	r18, 0x00	; 0
    2f56:	3f ef       	ldi	r19, 0xFF	; 255
    2f58:	4f e7       	ldi	r20, 0x7F	; 127
    2f5a:	57 e4       	ldi	r21, 0x47	; 71
    2f5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f60:	18 16       	cp	r1, r24
    2f62:	4c f5       	brge	.+82     	; 0x2fb6 <main+0x106a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f64:	6d a9       	ldd	r22, Y+53	; 0x35
    2f66:	7e a9       	ldd	r23, Y+54	; 0x36
    2f68:	8f a9       	ldd	r24, Y+55	; 0x37
    2f6a:	98 ad       	ldd	r25, Y+56	; 0x38
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	40 e2       	ldi	r20, 0x20	; 32
    2f72:	51 e4       	ldi	r21, 0x41	; 65
    2f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f78:	dc 01       	movw	r26, r24
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	bc 01       	movw	r22, r24
    2f7e:	cd 01       	movw	r24, r26
    2f80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f84:	dc 01       	movw	r26, r24
    2f86:	cb 01       	movw	r24, r22
    2f88:	98 ab       	std	Y+48, r25	; 0x30
    2f8a:	8f a7       	std	Y+47, r24	; 0x2f
    2f8c:	0f c0       	rjmp	.+30     	; 0x2fac <main+0x1060>
    2f8e:	80 e9       	ldi	r24, 0x90	; 144
    2f90:	91 e0       	ldi	r25, 0x01	; 1
    2f92:	9e a7       	std	Y+46, r25	; 0x2e
    2f94:	8d a7       	std	Y+45, r24	; 0x2d
    2f96:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f98:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f9a:	01 97       	sbiw	r24, 0x01	; 1
    2f9c:	f1 f7       	brne	.-4      	; 0x2f9a <main+0x104e>
    2f9e:	9e a7       	std	Y+46, r25	; 0x2e
    2fa0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fa2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fa4:	98 a9       	ldd	r25, Y+48	; 0x30
    2fa6:	01 97       	sbiw	r24, 0x01	; 1
    2fa8:	98 ab       	std	Y+48, r25	; 0x30
    2faa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fac:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fae:	98 a9       	ldd	r25, Y+48	; 0x30
    2fb0:	00 97       	sbiw	r24, 0x00	; 0
    2fb2:	69 f7       	brne	.-38     	; 0x2f8e <main+0x1042>
    2fb4:	14 c0       	rjmp	.+40     	; 0x2fde <main+0x1092>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fb6:	69 a9       	ldd	r22, Y+49	; 0x31
    2fb8:	7a a9       	ldd	r23, Y+50	; 0x32
    2fba:	8b a9       	ldd	r24, Y+51	; 0x33
    2fbc:	9c a9       	ldd	r25, Y+52	; 0x34
    2fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	98 ab       	std	Y+48, r25	; 0x30
    2fc8:	8f a7       	std	Y+47, r24	; 0x2f
    2fca:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fcc:	98 a9       	ldd	r25, Y+48	; 0x30
    2fce:	9c a7       	std	Y+44, r25	; 0x2c
    2fd0:	8b a7       	std	Y+43, r24	; 0x2b
    2fd2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fd4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fd6:	01 97       	sbiw	r24, 0x01	; 1
    2fd8:	f1 f7       	brne	.-4      	; 0x2fd6 <main+0x108a>
    2fda:	9c a7       	std	Y+44, r25	; 0x2c
    2fdc:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(50);	//system stand up for a few milliseconds before clear the screen
		LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);	//clear the LCD screen
    2fde:	81 e0       	ldi	r24, 0x01	; 1
    2fe0:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
    2fe4:	1f c2       	rjmp	.+1086   	; 0x3424 <main+0x14d8>
		 * user enter the password
		 * if the password that user enter agree with that stored in EEPROM address user can pass to the system
		 * if the password that user enter disagree with that stored in EEPROM address user can try again (infinity iterations)
		 * */
		while(u8_loginMode == NO_LOGIN){
			LCD_enuSendString("LOGIN MODE:");
    2fe6:	88 ef       	ldi	r24, 0xF8	; 248
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
			LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN0);	//move the cursor to the first location at the second row
    2fee:	81 e0       	ldi	r24, 0x01	; 1
    2ff0:	60 e0       	ldi	r22, 0x00	; 0
    2ff2:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
			LCD_enuSendString("1-OWNER 2-TENANT");	//options available to the user: "1" to login as the owner, "2" to login as a tenant
    2ff6:	84 e0       	ldi	r24, 0x04	; 4
    2ff8:	91 e0       	ldi	r25, 0x01	; 1
    2ffa:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
			Local_u8keyPressed = WAITING_PRESS_KEY;	//assign the initial value refer to the application waiting the user to enter a value
    2ffe:	fe 01       	movw	r30, r28
    3000:	ef 53       	subi	r30, 0x3F	; 63
    3002:	ff 4f       	sbci	r31, 0xFF	; 255
    3004:	8f ef       	ldi	r24, 0xFF	; 255
    3006:	80 83       	st	Z, r24
    3008:	06 c2       	rjmp	.+1036   	; 0x3416 <main+0x14ca>
			while(Local_u8keyPressed == WAITING_PRESS_KEY){	//loop until user enter a new value.... the break condition is the stored value in (Local_u8keyPressed) not equal the initial value
				KEYPAD_vidGetPressedKey(&Local_u8keyPressed);	//store the value of the pressed key in (Local_u8keyPressed)
    300a:	ce 01       	movw	r24, r28
    300c:	8f 53       	subi	r24, 0x3F	; 63
    300e:	9f 4f       	sbci	r25, 0xFF	; 255
    3010:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <KEYPAD_vidGetPressedKey>
				switch(Local_u8keyPressed){
    3014:	fe 01       	movw	r30, r28
    3016:	ef 53       	subi	r30, 0x3F	; 63
    3018:	ff 4f       	sbci	r31, 0xFF	; 255
    301a:	80 81       	ld	r24, Z
    301c:	28 2f       	mov	r18, r24
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	c6 53       	subi	r28, 0x36	; 54
    3022:	df 4f       	sbci	r29, 0xFF	; 255
    3024:	39 83       	std	Y+1, r19	; 0x01
    3026:	28 83       	st	Y, r18
    3028:	ca 5c       	subi	r28, 0xCA	; 202
    302a:	d0 40       	sbci	r29, 0x00	; 0
    302c:	c6 53       	subi	r28, 0x36	; 54
    302e:	df 4f       	sbci	r29, 0xFF	; 255
    3030:	88 81       	ld	r24, Y
    3032:	99 81       	ldd	r25, Y+1	; 0x01
    3034:	ca 5c       	subi	r28, 0xCA	; 202
    3036:	d0 40       	sbci	r29, 0x00	; 0
    3038:	81 33       	cpi	r24, 0x31	; 49
    303a:	91 05       	cpc	r25, r1
    303c:	59 f0       	breq	.+22     	; 0x3054 <main+0x1108>
    303e:	c6 53       	subi	r28, 0x36	; 54
    3040:	df 4f       	sbci	r29, 0xFF	; 255
    3042:	e8 81       	ld	r30, Y
    3044:	f9 81       	ldd	r31, Y+1	; 0x01
    3046:	ca 5c       	subi	r28, 0xCA	; 202
    3048:	d0 40       	sbci	r29, 0x00	; 0
    304a:	e2 33       	cpi	r30, 0x32	; 50
    304c:	f1 05       	cpc	r31, r1
    304e:	09 f4       	brne	.+2      	; 0x3052 <main+0x1106>
    3050:	ef c0       	rjmp	.+478    	; 0x3230 <main+0x12e4>
    3052:	dc c1       	rjmp	.+952    	; 0x340c <main+0x14c0>
					case OWNER_OPTION:
						do{
							LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);	//clear the LCD screen
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
							LCD_enuGoTo(LCD_u8_ROW0, LCD_u8_COLUMN0);	//move the cursor to the first location at the first row
    305a:	80 e0       	ldi	r24, 0x00	; 0
    305c:	60 e0       	ldi	r22, 0x00	; 0
    305e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
							LCD_enuSendString("ENTER OWNER");
    3062:	85 e1       	ldi	r24, 0x15	; 21
    3064:	91 e0       	ldi	r25, 0x01	; 1
    3066:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
							LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN0);	//move the cursor to the first location at the second row
    306a:	81 e0       	ldi	r24, 0x01	; 1
    306c:	60 e0       	ldi	r22, 0x00	; 0
    306e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
							LCD_enuSendString("PASSWORD: ");
    3072:	81 e2       	ldi	r24, 0x21	; 33
    3074:	91 e0       	ldi	r25, 0x01	; 1
    3076:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
							LCD_enuSendInstruction(LCD_u8_DISPLAY_ON_CURRSOR_ON);
    307a:	8e e0       	ldi	r24, 0x0E	; 14
    307c:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
							Local_u8inputPassword = PASSWORD_TRUE;	//initialize the value of password user enter as true
    3080:	fe 01       	movw	r30, r28
    3082:	e9 54       	subi	r30, 0x49	; 73
    3084:	ff 4f       	sbci	r31, 0xFF	; 255
    3086:	80 ea       	ldi	r24, 0xA0	; 160
    3088:	80 83       	st	Z, r24
							for(Local_u8passCounter = ZERO; Local_u8passCounter < PASS_SIZE; Local_u8passCounter++){ //loop until user enter the password
    308a:	fe 01       	movw	r30, r28
    308c:	e8 54       	subi	r30, 0x48	; 72
    308e:	ff 4f       	sbci	r31, 0xFF	; 255
    3090:	10 82       	st	Z, r1
    3092:	b9 c0       	rjmp	.+370    	; 0x3206 <main+0x12ba>
								Local_u8keyPressed = WAITING_PRESS_KEY;	//assign the initial value refer to the application waiting the user to enter a value
    3094:	fe 01       	movw	r30, r28
    3096:	ef 53       	subi	r30, 0x3F	; 63
    3098:	ff 4f       	sbci	r31, 0xFF	; 255
    309a:	8f ef       	ldi	r24, 0xFF	; 255
    309c:	80 83       	st	Z, r24
    309e:	05 c0       	rjmp	.+10     	; 0x30aa <main+0x115e>
								while(Local_u8keyPressed == WAITING_PRESS_KEY){	//loop until user enter a new value.... the break condition is the stored value in (Local_u8keyPressed) not equal the initial value
									KEYPAD_vidGetPressedKey(&Local_u8keyPressed);	//store the value of the pressed key in (Local_u8keyPressed)
    30a0:	ce 01       	movw	r24, r28
    30a2:	8f 53       	subi	r24, 0x3F	; 63
    30a4:	9f 4f       	sbci	r25, 0xFF	; 255
    30a6:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <KEYPAD_vidGetPressedKey>
							LCD_enuSendString("PASSWORD: ");
							LCD_enuSendInstruction(LCD_u8_DISPLAY_ON_CURRSOR_ON);
							Local_u8inputPassword = PASSWORD_TRUE;	//initialize the value of password user enter as true
							for(Local_u8passCounter = ZERO; Local_u8passCounter < PASS_SIZE; Local_u8passCounter++){ //loop until user enter the password
								Local_u8keyPressed = WAITING_PRESS_KEY;	//assign the initial value refer to the application waiting the user to enter a value
								while(Local_u8keyPressed == WAITING_PRESS_KEY){	//loop until user enter a new value.... the break condition is the stored value in (Local_u8keyPressed) not equal the initial value
    30aa:	fe 01       	movw	r30, r28
    30ac:	ef 53       	subi	r30, 0x3F	; 63
    30ae:	ff 4f       	sbci	r31, 0xFF	; 255
    30b0:	80 81       	ld	r24, Z
    30b2:	8f 3f       	cpi	r24, 0xFF	; 255
    30b4:	a9 f3       	breq	.-22     	; 0x30a0 <main+0x1154>
									KEYPAD_vidGetPressedKey(&Local_u8keyPressed);	//store the value of the pressed key in (Local_u8keyPressed)
								}
								LCD_enuSendCharacter(Local_u8keyPressed);	//print the value of the pressed key on the LCD screen
    30b6:	fe 01       	movw	r30, r28
    30b8:	ef 53       	subi	r30, 0x3F	; 63
    30ba:	ff 4f       	sbci	r31, 0xFF	; 255
    30bc:	80 81       	ld	r24, Z
    30be:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LCD_enuSendCharacter>
    30c2:	80 e0       	ldi	r24, 0x00	; 0
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	a0 ef       	ldi	r26, 0xF0	; 240
    30c8:	b1 e4       	ldi	r27, 0x41	; 65
    30ca:	8f a3       	std	Y+39, r24	; 0x27
    30cc:	98 a7       	std	Y+40, r25	; 0x28
    30ce:	a9 a7       	std	Y+41, r26	; 0x29
    30d0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30d2:	6f a1       	ldd	r22, Y+39	; 0x27
    30d4:	78 a5       	ldd	r23, Y+40	; 0x28
    30d6:	89 a5       	ldd	r24, Y+41	; 0x29
    30d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    30da:	20 e0       	ldi	r18, 0x00	; 0
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	4a e7       	ldi	r20, 0x7A	; 122
    30e0:	55 e4       	ldi	r21, 0x45	; 69
    30e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e6:	dc 01       	movw	r26, r24
    30e8:	cb 01       	movw	r24, r22
    30ea:	8b a3       	std	Y+35, r24	; 0x23
    30ec:	9c a3       	std	Y+36, r25	; 0x24
    30ee:	ad a3       	std	Y+37, r26	; 0x25
    30f0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    30f2:	6b a1       	ldd	r22, Y+35	; 0x23
    30f4:	7c a1       	ldd	r23, Y+36	; 0x24
    30f6:	8d a1       	ldd	r24, Y+37	; 0x25
    30f8:	9e a1       	ldd	r25, Y+38	; 0x26
    30fa:	20 e0       	ldi	r18, 0x00	; 0
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	40 e8       	ldi	r20, 0x80	; 128
    3100:	5f e3       	ldi	r21, 0x3F	; 63
    3102:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3106:	88 23       	and	r24, r24
    3108:	2c f4       	brge	.+10     	; 0x3114 <main+0x11c8>
		__ticks = 1;
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	9a a3       	std	Y+34, r25	; 0x22
    3110:	89 a3       	std	Y+33, r24	; 0x21
    3112:	3f c0       	rjmp	.+126    	; 0x3192 <main+0x1246>
	else if (__tmp > 65535)
    3114:	6b a1       	ldd	r22, Y+35	; 0x23
    3116:	7c a1       	ldd	r23, Y+36	; 0x24
    3118:	8d a1       	ldd	r24, Y+37	; 0x25
    311a:	9e a1       	ldd	r25, Y+38	; 0x26
    311c:	20 e0       	ldi	r18, 0x00	; 0
    311e:	3f ef       	ldi	r19, 0xFF	; 255
    3120:	4f e7       	ldi	r20, 0x7F	; 127
    3122:	57 e4       	ldi	r21, 0x47	; 71
    3124:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3128:	18 16       	cp	r1, r24
    312a:	4c f5       	brge	.+82     	; 0x317e <main+0x1232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    312c:	6f a1       	ldd	r22, Y+39	; 0x27
    312e:	78 a5       	ldd	r23, Y+40	; 0x28
    3130:	89 a5       	ldd	r24, Y+41	; 0x29
    3132:	9a a5       	ldd	r25, Y+42	; 0x2a
    3134:	20 e0       	ldi	r18, 0x00	; 0
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	40 e2       	ldi	r20, 0x20	; 32
    313a:	51 e4       	ldi	r21, 0x41	; 65
    313c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3140:	dc 01       	movw	r26, r24
    3142:	cb 01       	movw	r24, r22
    3144:	bc 01       	movw	r22, r24
    3146:	cd 01       	movw	r24, r26
    3148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    314c:	dc 01       	movw	r26, r24
    314e:	cb 01       	movw	r24, r22
    3150:	9a a3       	std	Y+34, r25	; 0x22
    3152:	89 a3       	std	Y+33, r24	; 0x21
    3154:	0f c0       	rjmp	.+30     	; 0x3174 <main+0x1228>
    3156:	80 e9       	ldi	r24, 0x90	; 144
    3158:	91 e0       	ldi	r25, 0x01	; 1
    315a:	98 a3       	std	Y+32, r25	; 0x20
    315c:	8f 8f       	std	Y+31, r24	; 0x1f
    315e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3160:	98 a1       	ldd	r25, Y+32	; 0x20
    3162:	01 97       	sbiw	r24, 0x01	; 1
    3164:	f1 f7       	brne	.-4      	; 0x3162 <main+0x1216>
    3166:	98 a3       	std	Y+32, r25	; 0x20
    3168:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    316a:	89 a1       	ldd	r24, Y+33	; 0x21
    316c:	9a a1       	ldd	r25, Y+34	; 0x22
    316e:	01 97       	sbiw	r24, 0x01	; 1
    3170:	9a a3       	std	Y+34, r25	; 0x22
    3172:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3174:	89 a1       	ldd	r24, Y+33	; 0x21
    3176:	9a a1       	ldd	r25, Y+34	; 0x22
    3178:	00 97       	sbiw	r24, 0x00	; 0
    317a:	69 f7       	brne	.-38     	; 0x3156 <main+0x120a>
    317c:	14 c0       	rjmp	.+40     	; 0x31a6 <main+0x125a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    317e:	6b a1       	ldd	r22, Y+35	; 0x23
    3180:	7c a1       	ldd	r23, Y+36	; 0x24
    3182:	8d a1       	ldd	r24, Y+37	; 0x25
    3184:	9e a1       	ldd	r25, Y+38	; 0x26
    3186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    318a:	dc 01       	movw	r26, r24
    318c:	cb 01       	movw	r24, r22
    318e:	9a a3       	std	Y+34, r25	; 0x22
    3190:	89 a3       	std	Y+33, r24	; 0x21
    3192:	89 a1       	ldd	r24, Y+33	; 0x21
    3194:	9a a1       	ldd	r25, Y+34	; 0x22
    3196:	9e 8f       	std	Y+30, r25	; 0x1e
    3198:	8d 8f       	std	Y+29, r24	; 0x1d
    319a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    319c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    319e:	01 97       	sbiw	r24, 0x01	; 1
    31a0:	f1 f7       	brne	.-4      	; 0x319e <main+0x1252>
    31a2:	9e 8f       	std	Y+30, r25	; 0x1e
    31a4:	8d 8f       	std	Y+29, r24	; 0x1d
								_delay_ms(PASSWORD_CHAR_APPEAR_TIME);	//system stand up for the defined time period in millisecond to preview the character before replace by password symbol
								LCD_enuGoTo(LCD_u8_ROW1, (CURSOR_POSITION_ENTER_PASSWORD + Local_u8passCounter));	//Move the cursor to the previous location to write an asterisk symbol instead of the printed character
    31a6:	fe 01       	movw	r30, r28
    31a8:	e8 54       	subi	r30, 0x48	; 72
    31aa:	ff 4f       	sbci	r31, 0xFF	; 255
    31ac:	80 81       	ld	r24, Z
    31ae:	98 2f       	mov	r25, r24
    31b0:	96 5f       	subi	r25, 0xF6	; 246
    31b2:	81 e0       	ldi	r24, 0x01	; 1
    31b4:	69 2f       	mov	r22, r25
    31b6:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
								LCD_enuSendCharacter(PASSWORD_ASTERISK);	//print asterisk symbol
    31ba:	8a e2       	ldi	r24, 0x2A	; 42
    31bc:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LCD_enuSendCharacter>
								/*checking the password char user enter if it agree with the value of corresponding address in EEPROM*/
//								if(Local_u8keyPressed != Local_au8ownerPassword[Local_u8passCounter]){
//									Local_u8inputPassword = PASSWORD_WRONG;	//assign the input password as wrong password
//								} else{/*....*/}
								if(Local_u8keyPressed != EEPROM_u8readByte(EEPROM_u16_OWNER_PASSWORD + Local_u8passCounter)){
    31c0:	e8 e0       	ldi	r30, 0x08	; 8
    31c2:	f2 e0       	ldi	r31, 0x02	; 2
    31c4:	20 81       	ld	r18, Z
    31c6:	31 81       	ldd	r19, Z+1	; 0x01
    31c8:	fe 01       	movw	r30, r28
    31ca:	e8 54       	subi	r30, 0x48	; 72
    31cc:	ff 4f       	sbci	r31, 0xFF	; 255
    31ce:	80 81       	ld	r24, Z
    31d0:	88 2f       	mov	r24, r24
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	82 0f       	add	r24, r18
    31d6:	93 1f       	adc	r25, r19
    31d8:	0e 94 a2 06 	call	0xd44	; 0xd44 <EEPROM_u8readByte>
    31dc:	98 2f       	mov	r25, r24
    31de:	fe 01       	movw	r30, r28
    31e0:	ef 53       	subi	r30, 0x3F	; 63
    31e2:	ff 4f       	sbci	r31, 0xFF	; 255
    31e4:	80 81       	ld	r24, Z
    31e6:	98 17       	cp	r25, r24
    31e8:	29 f0       	breq	.+10     	; 0x31f4 <main+0x12a8>
									Local_u8inputPassword = PASSWORD_WRONG;	//assign the input password as wrong password
    31ea:	fe 01       	movw	r30, r28
    31ec:	e9 54       	subi	r30, 0x49	; 73
    31ee:	ff 4f       	sbci	r31, 0xFF	; 255
    31f0:	8a e0       	ldi	r24, 0x0A	; 10
    31f2:	80 83       	st	Z, r24
							LCD_enuSendString("ENTER OWNER");
							LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN0);	//move the cursor to the first location at the second row
							LCD_enuSendString("PASSWORD: ");
							LCD_enuSendInstruction(LCD_u8_DISPLAY_ON_CURRSOR_ON);
							Local_u8inputPassword = PASSWORD_TRUE;	//initialize the value of password user enter as true
							for(Local_u8passCounter = ZERO; Local_u8passCounter < PASS_SIZE; Local_u8passCounter++){ //loop until user enter the password
    31f4:	de 01       	movw	r26, r28
    31f6:	a8 54       	subi	r26, 0x48	; 72
    31f8:	bf 4f       	sbci	r27, 0xFF	; 255
    31fa:	fe 01       	movw	r30, r28
    31fc:	e8 54       	subi	r30, 0x48	; 72
    31fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3200:	80 81       	ld	r24, Z
    3202:	8f 5f       	subi	r24, 0xFF	; 255
    3204:	8c 93       	st	X, r24
    3206:	fe 01       	movw	r30, r28
    3208:	e8 54       	subi	r30, 0x48	; 72
    320a:	ff 4f       	sbci	r31, 0xFF	; 255
    320c:	80 81       	ld	r24, Z
    320e:	84 30       	cpi	r24, 0x04	; 4
    3210:	08 f4       	brcc	.+2      	; 0x3214 <main+0x12c8>
    3212:	40 cf       	rjmp	.-384    	; 0x3094 <main+0x1148>
//								} else{/*....*/}
								if(Local_u8keyPressed != EEPROM_u8readByte(EEPROM_u16_OWNER_PASSWORD + Local_u8passCounter)){
									Local_u8inputPassword = PASSWORD_WRONG;	//assign the input password as wrong password
								} else{/*....*/}
							}//end of writing the password
							LCD_enuSendInstruction(LCD_u8_DISPLAY_ON_CURRSOR_OFF);
    3214:	8c e0       	ldi	r24, 0x0C	; 12
    3216:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
						} while(Local_u8inputPassword == PASSWORD_WRONG);
    321a:	fe 01       	movw	r30, r28
    321c:	e9 54       	subi	r30, 0x49	; 73
    321e:	ff 4f       	sbci	r31, 0xFF	; 255
    3220:	80 81       	ld	r24, Z
    3222:	8a 30       	cpi	r24, 0x0A	; 10
    3224:	09 f4       	brne	.+2      	; 0x3228 <main+0x12dc>
    3226:	16 cf       	rjmp	.-468    	; 0x3054 <main+0x1108>
						u8_loginMode = OWNER_LOGIN;
    3228:	81 e0       	ldi	r24, 0x01	; 1
    322a:	80 93 28 03 	sts	0x0328, r24
    322e:	f3 c0       	rjmp	.+486    	; 0x3416 <main+0x14ca>
						break;
					case TENANT_OPTION:
						do{
							LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);	//clear the LCD screen
    3230:	81 e0       	ldi	r24, 0x01	; 1
    3232:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
							LCD_enuGoTo(LCD_u8_ROW0, LCD_u8_COLUMN0);	//move the cursor to the first location at the first row
    3236:	80 e0       	ldi	r24, 0x00	; 0
    3238:	60 e0       	ldi	r22, 0x00	; 0
    323a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
							LCD_enuSendString("ENTER TENANT");
    323e:	8c e2       	ldi	r24, 0x2C	; 44
    3240:	91 e0       	ldi	r25, 0x01	; 1
    3242:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
							LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN0);	//move the cursor to the first location at the second row
    3246:	81 e0       	ldi	r24, 0x01	; 1
    3248:	60 e0       	ldi	r22, 0x00	; 0
    324a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
							LCD_enuSendString("PASSWORD: ");
    324e:	81 e2       	ldi	r24, 0x21	; 33
    3250:	91 e0       	ldi	r25, 0x01	; 1
    3252:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
							LCD_enuSendInstruction(LCD_u8_DISPLAY_ON_CURRSOR_ON);
    3256:	8e e0       	ldi	r24, 0x0E	; 14
    3258:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
							Local_u8inputPassword = PASSWORD_TRUE;	//initialize the value of password user enter as true
    325c:	fe 01       	movw	r30, r28
    325e:	e9 54       	subi	r30, 0x49	; 73
    3260:	ff 4f       	sbci	r31, 0xFF	; 255
    3262:	80 ea       	ldi	r24, 0xA0	; 160
    3264:	80 83       	st	Z, r24
							for(Local_u8passCounter = ZERO; Local_u8passCounter < PASS_SIZE; Local_u8passCounter++){ //loop until user enter the password
    3266:	fe 01       	movw	r30, r28
    3268:	e8 54       	subi	r30, 0x48	; 72
    326a:	ff 4f       	sbci	r31, 0xFF	; 255
    326c:	10 82       	st	Z, r1
    326e:	b9 c0       	rjmp	.+370    	; 0x33e2 <main+0x1496>
								Local_u8keyPressed = WAITING_PRESS_KEY;	//assign the initial value refer to the application waiting the user to enter a value
    3270:	fe 01       	movw	r30, r28
    3272:	ef 53       	subi	r30, 0x3F	; 63
    3274:	ff 4f       	sbci	r31, 0xFF	; 255
    3276:	8f ef       	ldi	r24, 0xFF	; 255
    3278:	80 83       	st	Z, r24
    327a:	05 c0       	rjmp	.+10     	; 0x3286 <main+0x133a>
								while(Local_u8keyPressed == WAITING_PRESS_KEY){	//loop until user enter a new value.... the break condition is the stored value in (Local_u8keyPressed) not equal the initial value
									KEYPAD_vidGetPressedKey(&Local_u8keyPressed);	//store the value of the pressed key in (Local_u8keyPressed)
    327c:	ce 01       	movw	r24, r28
    327e:	8f 53       	subi	r24, 0x3F	; 63
    3280:	9f 4f       	sbci	r25, 0xFF	; 255
    3282:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <KEYPAD_vidGetPressedKey>
							LCD_enuSendString("PASSWORD: ");
							LCD_enuSendInstruction(LCD_u8_DISPLAY_ON_CURRSOR_ON);
							Local_u8inputPassword = PASSWORD_TRUE;	//initialize the value of password user enter as true
							for(Local_u8passCounter = ZERO; Local_u8passCounter < PASS_SIZE; Local_u8passCounter++){ //loop until user enter the password
								Local_u8keyPressed = WAITING_PRESS_KEY;	//assign the initial value refer to the application waiting the user to enter a value
								while(Local_u8keyPressed == WAITING_PRESS_KEY){	//loop until user enter a new value.... the break condition is the stored value in (Local_u8keyPressed) not equal the initial value
    3286:	fe 01       	movw	r30, r28
    3288:	ef 53       	subi	r30, 0x3F	; 63
    328a:	ff 4f       	sbci	r31, 0xFF	; 255
    328c:	80 81       	ld	r24, Z
    328e:	8f 3f       	cpi	r24, 0xFF	; 255
    3290:	a9 f3       	breq	.-22     	; 0x327c <main+0x1330>
									KEYPAD_vidGetPressedKey(&Local_u8keyPressed);	//store the value of the pressed key in (Local_u8keyPressed)
								}
								LCD_enuSendCharacter(Local_u8keyPressed);	//print the value of the pressed key on the LCD screen
    3292:	fe 01       	movw	r30, r28
    3294:	ef 53       	subi	r30, 0x3F	; 63
    3296:	ff 4f       	sbci	r31, 0xFF	; 255
    3298:	80 81       	ld	r24, Z
    329a:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LCD_enuSendCharacter>
    329e:	80 e0       	ldi	r24, 0x00	; 0
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	a0 ef       	ldi	r26, 0xF0	; 240
    32a4:	b1 e4       	ldi	r27, 0x41	; 65
    32a6:	89 8f       	std	Y+25, r24	; 0x19
    32a8:	9a 8f       	std	Y+26, r25	; 0x1a
    32aa:	ab 8f       	std	Y+27, r26	; 0x1b
    32ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32ae:	69 8d       	ldd	r22, Y+25	; 0x19
    32b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32b6:	20 e0       	ldi	r18, 0x00	; 0
    32b8:	30 e0       	ldi	r19, 0x00	; 0
    32ba:	4a e7       	ldi	r20, 0x7A	; 122
    32bc:	55 e4       	ldi	r21, 0x45	; 69
    32be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c2:	dc 01       	movw	r26, r24
    32c4:	cb 01       	movw	r24, r22
    32c6:	8d 8b       	std	Y+21, r24	; 0x15
    32c8:	9e 8b       	std	Y+22, r25	; 0x16
    32ca:	af 8b       	std	Y+23, r26	; 0x17
    32cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32ce:	6d 89       	ldd	r22, Y+21	; 0x15
    32d0:	7e 89       	ldd	r23, Y+22	; 0x16
    32d2:	8f 89       	ldd	r24, Y+23	; 0x17
    32d4:	98 8d       	ldd	r25, Y+24	; 0x18
    32d6:	20 e0       	ldi	r18, 0x00	; 0
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	40 e8       	ldi	r20, 0x80	; 128
    32dc:	5f e3       	ldi	r21, 0x3F	; 63
    32de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32e2:	88 23       	and	r24, r24
    32e4:	2c f4       	brge	.+10     	; 0x32f0 <main+0x13a4>
		__ticks = 1;
    32e6:	81 e0       	ldi	r24, 0x01	; 1
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	9c 8b       	std	Y+20, r25	; 0x14
    32ec:	8b 8b       	std	Y+19, r24	; 0x13
    32ee:	3f c0       	rjmp	.+126    	; 0x336e <main+0x1422>
	else if (__tmp > 65535)
    32f0:	6d 89       	ldd	r22, Y+21	; 0x15
    32f2:	7e 89       	ldd	r23, Y+22	; 0x16
    32f4:	8f 89       	ldd	r24, Y+23	; 0x17
    32f6:	98 8d       	ldd	r25, Y+24	; 0x18
    32f8:	20 e0       	ldi	r18, 0x00	; 0
    32fa:	3f ef       	ldi	r19, 0xFF	; 255
    32fc:	4f e7       	ldi	r20, 0x7F	; 127
    32fe:	57 e4       	ldi	r21, 0x47	; 71
    3300:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3304:	18 16       	cp	r1, r24
    3306:	4c f5       	brge	.+82     	; 0x335a <main+0x140e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3308:	69 8d       	ldd	r22, Y+25	; 0x19
    330a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    330c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    330e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3310:	20 e0       	ldi	r18, 0x00	; 0
    3312:	30 e0       	ldi	r19, 0x00	; 0
    3314:	40 e2       	ldi	r20, 0x20	; 32
    3316:	51 e4       	ldi	r21, 0x41	; 65
    3318:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    331c:	dc 01       	movw	r26, r24
    331e:	cb 01       	movw	r24, r22
    3320:	bc 01       	movw	r22, r24
    3322:	cd 01       	movw	r24, r26
    3324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3328:	dc 01       	movw	r26, r24
    332a:	cb 01       	movw	r24, r22
    332c:	9c 8b       	std	Y+20, r25	; 0x14
    332e:	8b 8b       	std	Y+19, r24	; 0x13
    3330:	0f c0       	rjmp	.+30     	; 0x3350 <main+0x1404>
    3332:	80 e9       	ldi	r24, 0x90	; 144
    3334:	91 e0       	ldi	r25, 0x01	; 1
    3336:	9a 8b       	std	Y+18, r25	; 0x12
    3338:	89 8b       	std	Y+17, r24	; 0x11
    333a:	89 89       	ldd	r24, Y+17	; 0x11
    333c:	9a 89       	ldd	r25, Y+18	; 0x12
    333e:	01 97       	sbiw	r24, 0x01	; 1
    3340:	f1 f7       	brne	.-4      	; 0x333e <main+0x13f2>
    3342:	9a 8b       	std	Y+18, r25	; 0x12
    3344:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3346:	8b 89       	ldd	r24, Y+19	; 0x13
    3348:	9c 89       	ldd	r25, Y+20	; 0x14
    334a:	01 97       	sbiw	r24, 0x01	; 1
    334c:	9c 8b       	std	Y+20, r25	; 0x14
    334e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3350:	8b 89       	ldd	r24, Y+19	; 0x13
    3352:	9c 89       	ldd	r25, Y+20	; 0x14
    3354:	00 97       	sbiw	r24, 0x00	; 0
    3356:	69 f7       	brne	.-38     	; 0x3332 <main+0x13e6>
    3358:	14 c0       	rjmp	.+40     	; 0x3382 <main+0x1436>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    335a:	6d 89       	ldd	r22, Y+21	; 0x15
    335c:	7e 89       	ldd	r23, Y+22	; 0x16
    335e:	8f 89       	ldd	r24, Y+23	; 0x17
    3360:	98 8d       	ldd	r25, Y+24	; 0x18
    3362:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3366:	dc 01       	movw	r26, r24
    3368:	cb 01       	movw	r24, r22
    336a:	9c 8b       	std	Y+20, r25	; 0x14
    336c:	8b 8b       	std	Y+19, r24	; 0x13
    336e:	8b 89       	ldd	r24, Y+19	; 0x13
    3370:	9c 89       	ldd	r25, Y+20	; 0x14
    3372:	98 8b       	std	Y+16, r25	; 0x10
    3374:	8f 87       	std	Y+15, r24	; 0x0f
    3376:	8f 85       	ldd	r24, Y+15	; 0x0f
    3378:	98 89       	ldd	r25, Y+16	; 0x10
    337a:	01 97       	sbiw	r24, 0x01	; 1
    337c:	f1 f7       	brne	.-4      	; 0x337a <main+0x142e>
    337e:	98 8b       	std	Y+16, r25	; 0x10
    3380:	8f 87       	std	Y+15, r24	; 0x0f
								_delay_ms(PASSWORD_CHAR_APPEAR_TIME);	//system stand up for the defined time period in millisecond to preview the character before replace by password symbol
								LCD_enuGoTo(LCD_u8_ROW1, (CURSOR_POSITION_ENTER_PASSWORD + Local_u8passCounter));	//Move the cursor to the previous location to write an asterisk symbol instead of the printed character
    3382:	fe 01       	movw	r30, r28
    3384:	e8 54       	subi	r30, 0x48	; 72
    3386:	ff 4f       	sbci	r31, 0xFF	; 255
    3388:	80 81       	ld	r24, Z
    338a:	98 2f       	mov	r25, r24
    338c:	96 5f       	subi	r25, 0xF6	; 246
    338e:	81 e0       	ldi	r24, 0x01	; 1
    3390:	69 2f       	mov	r22, r25
    3392:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
								LCD_enuSendCharacter(PASSWORD_ASTERISK);	//print asterisk symbol
    3396:	8a e2       	ldi	r24, 0x2A	; 42
    3398:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LCD_enuSendCharacter>
								/*checking the password char user enter if it agree with the value of corresponding address in EEPROM*/
//								if(Local_u8keyPressed != Local_au8tenantPassword[Local_u8passCounter]){
//									Local_u8inputPassword = PASSWORD_WRONG;	//assign the input password as wrong password
//								} else{/*....*/}
								if(Local_u8keyPressed != EEPROM_u8readByte(EEPROM_u16_OWNER_PASSWORD + Local_u8passCounter)){
    339c:	e8 e0       	ldi	r30, 0x08	; 8
    339e:	f2 e0       	ldi	r31, 0x02	; 2
    33a0:	20 81       	ld	r18, Z
    33a2:	31 81       	ldd	r19, Z+1	; 0x01
    33a4:	fe 01       	movw	r30, r28
    33a6:	e8 54       	subi	r30, 0x48	; 72
    33a8:	ff 4f       	sbci	r31, 0xFF	; 255
    33aa:	80 81       	ld	r24, Z
    33ac:	88 2f       	mov	r24, r24
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	82 0f       	add	r24, r18
    33b2:	93 1f       	adc	r25, r19
    33b4:	0e 94 a2 06 	call	0xd44	; 0xd44 <EEPROM_u8readByte>
    33b8:	98 2f       	mov	r25, r24
    33ba:	fe 01       	movw	r30, r28
    33bc:	ef 53       	subi	r30, 0x3F	; 63
    33be:	ff 4f       	sbci	r31, 0xFF	; 255
    33c0:	80 81       	ld	r24, Z
    33c2:	98 17       	cp	r25, r24
    33c4:	29 f0       	breq	.+10     	; 0x33d0 <main+0x1484>
									Local_u8inputPassword = PASSWORD_WRONG;	//assign the input password as wrong password
    33c6:	fe 01       	movw	r30, r28
    33c8:	e9 54       	subi	r30, 0x49	; 73
    33ca:	ff 4f       	sbci	r31, 0xFF	; 255
    33cc:	8a e0       	ldi	r24, 0x0A	; 10
    33ce:	80 83       	st	Z, r24
							LCD_enuSendString("ENTER TENANT");
							LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN0);	//move the cursor to the first location at the second row
							LCD_enuSendString("PASSWORD: ");
							LCD_enuSendInstruction(LCD_u8_DISPLAY_ON_CURRSOR_ON);
							Local_u8inputPassword = PASSWORD_TRUE;	//initialize the value of password user enter as true
							for(Local_u8passCounter = ZERO; Local_u8passCounter < PASS_SIZE; Local_u8passCounter++){ //loop until user enter the password
    33d0:	de 01       	movw	r26, r28
    33d2:	a8 54       	subi	r26, 0x48	; 72
    33d4:	bf 4f       	sbci	r27, 0xFF	; 255
    33d6:	fe 01       	movw	r30, r28
    33d8:	e8 54       	subi	r30, 0x48	; 72
    33da:	ff 4f       	sbci	r31, 0xFF	; 255
    33dc:	80 81       	ld	r24, Z
    33de:	8f 5f       	subi	r24, 0xFF	; 255
    33e0:	8c 93       	st	X, r24
    33e2:	fe 01       	movw	r30, r28
    33e4:	e8 54       	subi	r30, 0x48	; 72
    33e6:	ff 4f       	sbci	r31, 0xFF	; 255
    33e8:	80 81       	ld	r24, Z
    33ea:	84 30       	cpi	r24, 0x04	; 4
    33ec:	08 f4       	brcc	.+2      	; 0x33f0 <main+0x14a4>
    33ee:	40 cf       	rjmp	.-384    	; 0x3270 <main+0x1324>
//								} else{/*....*/}
								if(Local_u8keyPressed != EEPROM_u8readByte(EEPROM_u16_OWNER_PASSWORD + Local_u8passCounter)){
									Local_u8inputPassword = PASSWORD_WRONG;	//assign the input password as wrong password
								} else{/*....*/}
							}//end of writing the password
							LCD_enuSendInstruction(LCD_u8_DISPLAY_ON_CURRSOR_OFF);
    33f0:	8c e0       	ldi	r24, 0x0C	; 12
    33f2:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
						} while(Local_u8inputPassword == PASSWORD_WRONG);
    33f6:	fe 01       	movw	r30, r28
    33f8:	e9 54       	subi	r30, 0x49	; 73
    33fa:	ff 4f       	sbci	r31, 0xFF	; 255
    33fc:	80 81       	ld	r24, Z
    33fe:	8a 30       	cpi	r24, 0x0A	; 10
    3400:	09 f4       	brne	.+2      	; 0x3404 <main+0x14b8>
    3402:	16 cf       	rjmp	.-468    	; 0x3230 <main+0x12e4>
						u8_loginMode = TENANT_LOGIN;
    3404:	80 e1       	ldi	r24, 0x10	; 16
    3406:	80 93 28 03 	sts	0x0328, r24
    340a:	05 c0       	rjmp	.+10     	; 0x3416 <main+0x14ca>
						break;
					default:
						Local_u8keyPressed = WAITING_PRESS_KEY;
    340c:	fe 01       	movw	r30, r28
    340e:	ef 53       	subi	r30, 0x3F	; 63
    3410:	ff 4f       	sbci	r31, 0xFF	; 255
    3412:	8f ef       	ldi	r24, 0xFF	; 255
    3414:	80 83       	st	Z, r24
		while(u8_loginMode == NO_LOGIN){
			LCD_enuSendString("LOGIN MODE:");
			LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN0);	//move the cursor to the first location at the second row
			LCD_enuSendString("1-OWNER 2-TENANT");	//options available to the user: "1" to login as the owner, "2" to login as a tenant
			Local_u8keyPressed = WAITING_PRESS_KEY;	//assign the initial value refer to the application waiting the user to enter a value
			while(Local_u8keyPressed == WAITING_PRESS_KEY){	//loop until user enter a new value.... the break condition is the stored value in (Local_u8keyPressed) not equal the initial value
    3416:	fe 01       	movw	r30, r28
    3418:	ef 53       	subi	r30, 0x3F	; 63
    341a:	ff 4f       	sbci	r31, 0xFF	; 255
    341c:	80 81       	ld	r24, Z
    341e:	8f 3f       	cpi	r24, 0xFF	; 255
    3420:	09 f4       	brne	.+2      	; 0x3424 <main+0x14d8>
    3422:	f3 cd       	rjmp	.-1050   	; 0x300a <main+0x10be>
		 * user select its role (OWNER/TENANT)
		 * user enter the password
		 * if the password that user enter agree with that stored in EEPROM address user can pass to the system
		 * if the password that user enter disagree with that stored in EEPROM address user can try again (infinity iterations)
		 * */
		while(u8_loginMode == NO_LOGIN){
    3424:	80 91 28 03 	lds	r24, 0x0328
    3428:	88 23       	and	r24, r24
    342a:	09 f4       	brne	.+2      	; 0x342e <main+0x14e2>
    342c:	dc cd       	rjmp	.-1096   	; 0x2fe6 <main+0x109a>
/**************** USER ACTIONS ****************/
		/*owner:
		 * welcome screen appear
		 * OWNER_vidUserOptions() include the options owner have to do
		 * */
		if(u8_loginMode == OWNER_LOGIN){
    342e:	80 91 28 03 	lds	r24, 0x0328
    3432:	81 30       	cpi	r24, 0x01	; 1
    3434:	21 f4       	brne	.+8      	; 0x343e <main+0x14f2>
			HELPER_vidSucessLogin();
    3436:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <HELPER_vidSucessLogin>
			OWNER_vidUserOptions();
    343a:	0e 94 9a 1a 	call	0x3534	; 0x3534 <OWNER_vidUserOptions>
		}
		if(u8_loginMode == TENANT_LOGIN){
    343e:	80 91 28 03 	lds	r24, 0x0328
    3442:	80 31       	cpi	r24, 0x10	; 16
    3444:	21 f4       	brne	.+8      	; 0x344e <main+0x1502>
			HELPER_vidSucessLogin();
    3446:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <HELPER_vidSucessLogin>
			TENANT_vidRoomControl();
    344a:	0e 94 06 2d 	call	0x5a0c	; 0x5a0c <TENANT_vidRoomControl>
    344e:	80 e0       	ldi	r24, 0x00	; 0
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	aa e7       	ldi	r26, 0x7A	; 122
    3454:	b4 e4       	ldi	r27, 0x44	; 68
    3456:	8b 87       	std	Y+11, r24	; 0x0b
    3458:	9c 87       	std	Y+12, r25	; 0x0c
    345a:	ad 87       	std	Y+13, r26	; 0x0d
    345c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    345e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3460:	7c 85       	ldd	r23, Y+12	; 0x0c
    3462:	8d 85       	ldd	r24, Y+13	; 0x0d
    3464:	9e 85       	ldd	r25, Y+14	; 0x0e
    3466:	20 e0       	ldi	r18, 0x00	; 0
    3468:	30 e0       	ldi	r19, 0x00	; 0
    346a:	4a e7       	ldi	r20, 0x7A	; 122
    346c:	55 e4       	ldi	r21, 0x45	; 69
    346e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3472:	dc 01       	movw	r26, r24
    3474:	cb 01       	movw	r24, r22
    3476:	8f 83       	std	Y+7, r24	; 0x07
    3478:	98 87       	std	Y+8, r25	; 0x08
    347a:	a9 87       	std	Y+9, r26	; 0x09
    347c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    347e:	6f 81       	ldd	r22, Y+7	; 0x07
    3480:	78 85       	ldd	r23, Y+8	; 0x08
    3482:	89 85       	ldd	r24, Y+9	; 0x09
    3484:	9a 85       	ldd	r25, Y+10	; 0x0a
    3486:	20 e0       	ldi	r18, 0x00	; 0
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	40 e8       	ldi	r20, 0x80	; 128
    348c:	5f e3       	ldi	r21, 0x3F	; 63
    348e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3492:	88 23       	and	r24, r24
    3494:	2c f4       	brge	.+10     	; 0x34a0 <main+0x1554>
		__ticks = 1;
    3496:	81 e0       	ldi	r24, 0x01	; 1
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	9e 83       	std	Y+6, r25	; 0x06
    349c:	8d 83       	std	Y+5, r24	; 0x05
    349e:	3f c0       	rjmp	.+126    	; 0x351e <main+0x15d2>
	else if (__tmp > 65535)
    34a0:	6f 81       	ldd	r22, Y+7	; 0x07
    34a2:	78 85       	ldd	r23, Y+8	; 0x08
    34a4:	89 85       	ldd	r24, Y+9	; 0x09
    34a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a8:	20 e0       	ldi	r18, 0x00	; 0
    34aa:	3f ef       	ldi	r19, 0xFF	; 255
    34ac:	4f e7       	ldi	r20, 0x7F	; 127
    34ae:	57 e4       	ldi	r21, 0x47	; 71
    34b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34b4:	18 16       	cp	r1, r24
    34b6:	4c f5       	brge	.+82     	; 0x350a <main+0x15be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    34ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    34bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    34be:	9e 85       	ldd	r25, Y+14	; 0x0e
    34c0:	20 e0       	ldi	r18, 0x00	; 0
    34c2:	30 e0       	ldi	r19, 0x00	; 0
    34c4:	40 e2       	ldi	r20, 0x20	; 32
    34c6:	51 e4       	ldi	r21, 0x41	; 65
    34c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34cc:	dc 01       	movw	r26, r24
    34ce:	cb 01       	movw	r24, r22
    34d0:	bc 01       	movw	r22, r24
    34d2:	cd 01       	movw	r24, r26
    34d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d8:	dc 01       	movw	r26, r24
    34da:	cb 01       	movw	r24, r22
    34dc:	9e 83       	std	Y+6, r25	; 0x06
    34de:	8d 83       	std	Y+5, r24	; 0x05
    34e0:	0f c0       	rjmp	.+30     	; 0x3500 <main+0x15b4>
    34e2:	80 e9       	ldi	r24, 0x90	; 144
    34e4:	91 e0       	ldi	r25, 0x01	; 1
    34e6:	9c 83       	std	Y+4, r25	; 0x04
    34e8:	8b 83       	std	Y+3, r24	; 0x03
    34ea:	8b 81       	ldd	r24, Y+3	; 0x03
    34ec:	9c 81       	ldd	r25, Y+4	; 0x04
    34ee:	01 97       	sbiw	r24, 0x01	; 1
    34f0:	f1 f7       	brne	.-4      	; 0x34ee <main+0x15a2>
    34f2:	9c 83       	std	Y+4, r25	; 0x04
    34f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34f6:	8d 81       	ldd	r24, Y+5	; 0x05
    34f8:	9e 81       	ldd	r25, Y+6	; 0x06
    34fa:	01 97       	sbiw	r24, 0x01	; 1
    34fc:	9e 83       	std	Y+6, r25	; 0x06
    34fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3500:	8d 81       	ldd	r24, Y+5	; 0x05
    3502:	9e 81       	ldd	r25, Y+6	; 0x06
    3504:	00 97       	sbiw	r24, 0x00	; 0
    3506:	69 f7       	brne	.-38     	; 0x34e2 <main+0x1596>
    3508:	8d cf       	rjmp	.-230    	; 0x3424 <main+0x14d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    350a:	6f 81       	ldd	r22, Y+7	; 0x07
    350c:	78 85       	ldd	r23, Y+8	; 0x08
    350e:	89 85       	ldd	r24, Y+9	; 0x09
    3510:	9a 85       	ldd	r25, Y+10	; 0x0a
    3512:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3516:	dc 01       	movw	r26, r24
    3518:	cb 01       	movw	r24, r22
    351a:	9e 83       	std	Y+6, r25	; 0x06
    351c:	8d 83       	std	Y+5, r24	; 0x05
    351e:	8d 81       	ldd	r24, Y+5	; 0x05
    3520:	9e 81       	ldd	r25, Y+6	; 0x06
    3522:	9a 83       	std	Y+2, r25	; 0x02
    3524:	89 83       	std	Y+1, r24	; 0x01
    3526:	89 81       	ldd	r24, Y+1	; 0x01
    3528:	9a 81       	ldd	r25, Y+2	; 0x02
    352a:	01 97       	sbiw	r24, 0x01	; 1
    352c:	f1 f7       	brne	.-4      	; 0x352a <main+0x15de>
    352e:	9a 83       	std	Y+2, r25	; 0x02
    3530:	89 83       	std	Y+1, r24	; 0x01
    3532:	78 cf       	rjmp	.-272    	; 0x3424 <main+0x14d8>

00003534 <OWNER_vidUserOptions>:
/* Name: OWNER_vidUserOptions
 * Description: main function of the owner
 * Arguments: void
 * Return:	void
 */
void OWNER_vidUserOptions(void){
    3534:	0f 93       	push	r16
    3536:	1f 93       	push	r17
    3538:	df 93       	push	r29
    353a:	cf 93       	push	r28
    353c:	cd b7       	in	r28, 0x3d	; 61
    353e:	de b7       	in	r29, 0x3e	; 62
    3540:	cf 5a       	subi	r28, 0xAF	; 175
    3542:	d0 40       	sbci	r29, 0x00	; 0
    3544:	0f b6       	in	r0, 0x3f	; 63
    3546:	f8 94       	cli
    3548:	de bf       	out	0x3e, r29	; 62
    354a:	0f be       	out	0x3f, r0	; 63
    354c:	cd bf       	out	0x3d, r28	; 61
	/* local variable */
	u8 Local_u8selectedOption = NO_OPTION;	//create a variable carry the value that refer to the selected option .. initialize on option selected
    354e:	fe 01       	movw	r30, r28
    3550:	e1 57       	subi	r30, 0x71	; 113
    3552:	ff 4f       	sbci	r31, 0xFF	; 255
    3554:	10 82       	st	Z, r1
	u8 Local_u8maxTemperature;		//create a variable carry the max temperature entered by user
	u8 Local_u8minTemperature;		//create a variable carry the min temperature entered by user
	u8 Local_au8CustomCharacterParty[BLOCK_SIZE] = {0x01, 0x03, 0x05, 0x09, 0x09, 0x0B, 0x1B, 0x18}; //party pattern --> CGRAM_BLOCK_2
    3556:	ce 01       	movw	r24, r28
    3558:	80 57       	subi	r24, 0x70	; 112
    355a:	9f 4f       	sbci	r25, 0xFF	; 255
    355c:	ca 55       	subi	r28, 0x5A	; 90
    355e:	df 4f       	sbci	r29, 0xFF	; 255
    3560:	99 83       	std	Y+1, r25	; 0x01
    3562:	88 83       	st	Y, r24
    3564:	c6 5a       	subi	r28, 0xA6	; 166
    3566:	d0 40       	sbci	r29, 0x00	; 0
    3568:	20 e2       	ldi	r18, 0x20	; 32
    356a:	33 e0       	ldi	r19, 0x03	; 3
    356c:	c8 55       	subi	r28, 0x58	; 88
    356e:	df 4f       	sbci	r29, 0xFF	; 255
    3570:	39 83       	std	Y+1, r19	; 0x01
    3572:	28 83       	st	Y, r18
    3574:	c8 5a       	subi	r28, 0xA8	; 168
    3576:	d0 40       	sbci	r29, 0x00	; 0
    3578:	38 e0       	ldi	r19, 0x08	; 8
    357a:	c6 55       	subi	r28, 0x56	; 86
    357c:	df 4f       	sbci	r29, 0xFF	; 255
    357e:	38 83       	st	Y, r19
    3580:	ca 5a       	subi	r28, 0xAA	; 170
    3582:	d0 40       	sbci	r29, 0x00	; 0
    3584:	c8 55       	subi	r28, 0x58	; 88
    3586:	df 4f       	sbci	r29, 0xFF	; 255
    3588:	e8 81       	ld	r30, Y
    358a:	f9 81       	ldd	r31, Y+1	; 0x01
    358c:	c8 5a       	subi	r28, 0xA8	; 168
    358e:	d0 40       	sbci	r29, 0x00	; 0
    3590:	00 80       	ld	r0, Z
    3592:	c8 55       	subi	r28, 0x58	; 88
    3594:	df 4f       	sbci	r29, 0xFF	; 255
    3596:	28 81       	ld	r18, Y
    3598:	39 81       	ldd	r19, Y+1	; 0x01
    359a:	c8 5a       	subi	r28, 0xA8	; 168
    359c:	d0 40       	sbci	r29, 0x00	; 0
    359e:	2f 5f       	subi	r18, 0xFF	; 255
    35a0:	3f 4f       	sbci	r19, 0xFF	; 255
    35a2:	c8 55       	subi	r28, 0x58	; 88
    35a4:	df 4f       	sbci	r29, 0xFF	; 255
    35a6:	39 83       	std	Y+1, r19	; 0x01
    35a8:	28 83       	st	Y, r18
    35aa:	c8 5a       	subi	r28, 0xA8	; 168
    35ac:	d0 40       	sbci	r29, 0x00	; 0
    35ae:	ca 55       	subi	r28, 0x5A	; 90
    35b0:	df 4f       	sbci	r29, 0xFF	; 255
    35b2:	e8 81       	ld	r30, Y
    35b4:	f9 81       	ldd	r31, Y+1	; 0x01
    35b6:	c6 5a       	subi	r28, 0xA6	; 166
    35b8:	d0 40       	sbci	r29, 0x00	; 0
    35ba:	00 82       	st	Z, r0
    35bc:	ca 55       	subi	r28, 0x5A	; 90
    35be:	df 4f       	sbci	r29, 0xFF	; 255
    35c0:	28 81       	ld	r18, Y
    35c2:	39 81       	ldd	r19, Y+1	; 0x01
    35c4:	c6 5a       	subi	r28, 0xA6	; 166
    35c6:	d0 40       	sbci	r29, 0x00	; 0
    35c8:	2f 5f       	subi	r18, 0xFF	; 255
    35ca:	3f 4f       	sbci	r19, 0xFF	; 255
    35cc:	ca 55       	subi	r28, 0x5A	; 90
    35ce:	df 4f       	sbci	r29, 0xFF	; 255
    35d0:	39 83       	std	Y+1, r19	; 0x01
    35d2:	28 83       	st	Y, r18
    35d4:	c6 5a       	subi	r28, 0xA6	; 166
    35d6:	d0 40       	sbci	r29, 0x00	; 0
    35d8:	c6 55       	subi	r28, 0x56	; 86
    35da:	df 4f       	sbci	r29, 0xFF	; 255
    35dc:	38 81       	ld	r19, Y
    35de:	ca 5a       	subi	r28, 0xAA	; 170
    35e0:	d0 40       	sbci	r29, 0x00	; 0
    35e2:	31 50       	subi	r19, 0x01	; 1
    35e4:	c6 55       	subi	r28, 0x56	; 86
    35e6:	df 4f       	sbci	r29, 0xFF	; 255
    35e8:	38 83       	st	Y, r19
    35ea:	ca 5a       	subi	r28, 0xAA	; 170
    35ec:	d0 40       	sbci	r29, 0x00	; 0
    35ee:	c6 55       	subi	r28, 0x56	; 86
    35f0:	df 4f       	sbci	r29, 0xFF	; 255
    35f2:	88 81       	ld	r24, Y
    35f4:	ca 5a       	subi	r28, 0xAA	; 170
    35f6:	d0 40       	sbci	r29, 0x00	; 0
    35f8:	88 23       	and	r24, r24
    35fa:	21 f6       	brne	.-120    	; 0x3584 <OWNER_vidUserOptions+0x50>
	u8 Local_au8CustomCharacterTemperature[BLOCK_SIZE] = {0x04, 0x0A, 0x0A, 0x0E, 0x0E, 0x1F, 0x1F, 0x0E}; //temperature pattern --> CGRAM_BLOCK_3
    35fc:	ce 01       	movw	r24, r28
    35fe:	88 56       	subi	r24, 0x68	; 104
    3600:	9f 4f       	sbci	r25, 0xFF	; 255
    3602:	c5 55       	subi	r28, 0x55	; 85
    3604:	df 4f       	sbci	r29, 0xFF	; 255
    3606:	99 83       	std	Y+1, r25	; 0x01
    3608:	88 83       	st	Y, r24
    360a:	cb 5a       	subi	r28, 0xAB	; 171
    360c:	d0 40       	sbci	r29, 0x00	; 0
    360e:	e8 e1       	ldi	r30, 0x18	; 24
    3610:	f3 e0       	ldi	r31, 0x03	; 3
    3612:	c3 55       	subi	r28, 0x53	; 83
    3614:	df 4f       	sbci	r29, 0xFF	; 255
    3616:	f9 83       	std	Y+1, r31	; 0x01
    3618:	e8 83       	st	Y, r30
    361a:	cd 5a       	subi	r28, 0xAD	; 173
    361c:	d0 40       	sbci	r29, 0x00	; 0
    361e:	f8 e0       	ldi	r31, 0x08	; 8
    3620:	c1 55       	subi	r28, 0x51	; 81
    3622:	df 4f       	sbci	r29, 0xFF	; 255
    3624:	f8 83       	st	Y, r31
    3626:	cf 5a       	subi	r28, 0xAF	; 175
    3628:	d0 40       	sbci	r29, 0x00	; 0
    362a:	c3 55       	subi	r28, 0x53	; 83
    362c:	df 4f       	sbci	r29, 0xFF	; 255
    362e:	e8 81       	ld	r30, Y
    3630:	f9 81       	ldd	r31, Y+1	; 0x01
    3632:	cd 5a       	subi	r28, 0xAD	; 173
    3634:	d0 40       	sbci	r29, 0x00	; 0
    3636:	00 80       	ld	r0, Z
    3638:	c3 55       	subi	r28, 0x53	; 83
    363a:	df 4f       	sbci	r29, 0xFF	; 255
    363c:	28 81       	ld	r18, Y
    363e:	39 81       	ldd	r19, Y+1	; 0x01
    3640:	cd 5a       	subi	r28, 0xAD	; 173
    3642:	d0 40       	sbci	r29, 0x00	; 0
    3644:	2f 5f       	subi	r18, 0xFF	; 255
    3646:	3f 4f       	sbci	r19, 0xFF	; 255
    3648:	c3 55       	subi	r28, 0x53	; 83
    364a:	df 4f       	sbci	r29, 0xFF	; 255
    364c:	39 83       	std	Y+1, r19	; 0x01
    364e:	28 83       	st	Y, r18
    3650:	cd 5a       	subi	r28, 0xAD	; 173
    3652:	d0 40       	sbci	r29, 0x00	; 0
    3654:	c5 55       	subi	r28, 0x55	; 85
    3656:	df 4f       	sbci	r29, 0xFF	; 255
    3658:	e8 81       	ld	r30, Y
    365a:	f9 81       	ldd	r31, Y+1	; 0x01
    365c:	cb 5a       	subi	r28, 0xAB	; 171
    365e:	d0 40       	sbci	r29, 0x00	; 0
    3660:	00 82       	st	Z, r0
    3662:	c5 55       	subi	r28, 0x55	; 85
    3664:	df 4f       	sbci	r29, 0xFF	; 255
    3666:	28 81       	ld	r18, Y
    3668:	39 81       	ldd	r19, Y+1	; 0x01
    366a:	cb 5a       	subi	r28, 0xAB	; 171
    366c:	d0 40       	sbci	r29, 0x00	; 0
    366e:	2f 5f       	subi	r18, 0xFF	; 255
    3670:	3f 4f       	sbci	r19, 0xFF	; 255
    3672:	c5 55       	subi	r28, 0x55	; 85
    3674:	df 4f       	sbci	r29, 0xFF	; 255
    3676:	39 83       	std	Y+1, r19	; 0x01
    3678:	28 83       	st	Y, r18
    367a:	cb 5a       	subi	r28, 0xAB	; 171
    367c:	d0 40       	sbci	r29, 0x00	; 0
    367e:	c1 55       	subi	r28, 0x51	; 81
    3680:	df 4f       	sbci	r29, 0xFF	; 255
    3682:	38 81       	ld	r19, Y
    3684:	cf 5a       	subi	r28, 0xAF	; 175
    3686:	d0 40       	sbci	r29, 0x00	; 0
    3688:	31 50       	subi	r19, 0x01	; 1
    368a:	c1 55       	subi	r28, 0x51	; 81
    368c:	df 4f       	sbci	r29, 0xFF	; 255
    368e:	38 83       	st	Y, r19
    3690:	cf 5a       	subi	r28, 0xAF	; 175
    3692:	d0 40       	sbci	r29, 0x00	; 0
    3694:	c1 55       	subi	r28, 0x51	; 81
    3696:	df 4f       	sbci	r29, 0xFF	; 255
    3698:	88 81       	ld	r24, Y
    369a:	cf 5a       	subi	r28, 0xAF	; 175
    369c:	d0 40       	sbci	r29, 0x00	; 0
    369e:	88 23       	and	r24, r24
    36a0:	21 f6       	brne	.-120    	; 0x362a <OWNER_vidUserOptions+0xf6>
    36a2:	0c 94 be 22 	jmp	0x457c	; 0x457c <OWNER_vidUserOptions+0x1048>
	/* select option from list */
	while(Local_u8selectedOption == NO_OPTION){	//still display option list until user
	//	SPI_vidTransceive(ACTIVE_TEMP_SYSTEM);		//Activate the temperature control system
		LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);		//clear LCD screen
    36a6:	81 e0       	ldi	r24, 0x01	; 1
    36a8:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
		LCD_enuSendString("1.Modes  2.Rooms");		//print the available options
    36ac:	89 e3       	ldi	r24, 0x39	; 57
    36ae:	91 e0       	ldi	r25, 0x01	; 1
    36b0:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
		LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN0);
    36b4:	81 e0       	ldi	r24, 0x01	; 1
    36b6:	60 e0       	ldi	r22, 0x00	; 0
    36b8:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
		LCD_enuSendString("3.Garage  4.Temp");
    36bc:	8a e4       	ldi	r24, 0x4A	; 74
    36be:	91 e0       	ldi	r25, 0x01	; 1
    36c0:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
		u8keyPressed = WAITING_PRESS_KEY;	//assign the initial value refer to the application waiting the user to enter a value
    36c4:	8f ef       	ldi	r24, 0xFF	; 255
    36c6:	80 93 ec 02 	sts	0x02EC, r24
    36ca:	0c 94 b9 22 	jmp	0x4572	; 0x4572 <OWNER_vidUserOptions+0x103e>
		while(u8keyPressed == WAITING_PRESS_KEY){//loop until user select option
			KEYPAD_vidGetPressedKey(&u8keyPressed);	//get the pressed key value
    36ce:	8c ee       	ldi	r24, 0xEC	; 236
    36d0:	92 e0       	ldi	r25, 0x02	; 2
    36d2:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <KEYPAD_vidGetPressedKey>
			switch(u8keyPressed){	//compare the value of pressed key with the available options
    36d6:	80 91 ec 02 	lds	r24, 0x02EC
    36da:	e8 2f       	mov	r30, r24
    36dc:	f0 e0       	ldi	r31, 0x00	; 0
    36de:	cc 55       	subi	r28, 0x5C	; 92
    36e0:	df 4f       	sbci	r29, 0xFF	; 255
    36e2:	f9 83       	std	Y+1, r31	; 0x01
    36e4:	e8 83       	st	Y, r30
    36e6:	c4 5a       	subi	r28, 0xA4	; 164
    36e8:	d0 40       	sbci	r29, 0x00	; 0
    36ea:	cc 55       	subi	r28, 0x5C	; 92
    36ec:	df 4f       	sbci	r29, 0xFF	; 255
    36ee:	28 81       	ld	r18, Y
    36f0:	39 81       	ldd	r19, Y+1	; 0x01
    36f2:	c4 5a       	subi	r28, 0xA4	; 164
    36f4:	d0 40       	sbci	r29, 0x00	; 0
    36f6:	22 33       	cpi	r18, 0x32	; 50
    36f8:	31 05       	cpc	r19, r1
    36fa:	09 f4       	brne	.+2      	; 0x36fe <OWNER_vidUserOptions+0x1ca>
    36fc:	4d c4       	rjmp	.+2202   	; 0x3f98 <OWNER_vidUserOptions+0xa64>
    36fe:	cc 55       	subi	r28, 0x5C	; 92
    3700:	df 4f       	sbci	r29, 0xFF	; 255
    3702:	88 81       	ld	r24, Y
    3704:	99 81       	ldd	r25, Y+1	; 0x01
    3706:	c4 5a       	subi	r28, 0xA4	; 164
    3708:	d0 40       	sbci	r29, 0x00	; 0
    370a:	83 33       	cpi	r24, 0x33	; 51
    370c:	91 05       	cpc	r25, r1
    370e:	54 f4       	brge	.+20     	; 0x3724 <OWNER_vidUserOptions+0x1f0>
    3710:	cc 55       	subi	r28, 0x5C	; 92
    3712:	df 4f       	sbci	r29, 0xFF	; 255
    3714:	e8 81       	ld	r30, Y
    3716:	f9 81       	ldd	r31, Y+1	; 0x01
    3718:	c4 5a       	subi	r28, 0xA4	; 164
    371a:	d0 40       	sbci	r29, 0x00	; 0
    371c:	e1 33       	cpi	r30, 0x31	; 49
    371e:	f1 05       	cpc	r31, r1
    3720:	b1 f0       	breq	.+44     	; 0x374e <OWNER_vidUserOptions+0x21a>
    3722:	24 c7       	rjmp	.+3656   	; 0x456c <OWNER_vidUserOptions+0x1038>
    3724:	cc 55       	subi	r28, 0x5C	; 92
    3726:	df 4f       	sbci	r29, 0xFF	; 255
    3728:	28 81       	ld	r18, Y
    372a:	39 81       	ldd	r19, Y+1	; 0x01
    372c:	c4 5a       	subi	r28, 0xA4	; 164
    372e:	d0 40       	sbci	r29, 0x00	; 0
    3730:	23 33       	cpi	r18, 0x33	; 51
    3732:	31 05       	cpc	r19, r1
    3734:	09 f4       	brne	.+2      	; 0x3738 <OWNER_vidUserOptions+0x204>
    3736:	7b c4       	rjmp	.+2294   	; 0x402e <OWNER_vidUserOptions+0xafa>
    3738:	cc 55       	subi	r28, 0x5C	; 92
    373a:	df 4f       	sbci	r29, 0xFF	; 255
    373c:	88 81       	ld	r24, Y
    373e:	99 81       	ldd	r25, Y+1	; 0x01
    3740:	c4 5a       	subi	r28, 0xA4	; 164
    3742:	d0 40       	sbci	r29, 0x00	; 0
    3744:	84 33       	cpi	r24, 0x34	; 52
    3746:	91 05       	cpc	r25, r1
    3748:	09 f4       	brne	.+2      	; 0x374c <OWNER_vidUserOptions+0x218>
    374a:	74 c4       	rjmp	.+2280   	; 0x4034 <OWNER_vidUserOptions+0xb00>
    374c:	0f c7       	rjmp	.+3614   	; 0x456c <OWNER_vidUserOptions+0x1038>
			/* first option: change operating mode
			 * have internal options --> normal mode, party mode
			 * */
				case CHANGE_MODE:
					/* let user select one from the available modes */
					LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);		//clear LCD screen
    374e:	81 e0       	ldi	r24, 0x01	; 1
    3750:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
					LCD_enuSendString("1.Normal Mode");		//print the available options
    3754:	8b e5       	ldi	r24, 0x5B	; 91
    3756:	91 e0       	ldi	r25, 0x01	; 1
    3758:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
					LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN0);
    375c:	81 e0       	ldi	r24, 0x01	; 1
    375e:	60 e0       	ldi	r22, 0x00	; 0
    3760:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
					LCD_enuSendString("2.Party Mode");
    3764:	89 e6       	ldi	r24, 0x69	; 105
    3766:	91 e0       	ldi	r25, 0x01	; 1
    3768:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
					u8keyPressed = WAITING_PRESS_KEY;	//assign the initial value refer to the application waiting the user to enter a value
    376c:	8f ef       	ldi	r24, 0xFF	; 255
    376e:	80 93 ec 02 	sts	0x02EC, r24
    3772:	0c c4       	rjmp	.+2072   	; 0x3f8c <OWNER_vidUserOptions+0xa58>
					while(u8keyPressed == WAITING_PRESS_KEY){//loop until user select option
						KEYPAD_vidGetPressedKey(&u8keyPressed);	//get the pressed key value
    3774:	8c ee       	ldi	r24, 0xEC	; 236
    3776:	92 e0       	ldi	r25, 0x02	; 2
    3778:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <KEYPAD_vidGetPressedKey>
						switch(u8keyPressed){
    377c:	80 91 ec 02 	lds	r24, 0x02EC
    3780:	e8 2f       	mov	r30, r24
    3782:	f0 e0       	ldi	r31, 0x00	; 0
    3784:	ce 55       	subi	r28, 0x5E	; 94
    3786:	df 4f       	sbci	r29, 0xFF	; 255
    3788:	f9 83       	std	Y+1, r31	; 0x01
    378a:	e8 83       	st	Y, r30
    378c:	c2 5a       	subi	r28, 0xA2	; 162
    378e:	d0 40       	sbci	r29, 0x00	; 0
    3790:	ce 55       	subi	r28, 0x5E	; 94
    3792:	df 4f       	sbci	r29, 0xFF	; 255
    3794:	28 81       	ld	r18, Y
    3796:	39 81       	ldd	r19, Y+1	; 0x01
    3798:	c2 5a       	subi	r28, 0xA2	; 162
    379a:	d0 40       	sbci	r29, 0x00	; 0
    379c:	21 33       	cpi	r18, 0x31	; 49
    379e:	31 05       	cpc	r19, r1
    37a0:	09 f4       	brne	.+2      	; 0x37a4 <OWNER_vidUserOptions+0x270>
    37a2:	f4 c3       	rjmp	.+2024   	; 0x3f8c <OWNER_vidUserOptions+0xa58>
    37a4:	ce 55       	subi	r28, 0x5E	; 94
    37a6:	df 4f       	sbci	r29, 0xFF	; 255
    37a8:	88 81       	ld	r24, Y
    37aa:	99 81       	ldd	r25, Y+1	; 0x01
    37ac:	c2 5a       	subi	r28, 0xA2	; 162
    37ae:	d0 40       	sbci	r29, 0x00	; 0
    37b0:	82 33       	cpi	r24, 0x32	; 50
    37b2:	91 05       	cpc	r25, r1
    37b4:	09 f0       	breq	.+2      	; 0x37b8 <OWNER_vidUserOptions+0x284>
    37b6:	e7 c3       	rjmp	.+1998   	; 0x3f86 <OWNER_vidUserOptions+0xa52>
								continue;
						/* second mode: party mode activate for specific minutes user set it by the keypad
							can't cancel this mode after active it and LCD show a timer count the
							activate time then return to the normal after it*/
							case PARTY_MODE:
								LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);		//clear LCD screen
    37b8:	81 e0       	ldi	r24, 0x01	; 1
    37ba:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
								LCD_enuSendString("Set Reservation Time (M)");
    37be:	86 e7       	ldi	r24, 0x76	; 118
    37c0:	91 e0       	ldi	r25, 0x01	; 1
    37c2:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
								LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN0);
    37c6:	81 e0       	ldi	r24, 0x01	; 1
    37c8:	60 e0       	ldi	r22, 0x00	; 0
    37ca:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
								LCD_enuSendString("Time (Min): ");
    37ce:	8f e8       	ldi	r24, 0x8F	; 143
    37d0:	91 e0       	ldi	r25, 0x01	; 1
    37d2:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
								LCD_enuSendInstruction(LCD_u8_DISPLAY_ON_CURRSOR_ON);  //appear the LCD cursor
    37d6:	8e e0       	ldi	r24, 0x0E	; 14
    37d8:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
								u8keyPressed = WAITING_PRESS_KEY;		//assign the initial value .. no pressed key
    37dc:	8f ef       	ldi	r24, 0xFF	; 255
    37de:	80 93 ec 02 	sts	0x02EC, r24
    37e2:	04 c0       	rjmp	.+8      	; 0x37ec <OWNER_vidUserOptions+0x2b8>
								while((u8keyPressed == WAITING_PRESS_KEY) || (u8keyPressed == HASH_SIGN) || (u8keyPressed == ASTERISK_SIGN) || (u8keyPressed == ZERO_ASCII)){
									//can't enter #, *, or 0 ... must be a number 1 --> 9
									KEYPAD_vidGetPressedKey(&u8keyPressed);
    37e4:	8c ee       	ldi	r24, 0xEC	; 236
    37e6:	92 e0       	ldi	r25, 0x02	; 2
    37e8:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <KEYPAD_vidGetPressedKey>
								LCD_enuSendString("Set Reservation Time (M)");
								LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN0);
								LCD_enuSendString("Time (Min): ");
								LCD_enuSendInstruction(LCD_u8_DISPLAY_ON_CURRSOR_ON);  //appear the LCD cursor
								u8keyPressed = WAITING_PRESS_KEY;		//assign the initial value .. no pressed key
								while((u8keyPressed == WAITING_PRESS_KEY) || (u8keyPressed == HASH_SIGN) || (u8keyPressed == ASTERISK_SIGN) || (u8keyPressed == ZERO_ASCII)){
    37ec:	80 91 ec 02 	lds	r24, 0x02EC
    37f0:	8f 3f       	cpi	r24, 0xFF	; 255
    37f2:	c1 f3       	breq	.-16     	; 0x37e4 <OWNER_vidUserOptions+0x2b0>
    37f4:	80 91 ec 02 	lds	r24, 0x02EC
    37f8:	83 32       	cpi	r24, 0x23	; 35
    37fa:	a1 f3       	breq	.-24     	; 0x37e4 <OWNER_vidUserOptions+0x2b0>
    37fc:	80 91 ec 02 	lds	r24, 0x02EC
    3800:	8a 32       	cpi	r24, 0x2A	; 42
    3802:	81 f3       	breq	.-32     	; 0x37e4 <OWNER_vidUserOptions+0x2b0>
    3804:	80 91 ec 02 	lds	r24, 0x02EC
    3808:	80 33       	cpi	r24, 0x30	; 48
    380a:	61 f3       	breq	.-40     	; 0x37e4 <OWNER_vidUserOptions+0x2b0>
									//can't enter #, *, or 0 ... must be a number 1 --> 9
									KEYPAD_vidGetPressedKey(&u8keyPressed);
								}
								u8PartyDuration = u8keyPressed - ASCII_DEFERANT;	//store the time in its specific variable
    380c:	80 91 ec 02 	lds	r24, 0x02EC
    3810:	80 53       	subi	r24, 0x30	; 48
    3812:	80 93 2d 03 	sts	0x032D, r24
								LCD_enuSendCharacter(u8keyPressed);	//show the pressed key value on the LCD
    3816:	80 91 ec 02 	lds	r24, 0x02EC
    381a:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LCD_enuSendCharacter>
    381e:	fe 01       	movw	r30, r28
    3820:	e7 57       	subi	r30, 0x77	; 119
    3822:	ff 4f       	sbci	r31, 0xFF	; 255
    3824:	80 e0       	ldi	r24, 0x00	; 0
    3826:	90 e0       	ldi	r25, 0x00	; 0
    3828:	a0 ef       	ldi	r26, 0xF0	; 240
    382a:	b1 e4       	ldi	r27, 0x41	; 65
    382c:	80 83       	st	Z, r24
    382e:	91 83       	std	Z+1, r25	; 0x01
    3830:	a2 83       	std	Z+2, r26	; 0x02
    3832:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3834:	8e 01       	movw	r16, r28
    3836:	0b 57       	subi	r16, 0x7B	; 123
    3838:	1f 4f       	sbci	r17, 0xFF	; 255
    383a:	fe 01       	movw	r30, r28
    383c:	e7 57       	subi	r30, 0x77	; 119
    383e:	ff 4f       	sbci	r31, 0xFF	; 255
    3840:	60 81       	ld	r22, Z
    3842:	71 81       	ldd	r23, Z+1	; 0x01
    3844:	82 81       	ldd	r24, Z+2	; 0x02
    3846:	93 81       	ldd	r25, Z+3	; 0x03
    3848:	20 e0       	ldi	r18, 0x00	; 0
    384a:	30 e0       	ldi	r19, 0x00	; 0
    384c:	4a e7       	ldi	r20, 0x7A	; 122
    384e:	55 e4       	ldi	r21, 0x45	; 69
    3850:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3854:	dc 01       	movw	r26, r24
    3856:	cb 01       	movw	r24, r22
    3858:	f8 01       	movw	r30, r16
    385a:	80 83       	st	Z, r24
    385c:	91 83       	std	Z+1, r25	; 0x01
    385e:	a2 83       	std	Z+2, r26	; 0x02
    3860:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3862:	fe 01       	movw	r30, r28
    3864:	eb 57       	subi	r30, 0x7B	; 123
    3866:	ff 4f       	sbci	r31, 0xFF	; 255
    3868:	60 81       	ld	r22, Z
    386a:	71 81       	ldd	r23, Z+1	; 0x01
    386c:	82 81       	ldd	r24, Z+2	; 0x02
    386e:	93 81       	ldd	r25, Z+3	; 0x03
    3870:	20 e0       	ldi	r18, 0x00	; 0
    3872:	30 e0       	ldi	r19, 0x00	; 0
    3874:	40 e8       	ldi	r20, 0x80	; 128
    3876:	5f e3       	ldi	r21, 0x3F	; 63
    3878:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    387c:	88 23       	and	r24, r24
    387e:	44 f4       	brge	.+16     	; 0x3890 <OWNER_vidUserOptions+0x35c>
		__ticks = 1;
    3880:	fe 01       	movw	r30, r28
    3882:	ed 57       	subi	r30, 0x7D	; 125
    3884:	ff 4f       	sbci	r31, 0xFF	; 255
    3886:	81 e0       	ldi	r24, 0x01	; 1
    3888:	90 e0       	ldi	r25, 0x00	; 0
    388a:	91 83       	std	Z+1, r25	; 0x01
    388c:	80 83       	st	Z, r24
    388e:	64 c0       	rjmp	.+200    	; 0x3958 <OWNER_vidUserOptions+0x424>
	else if (__tmp > 65535)
    3890:	fe 01       	movw	r30, r28
    3892:	eb 57       	subi	r30, 0x7B	; 123
    3894:	ff 4f       	sbci	r31, 0xFF	; 255
    3896:	60 81       	ld	r22, Z
    3898:	71 81       	ldd	r23, Z+1	; 0x01
    389a:	82 81       	ldd	r24, Z+2	; 0x02
    389c:	93 81       	ldd	r25, Z+3	; 0x03
    389e:	20 e0       	ldi	r18, 0x00	; 0
    38a0:	3f ef       	ldi	r19, 0xFF	; 255
    38a2:	4f e7       	ldi	r20, 0x7F	; 127
    38a4:	57 e4       	ldi	r21, 0x47	; 71
    38a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38aa:	18 16       	cp	r1, r24
    38ac:	0c f0       	brlt	.+2      	; 0x38b0 <OWNER_vidUserOptions+0x37c>
    38ae:	43 c0       	rjmp	.+134    	; 0x3936 <OWNER_vidUserOptions+0x402>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38b0:	fe 01       	movw	r30, r28
    38b2:	e7 57       	subi	r30, 0x77	; 119
    38b4:	ff 4f       	sbci	r31, 0xFF	; 255
    38b6:	60 81       	ld	r22, Z
    38b8:	71 81       	ldd	r23, Z+1	; 0x01
    38ba:	82 81       	ldd	r24, Z+2	; 0x02
    38bc:	93 81       	ldd	r25, Z+3	; 0x03
    38be:	20 e0       	ldi	r18, 0x00	; 0
    38c0:	30 e0       	ldi	r19, 0x00	; 0
    38c2:	40 e2       	ldi	r20, 0x20	; 32
    38c4:	51 e4       	ldi	r21, 0x41	; 65
    38c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ca:	dc 01       	movw	r26, r24
    38cc:	cb 01       	movw	r24, r22
    38ce:	8e 01       	movw	r16, r28
    38d0:	0d 57       	subi	r16, 0x7D	; 125
    38d2:	1f 4f       	sbci	r17, 0xFF	; 255
    38d4:	bc 01       	movw	r22, r24
    38d6:	cd 01       	movw	r24, r26
    38d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38dc:	dc 01       	movw	r26, r24
    38de:	cb 01       	movw	r24, r22
    38e0:	f8 01       	movw	r30, r16
    38e2:	91 83       	std	Z+1, r25	; 0x01
    38e4:	80 83       	st	Z, r24
    38e6:	1f c0       	rjmp	.+62     	; 0x3926 <OWNER_vidUserOptions+0x3f2>
    38e8:	fe 01       	movw	r30, r28
    38ea:	ef 57       	subi	r30, 0x7F	; 127
    38ec:	ff 4f       	sbci	r31, 0xFF	; 255
    38ee:	80 e9       	ldi	r24, 0x90	; 144
    38f0:	91 e0       	ldi	r25, 0x01	; 1
    38f2:	91 83       	std	Z+1, r25	; 0x01
    38f4:	80 83       	st	Z, r24
    38f6:	fe 01       	movw	r30, r28
    38f8:	ef 57       	subi	r30, 0x7F	; 127
    38fa:	ff 4f       	sbci	r31, 0xFF	; 255
    38fc:	80 81       	ld	r24, Z
    38fe:	91 81       	ldd	r25, Z+1	; 0x01
    3900:	01 97       	sbiw	r24, 0x01	; 1
    3902:	f1 f7       	brne	.-4      	; 0x3900 <OWNER_vidUserOptions+0x3cc>
    3904:	fe 01       	movw	r30, r28
    3906:	ef 57       	subi	r30, 0x7F	; 127
    3908:	ff 4f       	sbci	r31, 0xFF	; 255
    390a:	91 83       	std	Z+1, r25	; 0x01
    390c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    390e:	de 01       	movw	r26, r28
    3910:	ad 57       	subi	r26, 0x7D	; 125
    3912:	bf 4f       	sbci	r27, 0xFF	; 255
    3914:	fe 01       	movw	r30, r28
    3916:	ed 57       	subi	r30, 0x7D	; 125
    3918:	ff 4f       	sbci	r31, 0xFF	; 255
    391a:	80 81       	ld	r24, Z
    391c:	91 81       	ldd	r25, Z+1	; 0x01
    391e:	01 97       	sbiw	r24, 0x01	; 1
    3920:	11 96       	adiw	r26, 0x01	; 1
    3922:	9c 93       	st	X, r25
    3924:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3926:	fe 01       	movw	r30, r28
    3928:	ed 57       	subi	r30, 0x7D	; 125
    392a:	ff 4f       	sbci	r31, 0xFF	; 255
    392c:	80 81       	ld	r24, Z
    392e:	91 81       	ldd	r25, Z+1	; 0x01
    3930:	00 97       	sbiw	r24, 0x00	; 0
    3932:	d1 f6       	brne	.-76     	; 0x38e8 <OWNER_vidUserOptions+0x3b4>
    3934:	27 c0       	rjmp	.+78     	; 0x3984 <OWNER_vidUserOptions+0x450>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3936:	8e 01       	movw	r16, r28
    3938:	0d 57       	subi	r16, 0x7D	; 125
    393a:	1f 4f       	sbci	r17, 0xFF	; 255
    393c:	fe 01       	movw	r30, r28
    393e:	eb 57       	subi	r30, 0x7B	; 123
    3940:	ff 4f       	sbci	r31, 0xFF	; 255
    3942:	60 81       	ld	r22, Z
    3944:	71 81       	ldd	r23, Z+1	; 0x01
    3946:	82 81       	ldd	r24, Z+2	; 0x02
    3948:	93 81       	ldd	r25, Z+3	; 0x03
    394a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    394e:	dc 01       	movw	r26, r24
    3950:	cb 01       	movw	r24, r22
    3952:	f8 01       	movw	r30, r16
    3954:	91 83       	std	Z+1, r25	; 0x01
    3956:	80 83       	st	Z, r24
    3958:	de 01       	movw	r26, r28
    395a:	a1 58       	subi	r26, 0x81	; 129
    395c:	bf 4f       	sbci	r27, 0xFF	; 255
    395e:	fe 01       	movw	r30, r28
    3960:	ed 57       	subi	r30, 0x7D	; 125
    3962:	ff 4f       	sbci	r31, 0xFF	; 255
    3964:	80 81       	ld	r24, Z
    3966:	91 81       	ldd	r25, Z+1	; 0x01
    3968:	8d 93       	st	X+, r24
    396a:	9c 93       	st	X, r25
    396c:	fe 01       	movw	r30, r28
    396e:	e1 58       	subi	r30, 0x81	; 129
    3970:	ff 4f       	sbci	r31, 0xFF	; 255
    3972:	80 81       	ld	r24, Z
    3974:	91 81       	ldd	r25, Z+1	; 0x01
    3976:	01 97       	sbiw	r24, 0x01	; 1
    3978:	f1 f7       	brne	.-4      	; 0x3976 <OWNER_vidUserOptions+0x442>
    397a:	fe 01       	movw	r30, r28
    397c:	e1 58       	subi	r30, 0x81	; 129
    397e:	ff 4f       	sbci	r31, 0xFF	; 255
    3980:	91 83       	std	Z+1, r25	; 0x01
    3982:	80 83       	st	Z, r24
								_delay_ms(30);	//stand up the system for a few ms
								LCD_enuSendInstruction(LCD_u8_DISPLAY_ON_CURRSOR_OFF);  //disappear the LCD cursor
    3984:	8c e0       	ldi	r24, 0x0C	; 12
    3986:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
								LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);	//clear the LCD screen
    398a:	81 e0       	ldi	r24, 0x01	; 1
    398c:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
								LCD_enuSendCustomCharacter(Local_au8CustomCharacterParty, LCD_u8_CGRAM_BLOCK_2, LCD_u8_ROW0, LCD_u8_COLUMN8);
    3990:	ce 01       	movw	r24, r28
    3992:	80 57       	subi	r24, 0x70	; 112
    3994:	9f 4f       	sbci	r25, 0xFF	; 255
    3996:	61 e0       	ldi	r22, 0x01	; 1
    3998:	40 e0       	ldi	r20, 0x00	; 0
    399a:	28 e0       	ldi	r18, 0x08	; 8
    399c:	0e 94 13 0c 	call	0x1826	; 0x1826 <LCD_enuSendCustomCharacter>
								LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN3); //move the cursor to the middle of second row
    39a0:	81 e0       	ldi	r24, 0x01	; 1
    39a2:	63 e0       	ldi	r22, 0x03	; 3
    39a4:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
								LCD_enuSendString("PARTY START");	//print start party on the screen
    39a8:	8c e9       	ldi	r24, 0x9C	; 156
    39aa:	91 e0       	ldi	r25, 0x01	; 1
    39ac:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
    39b0:	fe 01       	movw	r30, r28
    39b2:	e5 58       	subi	r30, 0x85	; 133
    39b4:	ff 4f       	sbci	r31, 0xFF	; 255
    39b6:	80 e0       	ldi	r24, 0x00	; 0
    39b8:	90 e0       	ldi	r25, 0x00	; 0
    39ba:	a8 ec       	ldi	r26, 0xC8	; 200
    39bc:	b2 e4       	ldi	r27, 0x42	; 66
    39be:	80 83       	st	Z, r24
    39c0:	91 83       	std	Z+1, r25	; 0x01
    39c2:	a2 83       	std	Z+2, r26	; 0x02
    39c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39c6:	8e 01       	movw	r16, r28
    39c8:	09 58       	subi	r16, 0x89	; 137
    39ca:	1f 4f       	sbci	r17, 0xFF	; 255
    39cc:	fe 01       	movw	r30, r28
    39ce:	e5 58       	subi	r30, 0x85	; 133
    39d0:	ff 4f       	sbci	r31, 0xFF	; 255
    39d2:	60 81       	ld	r22, Z
    39d4:	71 81       	ldd	r23, Z+1	; 0x01
    39d6:	82 81       	ldd	r24, Z+2	; 0x02
    39d8:	93 81       	ldd	r25, Z+3	; 0x03
    39da:	20 e0       	ldi	r18, 0x00	; 0
    39dc:	30 e0       	ldi	r19, 0x00	; 0
    39de:	4a e7       	ldi	r20, 0x7A	; 122
    39e0:	55 e4       	ldi	r21, 0x45	; 69
    39e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39e6:	dc 01       	movw	r26, r24
    39e8:	cb 01       	movw	r24, r22
    39ea:	f8 01       	movw	r30, r16
    39ec:	80 83       	st	Z, r24
    39ee:	91 83       	std	Z+1, r25	; 0x01
    39f0:	a2 83       	std	Z+2, r26	; 0x02
    39f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39f4:	fe 01       	movw	r30, r28
    39f6:	e9 58       	subi	r30, 0x89	; 137
    39f8:	ff 4f       	sbci	r31, 0xFF	; 255
    39fa:	60 81       	ld	r22, Z
    39fc:	71 81       	ldd	r23, Z+1	; 0x01
    39fe:	82 81       	ldd	r24, Z+2	; 0x02
    3a00:	93 81       	ldd	r25, Z+3	; 0x03
    3a02:	20 e0       	ldi	r18, 0x00	; 0
    3a04:	30 e0       	ldi	r19, 0x00	; 0
    3a06:	40 e8       	ldi	r20, 0x80	; 128
    3a08:	5f e3       	ldi	r21, 0x3F	; 63
    3a0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a0e:	88 23       	and	r24, r24
    3a10:	44 f4       	brge	.+16     	; 0x3a22 <OWNER_vidUserOptions+0x4ee>
		__ticks = 1;
    3a12:	fe 01       	movw	r30, r28
    3a14:	eb 58       	subi	r30, 0x8B	; 139
    3a16:	ff 4f       	sbci	r31, 0xFF	; 255
    3a18:	81 e0       	ldi	r24, 0x01	; 1
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	91 83       	std	Z+1, r25	; 0x01
    3a1e:	80 83       	st	Z, r24
    3a20:	64 c0       	rjmp	.+200    	; 0x3aea <OWNER_vidUserOptions+0x5b6>
	else if (__tmp > 65535)
    3a22:	fe 01       	movw	r30, r28
    3a24:	e9 58       	subi	r30, 0x89	; 137
    3a26:	ff 4f       	sbci	r31, 0xFF	; 255
    3a28:	60 81       	ld	r22, Z
    3a2a:	71 81       	ldd	r23, Z+1	; 0x01
    3a2c:	82 81       	ldd	r24, Z+2	; 0x02
    3a2e:	93 81       	ldd	r25, Z+3	; 0x03
    3a30:	20 e0       	ldi	r18, 0x00	; 0
    3a32:	3f ef       	ldi	r19, 0xFF	; 255
    3a34:	4f e7       	ldi	r20, 0x7F	; 127
    3a36:	57 e4       	ldi	r21, 0x47	; 71
    3a38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a3c:	18 16       	cp	r1, r24
    3a3e:	0c f0       	brlt	.+2      	; 0x3a42 <OWNER_vidUserOptions+0x50e>
    3a40:	43 c0       	rjmp	.+134    	; 0x3ac8 <OWNER_vidUserOptions+0x594>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a42:	fe 01       	movw	r30, r28
    3a44:	e5 58       	subi	r30, 0x85	; 133
    3a46:	ff 4f       	sbci	r31, 0xFF	; 255
    3a48:	60 81       	ld	r22, Z
    3a4a:	71 81       	ldd	r23, Z+1	; 0x01
    3a4c:	82 81       	ldd	r24, Z+2	; 0x02
    3a4e:	93 81       	ldd	r25, Z+3	; 0x03
    3a50:	20 e0       	ldi	r18, 0x00	; 0
    3a52:	30 e0       	ldi	r19, 0x00	; 0
    3a54:	40 e2       	ldi	r20, 0x20	; 32
    3a56:	51 e4       	ldi	r21, 0x41	; 65
    3a58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a5c:	dc 01       	movw	r26, r24
    3a5e:	cb 01       	movw	r24, r22
    3a60:	8e 01       	movw	r16, r28
    3a62:	0b 58       	subi	r16, 0x8B	; 139
    3a64:	1f 4f       	sbci	r17, 0xFF	; 255
    3a66:	bc 01       	movw	r22, r24
    3a68:	cd 01       	movw	r24, r26
    3a6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a6e:	dc 01       	movw	r26, r24
    3a70:	cb 01       	movw	r24, r22
    3a72:	f8 01       	movw	r30, r16
    3a74:	91 83       	std	Z+1, r25	; 0x01
    3a76:	80 83       	st	Z, r24
    3a78:	1f c0       	rjmp	.+62     	; 0x3ab8 <OWNER_vidUserOptions+0x584>
    3a7a:	fe 01       	movw	r30, r28
    3a7c:	ed 58       	subi	r30, 0x8D	; 141
    3a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a80:	80 e9       	ldi	r24, 0x90	; 144
    3a82:	91 e0       	ldi	r25, 0x01	; 1
    3a84:	91 83       	std	Z+1, r25	; 0x01
    3a86:	80 83       	st	Z, r24
    3a88:	fe 01       	movw	r30, r28
    3a8a:	ed 58       	subi	r30, 0x8D	; 141
    3a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8e:	80 81       	ld	r24, Z
    3a90:	91 81       	ldd	r25, Z+1	; 0x01
    3a92:	01 97       	sbiw	r24, 0x01	; 1
    3a94:	f1 f7       	brne	.-4      	; 0x3a92 <OWNER_vidUserOptions+0x55e>
    3a96:	fe 01       	movw	r30, r28
    3a98:	ed 58       	subi	r30, 0x8D	; 141
    3a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9c:	91 83       	std	Z+1, r25	; 0x01
    3a9e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aa0:	de 01       	movw	r26, r28
    3aa2:	ab 58       	subi	r26, 0x8B	; 139
    3aa4:	bf 4f       	sbci	r27, 0xFF	; 255
    3aa6:	fe 01       	movw	r30, r28
    3aa8:	eb 58       	subi	r30, 0x8B	; 139
    3aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    3aac:	80 81       	ld	r24, Z
    3aae:	91 81       	ldd	r25, Z+1	; 0x01
    3ab0:	01 97       	sbiw	r24, 0x01	; 1
    3ab2:	11 96       	adiw	r26, 0x01	; 1
    3ab4:	9c 93       	st	X, r25
    3ab6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ab8:	fe 01       	movw	r30, r28
    3aba:	eb 58       	subi	r30, 0x8B	; 139
    3abc:	ff 4f       	sbci	r31, 0xFF	; 255
    3abe:	80 81       	ld	r24, Z
    3ac0:	91 81       	ldd	r25, Z+1	; 0x01
    3ac2:	00 97       	sbiw	r24, 0x00	; 0
    3ac4:	d1 f6       	brne	.-76     	; 0x3a7a <OWNER_vidUserOptions+0x546>
    3ac6:	27 c0       	rjmp	.+78     	; 0x3b16 <OWNER_vidUserOptions+0x5e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ac8:	8e 01       	movw	r16, r28
    3aca:	0b 58       	subi	r16, 0x8B	; 139
    3acc:	1f 4f       	sbci	r17, 0xFF	; 255
    3ace:	fe 01       	movw	r30, r28
    3ad0:	e9 58       	subi	r30, 0x89	; 137
    3ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad4:	60 81       	ld	r22, Z
    3ad6:	71 81       	ldd	r23, Z+1	; 0x01
    3ad8:	82 81       	ldd	r24, Z+2	; 0x02
    3ada:	93 81       	ldd	r25, Z+3	; 0x03
    3adc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ae0:	dc 01       	movw	r26, r24
    3ae2:	cb 01       	movw	r24, r22
    3ae4:	f8 01       	movw	r30, r16
    3ae6:	91 83       	std	Z+1, r25	; 0x01
    3ae8:	80 83       	st	Z, r24
    3aea:	de 01       	movw	r26, r28
    3aec:	af 58       	subi	r26, 0x8F	; 143
    3aee:	bf 4f       	sbci	r27, 0xFF	; 255
    3af0:	fe 01       	movw	r30, r28
    3af2:	eb 58       	subi	r30, 0x8B	; 139
    3af4:	ff 4f       	sbci	r31, 0xFF	; 255
    3af6:	80 81       	ld	r24, Z
    3af8:	91 81       	ldd	r25, Z+1	; 0x01
    3afa:	8d 93       	st	X+, r24
    3afc:	9c 93       	st	X, r25
    3afe:	fe 01       	movw	r30, r28
    3b00:	ef 58       	subi	r30, 0x8F	; 143
    3b02:	ff 4f       	sbci	r31, 0xFF	; 255
    3b04:	80 81       	ld	r24, Z
    3b06:	91 81       	ldd	r25, Z+1	; 0x01
    3b08:	01 97       	sbiw	r24, 0x01	; 1
    3b0a:	f1 f7       	brne	.-4      	; 0x3b08 <OWNER_vidUserOptions+0x5d4>
    3b0c:	fe 01       	movw	r30, r28
    3b0e:	ef 58       	subi	r30, 0x8F	; 143
    3b10:	ff 4f       	sbci	r31, 0xFF	; 255
    3b12:	91 83       	std	Z+1, r25	; 0x01
    3b14:	80 83       	st	Z, r24
								_delay_ms(100);	//stand the system up to display start party message for 100 ms
								SPI_vidTransceive(PARTY_MODE_ACTIVE); //send to the slave a flag to party mode activate
    3b16:	81 e0       	ldi	r24, 0x01	; 1
    3b18:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_vidTransceive>
								OWNER_vidcounterDown(u8PartyDuration);
    3b1c:	80 91 2d 03 	lds	r24, 0x032D
    3b20:	0e 94 92 2b 	call	0x5724	; 0x5724 <OWNER_vidcounterDown>
    3b24:	fe 01       	movw	r30, r28
    3b26:	e3 59       	subi	r30, 0x93	; 147
    3b28:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2a:	80 e0       	ldi	r24, 0x00	; 0
    3b2c:	90 e0       	ldi	r25, 0x00	; 0
    3b2e:	a8 ec       	ldi	r26, 0xC8	; 200
    3b30:	b2 e4       	ldi	r27, 0x42	; 66
    3b32:	80 83       	st	Z, r24
    3b34:	91 83       	std	Z+1, r25	; 0x01
    3b36:	a2 83       	std	Z+2, r26	; 0x02
    3b38:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b3a:	8e 01       	movw	r16, r28
    3b3c:	07 59       	subi	r16, 0x97	; 151
    3b3e:	1f 4f       	sbci	r17, 0xFF	; 255
    3b40:	fe 01       	movw	r30, r28
    3b42:	e3 59       	subi	r30, 0x93	; 147
    3b44:	ff 4f       	sbci	r31, 0xFF	; 255
    3b46:	60 81       	ld	r22, Z
    3b48:	71 81       	ldd	r23, Z+1	; 0x01
    3b4a:	82 81       	ldd	r24, Z+2	; 0x02
    3b4c:	93 81       	ldd	r25, Z+3	; 0x03
    3b4e:	20 e0       	ldi	r18, 0x00	; 0
    3b50:	30 e0       	ldi	r19, 0x00	; 0
    3b52:	4a e7       	ldi	r20, 0x7A	; 122
    3b54:	55 e4       	ldi	r21, 0x45	; 69
    3b56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b5a:	dc 01       	movw	r26, r24
    3b5c:	cb 01       	movw	r24, r22
    3b5e:	f8 01       	movw	r30, r16
    3b60:	80 83       	st	Z, r24
    3b62:	91 83       	std	Z+1, r25	; 0x01
    3b64:	a2 83       	std	Z+2, r26	; 0x02
    3b66:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b68:	fe 01       	movw	r30, r28
    3b6a:	e7 59       	subi	r30, 0x97	; 151
    3b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6e:	60 81       	ld	r22, Z
    3b70:	71 81       	ldd	r23, Z+1	; 0x01
    3b72:	82 81       	ldd	r24, Z+2	; 0x02
    3b74:	93 81       	ldd	r25, Z+3	; 0x03
    3b76:	20 e0       	ldi	r18, 0x00	; 0
    3b78:	30 e0       	ldi	r19, 0x00	; 0
    3b7a:	40 e8       	ldi	r20, 0x80	; 128
    3b7c:	5f e3       	ldi	r21, 0x3F	; 63
    3b7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b82:	88 23       	and	r24, r24
    3b84:	44 f4       	brge	.+16     	; 0x3b96 <OWNER_vidUserOptions+0x662>
		__ticks = 1;
    3b86:	fe 01       	movw	r30, r28
    3b88:	e9 59       	subi	r30, 0x99	; 153
    3b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8c:	81 e0       	ldi	r24, 0x01	; 1
    3b8e:	90 e0       	ldi	r25, 0x00	; 0
    3b90:	91 83       	std	Z+1, r25	; 0x01
    3b92:	80 83       	st	Z, r24
    3b94:	64 c0       	rjmp	.+200    	; 0x3c5e <OWNER_vidUserOptions+0x72a>
	else if (__tmp > 65535)
    3b96:	fe 01       	movw	r30, r28
    3b98:	e7 59       	subi	r30, 0x97	; 151
    3b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9c:	60 81       	ld	r22, Z
    3b9e:	71 81       	ldd	r23, Z+1	; 0x01
    3ba0:	82 81       	ldd	r24, Z+2	; 0x02
    3ba2:	93 81       	ldd	r25, Z+3	; 0x03
    3ba4:	20 e0       	ldi	r18, 0x00	; 0
    3ba6:	3f ef       	ldi	r19, 0xFF	; 255
    3ba8:	4f e7       	ldi	r20, 0x7F	; 127
    3baa:	57 e4       	ldi	r21, 0x47	; 71
    3bac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bb0:	18 16       	cp	r1, r24
    3bb2:	0c f0       	brlt	.+2      	; 0x3bb6 <OWNER_vidUserOptions+0x682>
    3bb4:	43 c0       	rjmp	.+134    	; 0x3c3c <OWNER_vidUserOptions+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bb6:	fe 01       	movw	r30, r28
    3bb8:	e3 59       	subi	r30, 0x93	; 147
    3bba:	ff 4f       	sbci	r31, 0xFF	; 255
    3bbc:	60 81       	ld	r22, Z
    3bbe:	71 81       	ldd	r23, Z+1	; 0x01
    3bc0:	82 81       	ldd	r24, Z+2	; 0x02
    3bc2:	93 81       	ldd	r25, Z+3	; 0x03
    3bc4:	20 e0       	ldi	r18, 0x00	; 0
    3bc6:	30 e0       	ldi	r19, 0x00	; 0
    3bc8:	40 e2       	ldi	r20, 0x20	; 32
    3bca:	51 e4       	ldi	r21, 0x41	; 65
    3bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bd0:	dc 01       	movw	r26, r24
    3bd2:	cb 01       	movw	r24, r22
    3bd4:	8e 01       	movw	r16, r28
    3bd6:	09 59       	subi	r16, 0x99	; 153
    3bd8:	1f 4f       	sbci	r17, 0xFF	; 255
    3bda:	bc 01       	movw	r22, r24
    3bdc:	cd 01       	movw	r24, r26
    3bde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3be2:	dc 01       	movw	r26, r24
    3be4:	cb 01       	movw	r24, r22
    3be6:	f8 01       	movw	r30, r16
    3be8:	91 83       	std	Z+1, r25	; 0x01
    3bea:	80 83       	st	Z, r24
    3bec:	1f c0       	rjmp	.+62     	; 0x3c2c <OWNER_vidUserOptions+0x6f8>
    3bee:	fe 01       	movw	r30, r28
    3bf0:	eb 59       	subi	r30, 0x9B	; 155
    3bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf4:	80 e9       	ldi	r24, 0x90	; 144
    3bf6:	91 e0       	ldi	r25, 0x01	; 1
    3bf8:	91 83       	std	Z+1, r25	; 0x01
    3bfa:	80 83       	st	Z, r24
    3bfc:	fe 01       	movw	r30, r28
    3bfe:	eb 59       	subi	r30, 0x9B	; 155
    3c00:	ff 4f       	sbci	r31, 0xFF	; 255
    3c02:	80 81       	ld	r24, Z
    3c04:	91 81       	ldd	r25, Z+1	; 0x01
    3c06:	01 97       	sbiw	r24, 0x01	; 1
    3c08:	f1 f7       	brne	.-4      	; 0x3c06 <OWNER_vidUserOptions+0x6d2>
    3c0a:	fe 01       	movw	r30, r28
    3c0c:	eb 59       	subi	r30, 0x9B	; 155
    3c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c10:	91 83       	std	Z+1, r25	; 0x01
    3c12:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c14:	de 01       	movw	r26, r28
    3c16:	a9 59       	subi	r26, 0x99	; 153
    3c18:	bf 4f       	sbci	r27, 0xFF	; 255
    3c1a:	fe 01       	movw	r30, r28
    3c1c:	e9 59       	subi	r30, 0x99	; 153
    3c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c20:	80 81       	ld	r24, Z
    3c22:	91 81       	ldd	r25, Z+1	; 0x01
    3c24:	01 97       	sbiw	r24, 0x01	; 1
    3c26:	11 96       	adiw	r26, 0x01	; 1
    3c28:	9c 93       	st	X, r25
    3c2a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c2c:	fe 01       	movw	r30, r28
    3c2e:	e9 59       	subi	r30, 0x99	; 153
    3c30:	ff 4f       	sbci	r31, 0xFF	; 255
    3c32:	80 81       	ld	r24, Z
    3c34:	91 81       	ldd	r25, Z+1	; 0x01
    3c36:	00 97       	sbiw	r24, 0x00	; 0
    3c38:	d1 f6       	brne	.-76     	; 0x3bee <OWNER_vidUserOptions+0x6ba>
    3c3a:	27 c0       	rjmp	.+78     	; 0x3c8a <OWNER_vidUserOptions+0x756>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c3c:	8e 01       	movw	r16, r28
    3c3e:	09 59       	subi	r16, 0x99	; 153
    3c40:	1f 4f       	sbci	r17, 0xFF	; 255
    3c42:	fe 01       	movw	r30, r28
    3c44:	e7 59       	subi	r30, 0x97	; 151
    3c46:	ff 4f       	sbci	r31, 0xFF	; 255
    3c48:	60 81       	ld	r22, Z
    3c4a:	71 81       	ldd	r23, Z+1	; 0x01
    3c4c:	82 81       	ldd	r24, Z+2	; 0x02
    3c4e:	93 81       	ldd	r25, Z+3	; 0x03
    3c50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c54:	dc 01       	movw	r26, r24
    3c56:	cb 01       	movw	r24, r22
    3c58:	f8 01       	movw	r30, r16
    3c5a:	91 83       	std	Z+1, r25	; 0x01
    3c5c:	80 83       	st	Z, r24
    3c5e:	de 01       	movw	r26, r28
    3c60:	ad 59       	subi	r26, 0x9D	; 157
    3c62:	bf 4f       	sbci	r27, 0xFF	; 255
    3c64:	fe 01       	movw	r30, r28
    3c66:	e9 59       	subi	r30, 0x99	; 153
    3c68:	ff 4f       	sbci	r31, 0xFF	; 255
    3c6a:	80 81       	ld	r24, Z
    3c6c:	91 81       	ldd	r25, Z+1	; 0x01
    3c6e:	8d 93       	st	X+, r24
    3c70:	9c 93       	st	X, r25
    3c72:	fe 01       	movw	r30, r28
    3c74:	ed 59       	subi	r30, 0x9D	; 157
    3c76:	ff 4f       	sbci	r31, 0xFF	; 255
    3c78:	80 81       	ld	r24, Z
    3c7a:	91 81       	ldd	r25, Z+1	; 0x01
    3c7c:	01 97       	sbiw	r24, 0x01	; 1
    3c7e:	f1 f7       	brne	.-4      	; 0x3c7c <OWNER_vidUserOptions+0x748>
    3c80:	fe 01       	movw	r30, r28
    3c82:	ed 59       	subi	r30, 0x9D	; 157
    3c84:	ff 4f       	sbci	r31, 0xFF	; 255
    3c86:	91 83       	std	Z+1, r25	; 0x01
    3c88:	80 83       	st	Z, r24
								_delay_ms(100);
								SPI_vidTransceive(PARTY_TIME_OUT); //send party time out flag
    3c8a:	82 e0       	ldi	r24, 0x02	; 2
    3c8c:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_vidTransceive>
    3c90:	fe 01       	movw	r30, r28
    3c92:	e1 5a       	subi	r30, 0xA1	; 161
    3c94:	ff 4f       	sbci	r31, 0xFF	; 255
    3c96:	80 e0       	ldi	r24, 0x00	; 0
    3c98:	90 e0       	ldi	r25, 0x00	; 0
    3c9a:	a8 ec       	ldi	r26, 0xC8	; 200
    3c9c:	b2 e4       	ldi	r27, 0x42	; 66
    3c9e:	80 83       	st	Z, r24
    3ca0:	91 83       	std	Z+1, r25	; 0x01
    3ca2:	a2 83       	std	Z+2, r26	; 0x02
    3ca4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ca6:	8e 01       	movw	r16, r28
    3ca8:	05 5a       	subi	r16, 0xA5	; 165
    3caa:	1f 4f       	sbci	r17, 0xFF	; 255
    3cac:	fe 01       	movw	r30, r28
    3cae:	e1 5a       	subi	r30, 0xA1	; 161
    3cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb2:	60 81       	ld	r22, Z
    3cb4:	71 81       	ldd	r23, Z+1	; 0x01
    3cb6:	82 81       	ldd	r24, Z+2	; 0x02
    3cb8:	93 81       	ldd	r25, Z+3	; 0x03
    3cba:	20 e0       	ldi	r18, 0x00	; 0
    3cbc:	30 e0       	ldi	r19, 0x00	; 0
    3cbe:	4a e7       	ldi	r20, 0x7A	; 122
    3cc0:	55 e4       	ldi	r21, 0x45	; 69
    3cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cc6:	dc 01       	movw	r26, r24
    3cc8:	cb 01       	movw	r24, r22
    3cca:	f8 01       	movw	r30, r16
    3ccc:	80 83       	st	Z, r24
    3cce:	91 83       	std	Z+1, r25	; 0x01
    3cd0:	a2 83       	std	Z+2, r26	; 0x02
    3cd2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3cd4:	fe 01       	movw	r30, r28
    3cd6:	e5 5a       	subi	r30, 0xA5	; 165
    3cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cda:	60 81       	ld	r22, Z
    3cdc:	71 81       	ldd	r23, Z+1	; 0x01
    3cde:	82 81       	ldd	r24, Z+2	; 0x02
    3ce0:	93 81       	ldd	r25, Z+3	; 0x03
    3ce2:	20 e0       	ldi	r18, 0x00	; 0
    3ce4:	30 e0       	ldi	r19, 0x00	; 0
    3ce6:	40 e8       	ldi	r20, 0x80	; 128
    3ce8:	5f e3       	ldi	r21, 0x3F	; 63
    3cea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cee:	88 23       	and	r24, r24
    3cf0:	44 f4       	brge	.+16     	; 0x3d02 <OWNER_vidUserOptions+0x7ce>
		__ticks = 1;
    3cf2:	fe 01       	movw	r30, r28
    3cf4:	e7 5a       	subi	r30, 0xA7	; 167
    3cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf8:	81 e0       	ldi	r24, 0x01	; 1
    3cfa:	90 e0       	ldi	r25, 0x00	; 0
    3cfc:	91 83       	std	Z+1, r25	; 0x01
    3cfe:	80 83       	st	Z, r24
    3d00:	64 c0       	rjmp	.+200    	; 0x3dca <OWNER_vidUserOptions+0x896>
	else if (__tmp > 65535)
    3d02:	fe 01       	movw	r30, r28
    3d04:	e5 5a       	subi	r30, 0xA5	; 165
    3d06:	ff 4f       	sbci	r31, 0xFF	; 255
    3d08:	60 81       	ld	r22, Z
    3d0a:	71 81       	ldd	r23, Z+1	; 0x01
    3d0c:	82 81       	ldd	r24, Z+2	; 0x02
    3d0e:	93 81       	ldd	r25, Z+3	; 0x03
    3d10:	20 e0       	ldi	r18, 0x00	; 0
    3d12:	3f ef       	ldi	r19, 0xFF	; 255
    3d14:	4f e7       	ldi	r20, 0x7F	; 127
    3d16:	57 e4       	ldi	r21, 0x47	; 71
    3d18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d1c:	18 16       	cp	r1, r24
    3d1e:	0c f0       	brlt	.+2      	; 0x3d22 <OWNER_vidUserOptions+0x7ee>
    3d20:	43 c0       	rjmp	.+134    	; 0x3da8 <OWNER_vidUserOptions+0x874>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d22:	fe 01       	movw	r30, r28
    3d24:	e1 5a       	subi	r30, 0xA1	; 161
    3d26:	ff 4f       	sbci	r31, 0xFF	; 255
    3d28:	60 81       	ld	r22, Z
    3d2a:	71 81       	ldd	r23, Z+1	; 0x01
    3d2c:	82 81       	ldd	r24, Z+2	; 0x02
    3d2e:	93 81       	ldd	r25, Z+3	; 0x03
    3d30:	20 e0       	ldi	r18, 0x00	; 0
    3d32:	30 e0       	ldi	r19, 0x00	; 0
    3d34:	40 e2       	ldi	r20, 0x20	; 32
    3d36:	51 e4       	ldi	r21, 0x41	; 65
    3d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d3c:	dc 01       	movw	r26, r24
    3d3e:	cb 01       	movw	r24, r22
    3d40:	8e 01       	movw	r16, r28
    3d42:	07 5a       	subi	r16, 0xA7	; 167
    3d44:	1f 4f       	sbci	r17, 0xFF	; 255
    3d46:	bc 01       	movw	r22, r24
    3d48:	cd 01       	movw	r24, r26
    3d4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d4e:	dc 01       	movw	r26, r24
    3d50:	cb 01       	movw	r24, r22
    3d52:	f8 01       	movw	r30, r16
    3d54:	91 83       	std	Z+1, r25	; 0x01
    3d56:	80 83       	st	Z, r24
    3d58:	1f c0       	rjmp	.+62     	; 0x3d98 <OWNER_vidUserOptions+0x864>
    3d5a:	fe 01       	movw	r30, r28
    3d5c:	e9 5a       	subi	r30, 0xA9	; 169
    3d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d60:	80 e9       	ldi	r24, 0x90	; 144
    3d62:	91 e0       	ldi	r25, 0x01	; 1
    3d64:	91 83       	std	Z+1, r25	; 0x01
    3d66:	80 83       	st	Z, r24
    3d68:	fe 01       	movw	r30, r28
    3d6a:	e9 5a       	subi	r30, 0xA9	; 169
    3d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6e:	80 81       	ld	r24, Z
    3d70:	91 81       	ldd	r25, Z+1	; 0x01
    3d72:	01 97       	sbiw	r24, 0x01	; 1
    3d74:	f1 f7       	brne	.-4      	; 0x3d72 <OWNER_vidUserOptions+0x83e>
    3d76:	fe 01       	movw	r30, r28
    3d78:	e9 5a       	subi	r30, 0xA9	; 169
    3d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d7c:	91 83       	std	Z+1, r25	; 0x01
    3d7e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d80:	de 01       	movw	r26, r28
    3d82:	a7 5a       	subi	r26, 0xA7	; 167
    3d84:	bf 4f       	sbci	r27, 0xFF	; 255
    3d86:	fe 01       	movw	r30, r28
    3d88:	e7 5a       	subi	r30, 0xA7	; 167
    3d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8c:	80 81       	ld	r24, Z
    3d8e:	91 81       	ldd	r25, Z+1	; 0x01
    3d90:	01 97       	sbiw	r24, 0x01	; 1
    3d92:	11 96       	adiw	r26, 0x01	; 1
    3d94:	9c 93       	st	X, r25
    3d96:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d98:	fe 01       	movw	r30, r28
    3d9a:	e7 5a       	subi	r30, 0xA7	; 167
    3d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9e:	80 81       	ld	r24, Z
    3da0:	91 81       	ldd	r25, Z+1	; 0x01
    3da2:	00 97       	sbiw	r24, 0x00	; 0
    3da4:	d1 f6       	brne	.-76     	; 0x3d5a <OWNER_vidUserOptions+0x826>
    3da6:	27 c0       	rjmp	.+78     	; 0x3df6 <OWNER_vidUserOptions+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3da8:	8e 01       	movw	r16, r28
    3daa:	07 5a       	subi	r16, 0xA7	; 167
    3dac:	1f 4f       	sbci	r17, 0xFF	; 255
    3dae:	fe 01       	movw	r30, r28
    3db0:	e5 5a       	subi	r30, 0xA5	; 165
    3db2:	ff 4f       	sbci	r31, 0xFF	; 255
    3db4:	60 81       	ld	r22, Z
    3db6:	71 81       	ldd	r23, Z+1	; 0x01
    3db8:	82 81       	ldd	r24, Z+2	; 0x02
    3dba:	93 81       	ldd	r25, Z+3	; 0x03
    3dbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dc0:	dc 01       	movw	r26, r24
    3dc2:	cb 01       	movw	r24, r22
    3dc4:	f8 01       	movw	r30, r16
    3dc6:	91 83       	std	Z+1, r25	; 0x01
    3dc8:	80 83       	st	Z, r24
    3dca:	de 01       	movw	r26, r28
    3dcc:	ab 5a       	subi	r26, 0xAB	; 171
    3dce:	bf 4f       	sbci	r27, 0xFF	; 255
    3dd0:	fe 01       	movw	r30, r28
    3dd2:	e7 5a       	subi	r30, 0xA7	; 167
    3dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd6:	80 81       	ld	r24, Z
    3dd8:	91 81       	ldd	r25, Z+1	; 0x01
    3dda:	8d 93       	st	X+, r24
    3ddc:	9c 93       	st	X, r25
    3dde:	fe 01       	movw	r30, r28
    3de0:	eb 5a       	subi	r30, 0xAB	; 171
    3de2:	ff 4f       	sbci	r31, 0xFF	; 255
    3de4:	80 81       	ld	r24, Z
    3de6:	91 81       	ldd	r25, Z+1	; 0x01
    3de8:	01 97       	sbiw	r24, 0x01	; 1
    3dea:	f1 f7       	brne	.-4      	; 0x3de8 <OWNER_vidUserOptions+0x8b4>
    3dec:	fe 01       	movw	r30, r28
    3dee:	eb 5a       	subi	r30, 0xAB	; 171
    3df0:	ff 4f       	sbci	r31, 0xFF	; 255
    3df2:	91 83       	std	Z+1, r25	; 0x01
    3df4:	80 83       	st	Z, r24
					//			LCD_enuGoTo(LCD_u8_ROW0, LCD_u8_COLUMN5); //move the cursor to the middle of first row
					//			LCD_enuSendString(" PARTY TIME OUT ");
					//			LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN3); //move the cursor to the middle of second row
					//			LCD_enuSendString("");
								_delay_ms(100);
								LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);	//clear the LCD screen
    3df6:	81 e0       	ldi	r24, 0x01	; 1
    3df8:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
								LCD_enuGoTo(LCD_u8_ROW0, LCD_u8_COLUMN5); //move the cursor to the middle of first row
    3dfc:	80 e0       	ldi	r24, 0x00	; 0
    3dfe:	65 e0       	ldi	r22, 0x05	; 5
    3e00:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
								LCD_enuSendString("RETURN");
    3e04:	88 ea       	ldi	r24, 0xA8	; 168
    3e06:	91 e0       	ldi	r25, 0x01	; 1
    3e08:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
								LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN2); //move the cursor to the middle of second row
    3e0c:	81 e0       	ldi	r24, 0x01	; 1
    3e0e:	62 e0       	ldi	r22, 0x02	; 2
    3e10:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
								LCD_enuSendString("NORMAL MODE");
    3e14:	8f ea       	ldi	r24, 0xAF	; 175
    3e16:	91 e0       	ldi	r25, 0x01	; 1
    3e18:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
    3e1c:	fe 01       	movw	r30, r28
    3e1e:	ef 5a       	subi	r30, 0xAF	; 175
    3e20:	ff 4f       	sbci	r31, 0xFF	; 255
    3e22:	80 e0       	ldi	r24, 0x00	; 0
    3e24:	90 e0       	ldi	r25, 0x00	; 0
    3e26:	a8 ec       	ldi	r26, 0xC8	; 200
    3e28:	b2 e4       	ldi	r27, 0x42	; 66
    3e2a:	80 83       	st	Z, r24
    3e2c:	91 83       	std	Z+1, r25	; 0x01
    3e2e:	a2 83       	std	Z+2, r26	; 0x02
    3e30:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e32:	8e 01       	movw	r16, r28
    3e34:	03 5b       	subi	r16, 0xB3	; 179
    3e36:	1f 4f       	sbci	r17, 0xFF	; 255
    3e38:	fe 01       	movw	r30, r28
    3e3a:	ef 5a       	subi	r30, 0xAF	; 175
    3e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3e:	60 81       	ld	r22, Z
    3e40:	71 81       	ldd	r23, Z+1	; 0x01
    3e42:	82 81       	ldd	r24, Z+2	; 0x02
    3e44:	93 81       	ldd	r25, Z+3	; 0x03
    3e46:	20 e0       	ldi	r18, 0x00	; 0
    3e48:	30 e0       	ldi	r19, 0x00	; 0
    3e4a:	4a e7       	ldi	r20, 0x7A	; 122
    3e4c:	55 e4       	ldi	r21, 0x45	; 69
    3e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e52:	dc 01       	movw	r26, r24
    3e54:	cb 01       	movw	r24, r22
    3e56:	f8 01       	movw	r30, r16
    3e58:	80 83       	st	Z, r24
    3e5a:	91 83       	std	Z+1, r25	; 0x01
    3e5c:	a2 83       	std	Z+2, r26	; 0x02
    3e5e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e60:	fe 01       	movw	r30, r28
    3e62:	e3 5b       	subi	r30, 0xB3	; 179
    3e64:	ff 4f       	sbci	r31, 0xFF	; 255
    3e66:	60 81       	ld	r22, Z
    3e68:	71 81       	ldd	r23, Z+1	; 0x01
    3e6a:	82 81       	ldd	r24, Z+2	; 0x02
    3e6c:	93 81       	ldd	r25, Z+3	; 0x03
    3e6e:	20 e0       	ldi	r18, 0x00	; 0
    3e70:	30 e0       	ldi	r19, 0x00	; 0
    3e72:	40 e8       	ldi	r20, 0x80	; 128
    3e74:	5f e3       	ldi	r21, 0x3F	; 63
    3e76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e7a:	88 23       	and	r24, r24
    3e7c:	44 f4       	brge	.+16     	; 0x3e8e <OWNER_vidUserOptions+0x95a>
		__ticks = 1;
    3e7e:	fe 01       	movw	r30, r28
    3e80:	e5 5b       	subi	r30, 0xB5	; 181
    3e82:	ff 4f       	sbci	r31, 0xFF	; 255
    3e84:	81 e0       	ldi	r24, 0x01	; 1
    3e86:	90 e0       	ldi	r25, 0x00	; 0
    3e88:	91 83       	std	Z+1, r25	; 0x01
    3e8a:	80 83       	st	Z, r24
    3e8c:	64 c0       	rjmp	.+200    	; 0x3f56 <OWNER_vidUserOptions+0xa22>
	else if (__tmp > 65535)
    3e8e:	fe 01       	movw	r30, r28
    3e90:	e3 5b       	subi	r30, 0xB3	; 179
    3e92:	ff 4f       	sbci	r31, 0xFF	; 255
    3e94:	60 81       	ld	r22, Z
    3e96:	71 81       	ldd	r23, Z+1	; 0x01
    3e98:	82 81       	ldd	r24, Z+2	; 0x02
    3e9a:	93 81       	ldd	r25, Z+3	; 0x03
    3e9c:	20 e0       	ldi	r18, 0x00	; 0
    3e9e:	3f ef       	ldi	r19, 0xFF	; 255
    3ea0:	4f e7       	ldi	r20, 0x7F	; 127
    3ea2:	57 e4       	ldi	r21, 0x47	; 71
    3ea4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ea8:	18 16       	cp	r1, r24
    3eaa:	0c f0       	brlt	.+2      	; 0x3eae <OWNER_vidUserOptions+0x97a>
    3eac:	43 c0       	rjmp	.+134    	; 0x3f34 <OWNER_vidUserOptions+0xa00>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3eae:	fe 01       	movw	r30, r28
    3eb0:	ef 5a       	subi	r30, 0xAF	; 175
    3eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb4:	60 81       	ld	r22, Z
    3eb6:	71 81       	ldd	r23, Z+1	; 0x01
    3eb8:	82 81       	ldd	r24, Z+2	; 0x02
    3eba:	93 81       	ldd	r25, Z+3	; 0x03
    3ebc:	20 e0       	ldi	r18, 0x00	; 0
    3ebe:	30 e0       	ldi	r19, 0x00	; 0
    3ec0:	40 e2       	ldi	r20, 0x20	; 32
    3ec2:	51 e4       	ldi	r21, 0x41	; 65
    3ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ec8:	dc 01       	movw	r26, r24
    3eca:	cb 01       	movw	r24, r22
    3ecc:	8e 01       	movw	r16, r28
    3ece:	05 5b       	subi	r16, 0xB5	; 181
    3ed0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ed2:	bc 01       	movw	r22, r24
    3ed4:	cd 01       	movw	r24, r26
    3ed6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eda:	dc 01       	movw	r26, r24
    3edc:	cb 01       	movw	r24, r22
    3ede:	f8 01       	movw	r30, r16
    3ee0:	91 83       	std	Z+1, r25	; 0x01
    3ee2:	80 83       	st	Z, r24
    3ee4:	1f c0       	rjmp	.+62     	; 0x3f24 <OWNER_vidUserOptions+0x9f0>
    3ee6:	fe 01       	movw	r30, r28
    3ee8:	e7 5b       	subi	r30, 0xB7	; 183
    3eea:	ff 4f       	sbci	r31, 0xFF	; 255
    3eec:	80 e9       	ldi	r24, 0x90	; 144
    3eee:	91 e0       	ldi	r25, 0x01	; 1
    3ef0:	91 83       	std	Z+1, r25	; 0x01
    3ef2:	80 83       	st	Z, r24
    3ef4:	fe 01       	movw	r30, r28
    3ef6:	e7 5b       	subi	r30, 0xB7	; 183
    3ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    3efa:	80 81       	ld	r24, Z
    3efc:	91 81       	ldd	r25, Z+1	; 0x01
    3efe:	01 97       	sbiw	r24, 0x01	; 1
    3f00:	f1 f7       	brne	.-4      	; 0x3efe <OWNER_vidUserOptions+0x9ca>
    3f02:	fe 01       	movw	r30, r28
    3f04:	e7 5b       	subi	r30, 0xB7	; 183
    3f06:	ff 4f       	sbci	r31, 0xFF	; 255
    3f08:	91 83       	std	Z+1, r25	; 0x01
    3f0a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f0c:	de 01       	movw	r26, r28
    3f0e:	a5 5b       	subi	r26, 0xB5	; 181
    3f10:	bf 4f       	sbci	r27, 0xFF	; 255
    3f12:	fe 01       	movw	r30, r28
    3f14:	e5 5b       	subi	r30, 0xB5	; 181
    3f16:	ff 4f       	sbci	r31, 0xFF	; 255
    3f18:	80 81       	ld	r24, Z
    3f1a:	91 81       	ldd	r25, Z+1	; 0x01
    3f1c:	01 97       	sbiw	r24, 0x01	; 1
    3f1e:	11 96       	adiw	r26, 0x01	; 1
    3f20:	9c 93       	st	X, r25
    3f22:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f24:	fe 01       	movw	r30, r28
    3f26:	e5 5b       	subi	r30, 0xB5	; 181
    3f28:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2a:	80 81       	ld	r24, Z
    3f2c:	91 81       	ldd	r25, Z+1	; 0x01
    3f2e:	00 97       	sbiw	r24, 0x00	; 0
    3f30:	d1 f6       	brne	.-76     	; 0x3ee6 <OWNER_vidUserOptions+0x9b2>
    3f32:	2c c0       	rjmp	.+88     	; 0x3f8c <OWNER_vidUserOptions+0xa58>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f34:	8e 01       	movw	r16, r28
    3f36:	05 5b       	subi	r16, 0xB5	; 181
    3f38:	1f 4f       	sbci	r17, 0xFF	; 255
    3f3a:	fe 01       	movw	r30, r28
    3f3c:	e3 5b       	subi	r30, 0xB3	; 179
    3f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f40:	60 81       	ld	r22, Z
    3f42:	71 81       	ldd	r23, Z+1	; 0x01
    3f44:	82 81       	ldd	r24, Z+2	; 0x02
    3f46:	93 81       	ldd	r25, Z+3	; 0x03
    3f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f4c:	dc 01       	movw	r26, r24
    3f4e:	cb 01       	movw	r24, r22
    3f50:	f8 01       	movw	r30, r16
    3f52:	91 83       	std	Z+1, r25	; 0x01
    3f54:	80 83       	st	Z, r24
    3f56:	de 01       	movw	r26, r28
    3f58:	a9 5b       	subi	r26, 0xB9	; 185
    3f5a:	bf 4f       	sbci	r27, 0xFF	; 255
    3f5c:	fe 01       	movw	r30, r28
    3f5e:	e5 5b       	subi	r30, 0xB5	; 181
    3f60:	ff 4f       	sbci	r31, 0xFF	; 255
    3f62:	80 81       	ld	r24, Z
    3f64:	91 81       	ldd	r25, Z+1	; 0x01
    3f66:	11 96       	adiw	r26, 0x01	; 1
    3f68:	9c 93       	st	X, r25
    3f6a:	8e 93       	st	-X, r24
    3f6c:	fe 01       	movw	r30, r28
    3f6e:	e9 5b       	subi	r30, 0xB9	; 185
    3f70:	ff 4f       	sbci	r31, 0xFF	; 255
    3f72:	80 81       	ld	r24, Z
    3f74:	91 81       	ldd	r25, Z+1	; 0x01
    3f76:	01 97       	sbiw	r24, 0x01	; 1
    3f78:	f1 f7       	brne	.-4      	; 0x3f76 <OWNER_vidUserOptions+0xa42>
    3f7a:	fe 01       	movw	r30, r28
    3f7c:	e9 5b       	subi	r30, 0xB9	; 185
    3f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f80:	91 83       	std	Z+1, r25	; 0x01
    3f82:	80 83       	st	Z, r24
    3f84:	03 c0       	rjmp	.+6      	; 0x3f8c <OWNER_vidUserOptions+0xa58>
								_delay_ms(100);
								break;
						/* in case user press on a key have a value not refer to available option
						   assign the initial value in the pressed key variable to act like no pressed key case */
							default:
								u8keyPressed = WAITING_PRESS_KEY;
    3f86:	8f ef       	ldi	r24, 0xFF	; 255
    3f88:	80 93 ec 02 	sts	0x02EC, r24
					LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);		//clear LCD screen
					LCD_enuSendString("1.Normal Mode");		//print the available options
					LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN0);
					LCD_enuSendString("2.Party Mode");
					u8keyPressed = WAITING_PRESS_KEY;	//assign the initial value refer to the application waiting the user to enter a value
					while(u8keyPressed == WAITING_PRESS_KEY){//loop until user select option
    3f8c:	80 91 ec 02 	lds	r24, 0x02EC
    3f90:	8f 3f       	cpi	r24, 0xFF	; 255
    3f92:	09 f4       	brne	.+2      	; 0x3f96 <OWNER_vidUserOptions+0xa62>
    3f94:	ef cb       	rjmp	.-2082   	; 0x3774 <OWNER_vidUserOptions+0x240>
    3f96:	ed c2       	rjmp	.+1498   	; 0x4572 <OWNER_vidUserOptions+0x103e>
			 * have internal options --> master room, tenant room
			 * use external function for each internal option
			 * */
				case ROOMS_CONTROL:
					/* let user select one room */
					LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);		//clear LCD screen
    3f98:	81 e0       	ldi	r24, 0x01	; 1
    3f9a:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
					LCD_enuSendString("1.Master");		//print the available options
    3f9e:	8b eb       	ldi	r24, 0xBB	; 187
    3fa0:	91 e0       	ldi	r25, 0x01	; 1
    3fa2:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
					LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN0);
    3fa6:	81 e0       	ldi	r24, 0x01	; 1
    3fa8:	60 e0       	ldi	r22, 0x00	; 0
    3faa:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
					LCD_enuSendString("2.Tenant  0:BACK");
    3fae:	84 ec       	ldi	r24, 0xC4	; 196
    3fb0:	91 e0       	ldi	r25, 0x01	; 1
    3fb2:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
					u8keyPressed = WAITING_PRESS_KEY;		//assign the initial value .. no pressed key
    3fb6:	8f ef       	ldi	r24, 0xFF	; 255
    3fb8:	80 93 ec 02 	sts	0x02EC, r24
    3fbc:	33 c0       	rjmp	.+102    	; 0x4024 <OWNER_vidUserOptions+0xaf0>
					while(u8keyPressed == WAITING_PRESS_KEY){//loop until user select option
						KEYPAD_vidGetPressedKey(&u8keyPressed);	 //get the pressed key value
    3fbe:	8c ee       	ldi	r24, 0xEC	; 236
    3fc0:	92 e0       	ldi	r25, 0x02	; 2
    3fc2:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <KEYPAD_vidGetPressedKey>
						switch(u8keyPressed){
    3fc6:	80 91 ec 02 	lds	r24, 0x02EC
    3fca:	28 2f       	mov	r18, r24
    3fcc:	30 e0       	ldi	r19, 0x00	; 0
    3fce:	c0 56       	subi	r28, 0x60	; 96
    3fd0:	df 4f       	sbci	r29, 0xFF	; 255
    3fd2:	39 83       	std	Y+1, r19	; 0x01
    3fd4:	28 83       	st	Y, r18
    3fd6:	c0 5a       	subi	r28, 0xA0	; 160
    3fd8:	d0 40       	sbci	r29, 0x00	; 0
    3fda:	c0 56       	subi	r28, 0x60	; 96
    3fdc:	df 4f       	sbci	r29, 0xFF	; 255
    3fde:	88 81       	ld	r24, Y
    3fe0:	99 81       	ldd	r25, Y+1	; 0x01
    3fe2:	c0 5a       	subi	r28, 0xA0	; 160
    3fe4:	d0 40       	sbci	r29, 0x00	; 0
    3fe6:	81 33       	cpi	r24, 0x31	; 49
    3fe8:	91 05       	cpc	r25, r1
    3fea:	99 f0       	breq	.+38     	; 0x4012 <OWNER_vidUserOptions+0xade>
    3fec:	c0 56       	subi	r28, 0x60	; 96
    3fee:	df 4f       	sbci	r29, 0xFF	; 255
    3ff0:	e8 81       	ld	r30, Y
    3ff2:	f9 81       	ldd	r31, Y+1	; 0x01
    3ff4:	c0 5a       	subi	r28, 0xA0	; 160
    3ff6:	d0 40       	sbci	r29, 0x00	; 0
    3ff8:	e2 33       	cpi	r30, 0x32	; 50
    3ffa:	f1 05       	cpc	r31, r1
    3ffc:	69 f0       	breq	.+26     	; 0x4018 <OWNER_vidUserOptions+0xae4>
    3ffe:	c0 56       	subi	r28, 0x60	; 96
    4000:	df 4f       	sbci	r29, 0xFF	; 255
    4002:	28 81       	ld	r18, Y
    4004:	39 81       	ldd	r19, Y+1	; 0x01
    4006:	c0 5a       	subi	r28, 0xA0	; 160
    4008:	d0 40       	sbci	r29, 0x00	; 0
    400a:	20 33       	cpi	r18, 0x30	; 48
    400c:	31 05       	cpc	r19, r1
    400e:	51 f0       	breq	.+20     	; 0x4024 <OWNER_vidUserOptions+0xaf0>
    4010:	06 c0       	rjmp	.+12     	; 0x401e <OWNER_vidUserOptions+0xaea>
						/* if user select the master room .. call the concerned function */
							case MASTER_ROOM:
								OWNER_vidMasterRoom();
    4012:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <OWNER_vidMasterRoom>
    4016:	06 c0       	rjmp	.+12     	; 0x4024 <OWNER_vidUserOptions+0xaf0>
								break;
						/* if user select the tenant room .. call the concerned function */
							case TENENT_ROOM:
								OWNER_vidTenantRoom();
    4018:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <OWNER_vidTenantRoom>
    401c:	03 c0       	rjmp	.+6      	; 0x4024 <OWNER_vidUserOptions+0xaf0>
							case BACK:
								continue;
						/* in case user press on a key have a value not refer to available option
					   assign the initial value in the pressed key variable to act like no pressed key case */
							default:
								u8keyPressed = WAITING_PRESS_KEY;
    401e:	8f ef       	ldi	r24, 0xFF	; 255
    4020:	80 93 ec 02 	sts	0x02EC, r24
					LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);		//clear LCD screen
					LCD_enuSendString("1.Master");		//print the available options
					LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN0);
					LCD_enuSendString("2.Tenant  0:BACK");
					u8keyPressed = WAITING_PRESS_KEY;		//assign the initial value .. no pressed key
					while(u8keyPressed == WAITING_PRESS_KEY){//loop until user select option
    4024:	80 91 ec 02 	lds	r24, 0x02EC
    4028:	8f 3f       	cpi	r24, 0xFF	; 255
    402a:	49 f2       	breq	.-110    	; 0x3fbe <OWNER_vidUserOptions+0xa8a>
    402c:	a2 c2       	rjmp	.+1348   	; 0x4572 <OWNER_vidUserOptions+0x103e>
			/* third option: control garage
			 * use external function to drive this module
			 * */
				case GARAGE_CONTROL:
					/* call the garage module concerned function  */
					OWNER_vidGarageControl();
    402e:	0e 94 a5 28 	call	0x514a	; 0x514a <OWNER_vidGarageControl>
    4032:	9f c2       	rjmp	.+1342   	; 0x4572 <OWNER_vidUserOptions+0x103e>
					break;
			/* fourth option: control temperature
			 * use external function to set the temperature
			 * */
				case TEMPERATURE_CONTROL:
					LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
    4034:	81 e0       	ldi	r24, 0x01	; 1
    4036:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
					LCD_enuSendCustomCharacter(Local_au8CustomCharacterTemperature, LCD_u8_CGRAM_BLOCK_3, LCD_u8_ROW0, LCD_u8_COLUMN0);
    403a:	ce 01       	movw	r24, r28
    403c:	88 56       	subi	r24, 0x68	; 104
    403e:	9f 4f       	sbci	r25, 0xFF	; 255
    4040:	62 e0       	ldi	r22, 0x02	; 2
    4042:	40 e0       	ldi	r20, 0x00	; 0
    4044:	20 e0       	ldi	r18, 0x00	; 0
    4046:	0e 94 13 0c 	call	0x1826	; 0x1826 <LCD_enuSendCustomCharacter>
					LCD_enuSendString(" Temperature");
    404a:	85 ed       	ldi	r24, 0xD5	; 213
    404c:	91 e0       	ldi	r25, 0x01	; 1
    404e:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
					LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN2);
    4052:	81 e0       	ldi	r24, 0x01	; 1
    4054:	62 e0       	ldi	r22, 0x02	; 2
    4056:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
					LCD_enuSendString("Setting");
    405a:	82 ee       	ldi	r24, 0xE2	; 226
    405c:	91 e0       	ldi	r25, 0x01	; 1
    405e:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
    4062:	fe 01       	movw	r30, r28
    4064:	ed 5b       	subi	r30, 0xBD	; 189
    4066:	ff 4f       	sbci	r31, 0xFF	; 255
    4068:	80 e0       	ldi	r24, 0x00	; 0
    406a:	90 e0       	ldi	r25, 0x00	; 0
    406c:	a6 e1       	ldi	r26, 0x16	; 22
    406e:	b3 e4       	ldi	r27, 0x43	; 67
    4070:	80 83       	st	Z, r24
    4072:	91 83       	std	Z+1, r25	; 0x01
    4074:	a2 83       	std	Z+2, r26	; 0x02
    4076:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4078:	8e 01       	movw	r16, r28
    407a:	01 5c       	subi	r16, 0xC1	; 193
    407c:	1f 4f       	sbci	r17, 0xFF	; 255
    407e:	fe 01       	movw	r30, r28
    4080:	ed 5b       	subi	r30, 0xBD	; 189
    4082:	ff 4f       	sbci	r31, 0xFF	; 255
    4084:	60 81       	ld	r22, Z
    4086:	71 81       	ldd	r23, Z+1	; 0x01
    4088:	82 81       	ldd	r24, Z+2	; 0x02
    408a:	93 81       	ldd	r25, Z+3	; 0x03
    408c:	20 e0       	ldi	r18, 0x00	; 0
    408e:	30 e0       	ldi	r19, 0x00	; 0
    4090:	4a e7       	ldi	r20, 0x7A	; 122
    4092:	55 e4       	ldi	r21, 0x45	; 69
    4094:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4098:	dc 01       	movw	r26, r24
    409a:	cb 01       	movw	r24, r22
    409c:	f8 01       	movw	r30, r16
    409e:	80 83       	st	Z, r24
    40a0:	91 83       	std	Z+1, r25	; 0x01
    40a2:	a2 83       	std	Z+2, r26	; 0x02
    40a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    40a6:	fe 01       	movw	r30, r28
    40a8:	ff 96       	adiw	r30, 0x3f	; 63
    40aa:	60 81       	ld	r22, Z
    40ac:	71 81       	ldd	r23, Z+1	; 0x01
    40ae:	82 81       	ldd	r24, Z+2	; 0x02
    40b0:	93 81       	ldd	r25, Z+3	; 0x03
    40b2:	20 e0       	ldi	r18, 0x00	; 0
    40b4:	30 e0       	ldi	r19, 0x00	; 0
    40b6:	40 e8       	ldi	r20, 0x80	; 128
    40b8:	5f e3       	ldi	r21, 0x3F	; 63
    40ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    40be:	88 23       	and	r24, r24
    40c0:	2c f4       	brge	.+10     	; 0x40cc <OWNER_vidUserOptions+0xb98>
		__ticks = 1;
    40c2:	81 e0       	ldi	r24, 0x01	; 1
    40c4:	90 e0       	ldi	r25, 0x00	; 0
    40c6:	9e af       	std	Y+62, r25	; 0x3e
    40c8:	8d af       	std	Y+61, r24	; 0x3d
    40ca:	46 c0       	rjmp	.+140    	; 0x4158 <OWNER_vidUserOptions+0xc24>
	else if (__tmp > 65535)
    40cc:	fe 01       	movw	r30, r28
    40ce:	ff 96       	adiw	r30, 0x3f	; 63
    40d0:	60 81       	ld	r22, Z
    40d2:	71 81       	ldd	r23, Z+1	; 0x01
    40d4:	82 81       	ldd	r24, Z+2	; 0x02
    40d6:	93 81       	ldd	r25, Z+3	; 0x03
    40d8:	20 e0       	ldi	r18, 0x00	; 0
    40da:	3f ef       	ldi	r19, 0xFF	; 255
    40dc:	4f e7       	ldi	r20, 0x7F	; 127
    40de:	57 e4       	ldi	r21, 0x47	; 71
    40e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    40e4:	18 16       	cp	r1, r24
    40e6:	64 f5       	brge	.+88     	; 0x4140 <OWNER_vidUserOptions+0xc0c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40e8:	fe 01       	movw	r30, r28
    40ea:	ed 5b       	subi	r30, 0xBD	; 189
    40ec:	ff 4f       	sbci	r31, 0xFF	; 255
    40ee:	60 81       	ld	r22, Z
    40f0:	71 81       	ldd	r23, Z+1	; 0x01
    40f2:	82 81       	ldd	r24, Z+2	; 0x02
    40f4:	93 81       	ldd	r25, Z+3	; 0x03
    40f6:	20 e0       	ldi	r18, 0x00	; 0
    40f8:	30 e0       	ldi	r19, 0x00	; 0
    40fa:	40 e2       	ldi	r20, 0x20	; 32
    40fc:	51 e4       	ldi	r21, 0x41	; 65
    40fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4102:	dc 01       	movw	r26, r24
    4104:	cb 01       	movw	r24, r22
    4106:	bc 01       	movw	r22, r24
    4108:	cd 01       	movw	r24, r26
    410a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    410e:	dc 01       	movw	r26, r24
    4110:	cb 01       	movw	r24, r22
    4112:	9e af       	std	Y+62, r25	; 0x3e
    4114:	8d af       	std	Y+61, r24	; 0x3d
    4116:	0f c0       	rjmp	.+30     	; 0x4136 <OWNER_vidUserOptions+0xc02>
    4118:	80 e9       	ldi	r24, 0x90	; 144
    411a:	91 e0       	ldi	r25, 0x01	; 1
    411c:	9c af       	std	Y+60, r25	; 0x3c
    411e:	8b af       	std	Y+59, r24	; 0x3b
    4120:	8b ad       	ldd	r24, Y+59	; 0x3b
    4122:	9c ad       	ldd	r25, Y+60	; 0x3c
    4124:	01 97       	sbiw	r24, 0x01	; 1
    4126:	f1 f7       	brne	.-4      	; 0x4124 <OWNER_vidUserOptions+0xbf0>
    4128:	9c af       	std	Y+60, r25	; 0x3c
    412a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    412c:	8d ad       	ldd	r24, Y+61	; 0x3d
    412e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4130:	01 97       	sbiw	r24, 0x01	; 1
    4132:	9e af       	std	Y+62, r25	; 0x3e
    4134:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4136:	8d ad       	ldd	r24, Y+61	; 0x3d
    4138:	9e ad       	ldd	r25, Y+62	; 0x3e
    413a:	00 97       	sbiw	r24, 0x00	; 0
    413c:	69 f7       	brne	.-38     	; 0x4118 <OWNER_vidUserOptions+0xbe4>
    413e:	16 c0       	rjmp	.+44     	; 0x416c <OWNER_vidUserOptions+0xc38>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4140:	fe 01       	movw	r30, r28
    4142:	ff 96       	adiw	r30, 0x3f	; 63
    4144:	60 81       	ld	r22, Z
    4146:	71 81       	ldd	r23, Z+1	; 0x01
    4148:	82 81       	ldd	r24, Z+2	; 0x02
    414a:	93 81       	ldd	r25, Z+3	; 0x03
    414c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4150:	dc 01       	movw	r26, r24
    4152:	cb 01       	movw	r24, r22
    4154:	9e af       	std	Y+62, r25	; 0x3e
    4156:	8d af       	std	Y+61, r24	; 0x3d
    4158:	8d ad       	ldd	r24, Y+61	; 0x3d
    415a:	9e ad       	ldd	r25, Y+62	; 0x3e
    415c:	9a af       	std	Y+58, r25	; 0x3a
    415e:	89 af       	std	Y+57, r24	; 0x39
    4160:	89 ad       	ldd	r24, Y+57	; 0x39
    4162:	9a ad       	ldd	r25, Y+58	; 0x3a
    4164:	01 97       	sbiw	r24, 0x01	; 1
    4166:	f1 f7       	brne	.-4      	; 0x4164 <OWNER_vidUserOptions+0xc30>
    4168:	9a af       	std	Y+58, r25	; 0x3a
    416a:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(150);
					LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
    416c:	81 e0       	ldi	r24, 0x01	; 1
    416e:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
					LCD_enuSendString("Set Min Temp:__");
    4172:	8a ee       	ldi	r24, 0xEA	; 234
    4174:	91 e0       	ldi	r25, 0x01	; 1
    4176:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
					LCD_enuSendCharacter(DEGREE_SIGN);
    417a:	8f ed       	ldi	r24, 0xDF	; 223
    417c:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LCD_enuSendCharacter>
					/* get the minimum temperature from the user by calling the concerned function */
					Local_u8minTemperature = OWNER_u8getTemperature(MIN_TEMP);
    4180:	80 e0       	ldi	r24, 0x00	; 0
    4182:	0e 94 2d 2c 	call	0x585a	; 0x585a <OWNER_u8getTemperature>
    4186:	fe 01       	movw	r30, r28
    4188:	e3 57       	subi	r30, 0x73	; 115
    418a:	ff 4f       	sbci	r31, 0xFF	; 255
    418c:	80 83       	st	Z, r24
					SPI_vidTransceive(SEND_TEMP_MIN);
    418e:	8f e8       	ldi	r24, 0x8F	; 143
    4190:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_vidTransceive>
    4194:	80 e0       	ldi	r24, 0x00	; 0
    4196:	90 e0       	ldi	r25, 0x00	; 0
    4198:	a8 ec       	ldi	r26, 0xC8	; 200
    419a:	b2 e4       	ldi	r27, 0x42	; 66
    419c:	8d ab       	std	Y+53, r24	; 0x35
    419e:	9e ab       	std	Y+54, r25	; 0x36
    41a0:	af ab       	std	Y+55, r26	; 0x37
    41a2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41a4:	6d a9       	ldd	r22, Y+53	; 0x35
    41a6:	7e a9       	ldd	r23, Y+54	; 0x36
    41a8:	8f a9       	ldd	r24, Y+55	; 0x37
    41aa:	98 ad       	ldd	r25, Y+56	; 0x38
    41ac:	20 e0       	ldi	r18, 0x00	; 0
    41ae:	30 e0       	ldi	r19, 0x00	; 0
    41b0:	4a e7       	ldi	r20, 0x7A	; 122
    41b2:	55 e4       	ldi	r21, 0x45	; 69
    41b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41b8:	dc 01       	movw	r26, r24
    41ba:	cb 01       	movw	r24, r22
    41bc:	89 ab       	std	Y+49, r24	; 0x31
    41be:	9a ab       	std	Y+50, r25	; 0x32
    41c0:	ab ab       	std	Y+51, r26	; 0x33
    41c2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    41c4:	69 a9       	ldd	r22, Y+49	; 0x31
    41c6:	7a a9       	ldd	r23, Y+50	; 0x32
    41c8:	8b a9       	ldd	r24, Y+51	; 0x33
    41ca:	9c a9       	ldd	r25, Y+52	; 0x34
    41cc:	20 e0       	ldi	r18, 0x00	; 0
    41ce:	30 e0       	ldi	r19, 0x00	; 0
    41d0:	40 e8       	ldi	r20, 0x80	; 128
    41d2:	5f e3       	ldi	r21, 0x3F	; 63
    41d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    41d8:	88 23       	and	r24, r24
    41da:	2c f4       	brge	.+10     	; 0x41e6 <OWNER_vidUserOptions+0xcb2>
		__ticks = 1;
    41dc:	81 e0       	ldi	r24, 0x01	; 1
    41de:	90 e0       	ldi	r25, 0x00	; 0
    41e0:	98 ab       	std	Y+48, r25	; 0x30
    41e2:	8f a7       	std	Y+47, r24	; 0x2f
    41e4:	3f c0       	rjmp	.+126    	; 0x4264 <OWNER_vidUserOptions+0xd30>
	else if (__tmp > 65535)
    41e6:	69 a9       	ldd	r22, Y+49	; 0x31
    41e8:	7a a9       	ldd	r23, Y+50	; 0x32
    41ea:	8b a9       	ldd	r24, Y+51	; 0x33
    41ec:	9c a9       	ldd	r25, Y+52	; 0x34
    41ee:	20 e0       	ldi	r18, 0x00	; 0
    41f0:	3f ef       	ldi	r19, 0xFF	; 255
    41f2:	4f e7       	ldi	r20, 0x7F	; 127
    41f4:	57 e4       	ldi	r21, 0x47	; 71
    41f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    41fa:	18 16       	cp	r1, r24
    41fc:	4c f5       	brge	.+82     	; 0x4250 <OWNER_vidUserOptions+0xd1c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41fe:	6d a9       	ldd	r22, Y+53	; 0x35
    4200:	7e a9       	ldd	r23, Y+54	; 0x36
    4202:	8f a9       	ldd	r24, Y+55	; 0x37
    4204:	98 ad       	ldd	r25, Y+56	; 0x38
    4206:	20 e0       	ldi	r18, 0x00	; 0
    4208:	30 e0       	ldi	r19, 0x00	; 0
    420a:	40 e2       	ldi	r20, 0x20	; 32
    420c:	51 e4       	ldi	r21, 0x41	; 65
    420e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4212:	dc 01       	movw	r26, r24
    4214:	cb 01       	movw	r24, r22
    4216:	bc 01       	movw	r22, r24
    4218:	cd 01       	movw	r24, r26
    421a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    421e:	dc 01       	movw	r26, r24
    4220:	cb 01       	movw	r24, r22
    4222:	98 ab       	std	Y+48, r25	; 0x30
    4224:	8f a7       	std	Y+47, r24	; 0x2f
    4226:	0f c0       	rjmp	.+30     	; 0x4246 <OWNER_vidUserOptions+0xd12>
    4228:	80 e9       	ldi	r24, 0x90	; 144
    422a:	91 e0       	ldi	r25, 0x01	; 1
    422c:	9e a7       	std	Y+46, r25	; 0x2e
    422e:	8d a7       	std	Y+45, r24	; 0x2d
    4230:	8d a5       	ldd	r24, Y+45	; 0x2d
    4232:	9e a5       	ldd	r25, Y+46	; 0x2e
    4234:	01 97       	sbiw	r24, 0x01	; 1
    4236:	f1 f7       	brne	.-4      	; 0x4234 <OWNER_vidUserOptions+0xd00>
    4238:	9e a7       	std	Y+46, r25	; 0x2e
    423a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    423c:	8f a5       	ldd	r24, Y+47	; 0x2f
    423e:	98 a9       	ldd	r25, Y+48	; 0x30
    4240:	01 97       	sbiw	r24, 0x01	; 1
    4242:	98 ab       	std	Y+48, r25	; 0x30
    4244:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4246:	8f a5       	ldd	r24, Y+47	; 0x2f
    4248:	98 a9       	ldd	r25, Y+48	; 0x30
    424a:	00 97       	sbiw	r24, 0x00	; 0
    424c:	69 f7       	brne	.-38     	; 0x4228 <OWNER_vidUserOptions+0xcf4>
    424e:	14 c0       	rjmp	.+40     	; 0x4278 <OWNER_vidUserOptions+0xd44>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4250:	69 a9       	ldd	r22, Y+49	; 0x31
    4252:	7a a9       	ldd	r23, Y+50	; 0x32
    4254:	8b a9       	ldd	r24, Y+51	; 0x33
    4256:	9c a9       	ldd	r25, Y+52	; 0x34
    4258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    425c:	dc 01       	movw	r26, r24
    425e:	cb 01       	movw	r24, r22
    4260:	98 ab       	std	Y+48, r25	; 0x30
    4262:	8f a7       	std	Y+47, r24	; 0x2f
    4264:	8f a5       	ldd	r24, Y+47	; 0x2f
    4266:	98 a9       	ldd	r25, Y+48	; 0x30
    4268:	9c a7       	std	Y+44, r25	; 0x2c
    426a:	8b a7       	std	Y+43, r24	; 0x2b
    426c:	8b a5       	ldd	r24, Y+43	; 0x2b
    426e:	9c a5       	ldd	r25, Y+44	; 0x2c
    4270:	01 97       	sbiw	r24, 0x01	; 1
    4272:	f1 f7       	brne	.-4      	; 0x4270 <OWNER_vidUserOptions+0xd3c>
    4274:	9c a7       	std	Y+44, r25	; 0x2c
    4276:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(100);
					SPI_vidTransceive(Local_u8minTemperature + ASCII_DEFERANT);
    4278:	fe 01       	movw	r30, r28
    427a:	e3 57       	subi	r30, 0x73	; 115
    427c:	ff 4f       	sbci	r31, 0xFF	; 255
    427e:	80 81       	ld	r24, Z
    4280:	80 5d       	subi	r24, 0xD0	; 208
    4282:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_vidTransceive>
    4286:	80 e0       	ldi	r24, 0x00	; 0
    4288:	90 e0       	ldi	r25, 0x00	; 0
    428a:	a8 ec       	ldi	r26, 0xC8	; 200
    428c:	b2 e4       	ldi	r27, 0x42	; 66
    428e:	8f a3       	std	Y+39, r24	; 0x27
    4290:	98 a7       	std	Y+40, r25	; 0x28
    4292:	a9 a7       	std	Y+41, r26	; 0x29
    4294:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4296:	6f a1       	ldd	r22, Y+39	; 0x27
    4298:	78 a5       	ldd	r23, Y+40	; 0x28
    429a:	89 a5       	ldd	r24, Y+41	; 0x29
    429c:	9a a5       	ldd	r25, Y+42	; 0x2a
    429e:	20 e0       	ldi	r18, 0x00	; 0
    42a0:	30 e0       	ldi	r19, 0x00	; 0
    42a2:	4a e7       	ldi	r20, 0x7A	; 122
    42a4:	55 e4       	ldi	r21, 0x45	; 69
    42a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42aa:	dc 01       	movw	r26, r24
    42ac:	cb 01       	movw	r24, r22
    42ae:	8b a3       	std	Y+35, r24	; 0x23
    42b0:	9c a3       	std	Y+36, r25	; 0x24
    42b2:	ad a3       	std	Y+37, r26	; 0x25
    42b4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    42b6:	6b a1       	ldd	r22, Y+35	; 0x23
    42b8:	7c a1       	ldd	r23, Y+36	; 0x24
    42ba:	8d a1       	ldd	r24, Y+37	; 0x25
    42bc:	9e a1       	ldd	r25, Y+38	; 0x26
    42be:	20 e0       	ldi	r18, 0x00	; 0
    42c0:	30 e0       	ldi	r19, 0x00	; 0
    42c2:	40 e8       	ldi	r20, 0x80	; 128
    42c4:	5f e3       	ldi	r21, 0x3F	; 63
    42c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    42ca:	88 23       	and	r24, r24
    42cc:	2c f4       	brge	.+10     	; 0x42d8 <OWNER_vidUserOptions+0xda4>
		__ticks = 1;
    42ce:	81 e0       	ldi	r24, 0x01	; 1
    42d0:	90 e0       	ldi	r25, 0x00	; 0
    42d2:	9a a3       	std	Y+34, r25	; 0x22
    42d4:	89 a3       	std	Y+33, r24	; 0x21
    42d6:	3f c0       	rjmp	.+126    	; 0x4356 <OWNER_vidUserOptions+0xe22>
	else if (__tmp > 65535)
    42d8:	6b a1       	ldd	r22, Y+35	; 0x23
    42da:	7c a1       	ldd	r23, Y+36	; 0x24
    42dc:	8d a1       	ldd	r24, Y+37	; 0x25
    42de:	9e a1       	ldd	r25, Y+38	; 0x26
    42e0:	20 e0       	ldi	r18, 0x00	; 0
    42e2:	3f ef       	ldi	r19, 0xFF	; 255
    42e4:	4f e7       	ldi	r20, 0x7F	; 127
    42e6:	57 e4       	ldi	r21, 0x47	; 71
    42e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    42ec:	18 16       	cp	r1, r24
    42ee:	4c f5       	brge	.+82     	; 0x4342 <OWNER_vidUserOptions+0xe0e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42f0:	6f a1       	ldd	r22, Y+39	; 0x27
    42f2:	78 a5       	ldd	r23, Y+40	; 0x28
    42f4:	89 a5       	ldd	r24, Y+41	; 0x29
    42f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    42f8:	20 e0       	ldi	r18, 0x00	; 0
    42fa:	30 e0       	ldi	r19, 0x00	; 0
    42fc:	40 e2       	ldi	r20, 0x20	; 32
    42fe:	51 e4       	ldi	r21, 0x41	; 65
    4300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4304:	dc 01       	movw	r26, r24
    4306:	cb 01       	movw	r24, r22
    4308:	bc 01       	movw	r22, r24
    430a:	cd 01       	movw	r24, r26
    430c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4310:	dc 01       	movw	r26, r24
    4312:	cb 01       	movw	r24, r22
    4314:	9a a3       	std	Y+34, r25	; 0x22
    4316:	89 a3       	std	Y+33, r24	; 0x21
    4318:	0f c0       	rjmp	.+30     	; 0x4338 <OWNER_vidUserOptions+0xe04>
    431a:	80 e9       	ldi	r24, 0x90	; 144
    431c:	91 e0       	ldi	r25, 0x01	; 1
    431e:	98 a3       	std	Y+32, r25	; 0x20
    4320:	8f 8f       	std	Y+31, r24	; 0x1f
    4322:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4324:	98 a1       	ldd	r25, Y+32	; 0x20
    4326:	01 97       	sbiw	r24, 0x01	; 1
    4328:	f1 f7       	brne	.-4      	; 0x4326 <OWNER_vidUserOptions+0xdf2>
    432a:	98 a3       	std	Y+32, r25	; 0x20
    432c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    432e:	89 a1       	ldd	r24, Y+33	; 0x21
    4330:	9a a1       	ldd	r25, Y+34	; 0x22
    4332:	01 97       	sbiw	r24, 0x01	; 1
    4334:	9a a3       	std	Y+34, r25	; 0x22
    4336:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4338:	89 a1       	ldd	r24, Y+33	; 0x21
    433a:	9a a1       	ldd	r25, Y+34	; 0x22
    433c:	00 97       	sbiw	r24, 0x00	; 0
    433e:	69 f7       	brne	.-38     	; 0x431a <OWNER_vidUserOptions+0xde6>
    4340:	14 c0       	rjmp	.+40     	; 0x436a <OWNER_vidUserOptions+0xe36>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4342:	6b a1       	ldd	r22, Y+35	; 0x23
    4344:	7c a1       	ldd	r23, Y+36	; 0x24
    4346:	8d a1       	ldd	r24, Y+37	; 0x25
    4348:	9e a1       	ldd	r25, Y+38	; 0x26
    434a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    434e:	dc 01       	movw	r26, r24
    4350:	cb 01       	movw	r24, r22
    4352:	9a a3       	std	Y+34, r25	; 0x22
    4354:	89 a3       	std	Y+33, r24	; 0x21
    4356:	89 a1       	ldd	r24, Y+33	; 0x21
    4358:	9a a1       	ldd	r25, Y+34	; 0x22
    435a:	9e 8f       	std	Y+30, r25	; 0x1e
    435c:	8d 8f       	std	Y+29, r24	; 0x1d
    435e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4360:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4362:	01 97       	sbiw	r24, 0x01	; 1
    4364:	f1 f7       	brne	.-4      	; 0x4362 <OWNER_vidUserOptions+0xe2e>
    4366:	9e 8f       	std	Y+30, r25	; 0x1e
    4368:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(100);
					LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN0);
    436a:	81 e0       	ldi	r24, 0x01	; 1
    436c:	60 e0       	ldi	r22, 0x00	; 0
    436e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
					LCD_enuSendString("Set Max Temp:__");
    4372:	8a ef       	ldi	r24, 0xFA	; 250
    4374:	91 e0       	ldi	r25, 0x01	; 1
    4376:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
					LCD_enuSendCharacter(DEGREE_SIGN);
    437a:	8f ed       	ldi	r24, 0xDF	; 223
    437c:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LCD_enuSendCharacter>
					Local_u8maxTemperature = OWNER_u8getTemperature(MAX_TEMP);
    4380:	81 e0       	ldi	r24, 0x01	; 1
    4382:	0e 94 2d 2c 	call	0x585a	; 0x585a <OWNER_u8getTemperature>
    4386:	fe 01       	movw	r30, r28
    4388:	e2 57       	subi	r30, 0x72	; 114
    438a:	ff 4f       	sbci	r31, 0xFF	; 255
    438c:	80 83       	st	Z, r24
					SPI_vidTransceive(SEND_TEP_MAX);
    438e:	8f e9       	ldi	r24, 0x9F	; 159
    4390:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_vidTransceive>
    4394:	80 e0       	ldi	r24, 0x00	; 0
    4396:	90 e0       	ldi	r25, 0x00	; 0
    4398:	a8 ec       	ldi	r26, 0xC8	; 200
    439a:	b2 e4       	ldi	r27, 0x42	; 66
    439c:	89 8f       	std	Y+25, r24	; 0x19
    439e:	9a 8f       	std	Y+26, r25	; 0x1a
    43a0:	ab 8f       	std	Y+27, r26	; 0x1b
    43a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43a4:	69 8d       	ldd	r22, Y+25	; 0x19
    43a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    43a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    43aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    43ac:	20 e0       	ldi	r18, 0x00	; 0
    43ae:	30 e0       	ldi	r19, 0x00	; 0
    43b0:	4a e7       	ldi	r20, 0x7A	; 122
    43b2:	55 e4       	ldi	r21, 0x45	; 69
    43b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43b8:	dc 01       	movw	r26, r24
    43ba:	cb 01       	movw	r24, r22
    43bc:	8d 8b       	std	Y+21, r24	; 0x15
    43be:	9e 8b       	std	Y+22, r25	; 0x16
    43c0:	af 8b       	std	Y+23, r26	; 0x17
    43c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    43c4:	6d 89       	ldd	r22, Y+21	; 0x15
    43c6:	7e 89       	ldd	r23, Y+22	; 0x16
    43c8:	8f 89       	ldd	r24, Y+23	; 0x17
    43ca:	98 8d       	ldd	r25, Y+24	; 0x18
    43cc:	20 e0       	ldi	r18, 0x00	; 0
    43ce:	30 e0       	ldi	r19, 0x00	; 0
    43d0:	40 e8       	ldi	r20, 0x80	; 128
    43d2:	5f e3       	ldi	r21, 0x3F	; 63
    43d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    43d8:	88 23       	and	r24, r24
    43da:	2c f4       	brge	.+10     	; 0x43e6 <OWNER_vidUserOptions+0xeb2>
		__ticks = 1;
    43dc:	81 e0       	ldi	r24, 0x01	; 1
    43de:	90 e0       	ldi	r25, 0x00	; 0
    43e0:	9c 8b       	std	Y+20, r25	; 0x14
    43e2:	8b 8b       	std	Y+19, r24	; 0x13
    43e4:	3f c0       	rjmp	.+126    	; 0x4464 <OWNER_vidUserOptions+0xf30>
	else if (__tmp > 65535)
    43e6:	6d 89       	ldd	r22, Y+21	; 0x15
    43e8:	7e 89       	ldd	r23, Y+22	; 0x16
    43ea:	8f 89       	ldd	r24, Y+23	; 0x17
    43ec:	98 8d       	ldd	r25, Y+24	; 0x18
    43ee:	20 e0       	ldi	r18, 0x00	; 0
    43f0:	3f ef       	ldi	r19, 0xFF	; 255
    43f2:	4f e7       	ldi	r20, 0x7F	; 127
    43f4:	57 e4       	ldi	r21, 0x47	; 71
    43f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    43fa:	18 16       	cp	r1, r24
    43fc:	4c f5       	brge	.+82     	; 0x4450 <OWNER_vidUserOptions+0xf1c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43fe:	69 8d       	ldd	r22, Y+25	; 0x19
    4400:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4402:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4404:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4406:	20 e0       	ldi	r18, 0x00	; 0
    4408:	30 e0       	ldi	r19, 0x00	; 0
    440a:	40 e2       	ldi	r20, 0x20	; 32
    440c:	51 e4       	ldi	r21, 0x41	; 65
    440e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4412:	dc 01       	movw	r26, r24
    4414:	cb 01       	movw	r24, r22
    4416:	bc 01       	movw	r22, r24
    4418:	cd 01       	movw	r24, r26
    441a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    441e:	dc 01       	movw	r26, r24
    4420:	cb 01       	movw	r24, r22
    4422:	9c 8b       	std	Y+20, r25	; 0x14
    4424:	8b 8b       	std	Y+19, r24	; 0x13
    4426:	0f c0       	rjmp	.+30     	; 0x4446 <OWNER_vidUserOptions+0xf12>
    4428:	80 e9       	ldi	r24, 0x90	; 144
    442a:	91 e0       	ldi	r25, 0x01	; 1
    442c:	9a 8b       	std	Y+18, r25	; 0x12
    442e:	89 8b       	std	Y+17, r24	; 0x11
    4430:	89 89       	ldd	r24, Y+17	; 0x11
    4432:	9a 89       	ldd	r25, Y+18	; 0x12
    4434:	01 97       	sbiw	r24, 0x01	; 1
    4436:	f1 f7       	brne	.-4      	; 0x4434 <OWNER_vidUserOptions+0xf00>
    4438:	9a 8b       	std	Y+18, r25	; 0x12
    443a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    443c:	8b 89       	ldd	r24, Y+19	; 0x13
    443e:	9c 89       	ldd	r25, Y+20	; 0x14
    4440:	01 97       	sbiw	r24, 0x01	; 1
    4442:	9c 8b       	std	Y+20, r25	; 0x14
    4444:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4446:	8b 89       	ldd	r24, Y+19	; 0x13
    4448:	9c 89       	ldd	r25, Y+20	; 0x14
    444a:	00 97       	sbiw	r24, 0x00	; 0
    444c:	69 f7       	brne	.-38     	; 0x4428 <OWNER_vidUserOptions+0xef4>
    444e:	14 c0       	rjmp	.+40     	; 0x4478 <OWNER_vidUserOptions+0xf44>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4450:	6d 89       	ldd	r22, Y+21	; 0x15
    4452:	7e 89       	ldd	r23, Y+22	; 0x16
    4454:	8f 89       	ldd	r24, Y+23	; 0x17
    4456:	98 8d       	ldd	r25, Y+24	; 0x18
    4458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    445c:	dc 01       	movw	r26, r24
    445e:	cb 01       	movw	r24, r22
    4460:	9c 8b       	std	Y+20, r25	; 0x14
    4462:	8b 8b       	std	Y+19, r24	; 0x13
    4464:	8b 89       	ldd	r24, Y+19	; 0x13
    4466:	9c 89       	ldd	r25, Y+20	; 0x14
    4468:	98 8b       	std	Y+16, r25	; 0x10
    446a:	8f 87       	std	Y+15, r24	; 0x0f
    446c:	8f 85       	ldd	r24, Y+15	; 0x0f
    446e:	98 89       	ldd	r25, Y+16	; 0x10
    4470:	01 97       	sbiw	r24, 0x01	; 1
    4472:	f1 f7       	brne	.-4      	; 0x4470 <OWNER_vidUserOptions+0xf3c>
    4474:	98 8b       	std	Y+16, r25	; 0x10
    4476:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(100);
					SPI_vidTransceive(Local_u8maxTemperature + ASCII_DEFERANT);
    4478:	fe 01       	movw	r30, r28
    447a:	e2 57       	subi	r30, 0x72	; 114
    447c:	ff 4f       	sbci	r31, 0xFF	; 255
    447e:	80 81       	ld	r24, Z
    4480:	80 5d       	subi	r24, 0xD0	; 208
    4482:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_vidTransceive>
    4486:	80 e0       	ldi	r24, 0x00	; 0
    4488:	90 e0       	ldi	r25, 0x00	; 0
    448a:	a8 ec       	ldi	r26, 0xC8	; 200
    448c:	b2 e4       	ldi	r27, 0x42	; 66
    448e:	8b 87       	std	Y+11, r24	; 0x0b
    4490:	9c 87       	std	Y+12, r25	; 0x0c
    4492:	ad 87       	std	Y+13, r26	; 0x0d
    4494:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4496:	6b 85       	ldd	r22, Y+11	; 0x0b
    4498:	7c 85       	ldd	r23, Y+12	; 0x0c
    449a:	8d 85       	ldd	r24, Y+13	; 0x0d
    449c:	9e 85       	ldd	r25, Y+14	; 0x0e
    449e:	20 e0       	ldi	r18, 0x00	; 0
    44a0:	30 e0       	ldi	r19, 0x00	; 0
    44a2:	4a e7       	ldi	r20, 0x7A	; 122
    44a4:	55 e4       	ldi	r21, 0x45	; 69
    44a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44aa:	dc 01       	movw	r26, r24
    44ac:	cb 01       	movw	r24, r22
    44ae:	8f 83       	std	Y+7, r24	; 0x07
    44b0:	98 87       	std	Y+8, r25	; 0x08
    44b2:	a9 87       	std	Y+9, r26	; 0x09
    44b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    44b6:	6f 81       	ldd	r22, Y+7	; 0x07
    44b8:	78 85       	ldd	r23, Y+8	; 0x08
    44ba:	89 85       	ldd	r24, Y+9	; 0x09
    44bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    44be:	20 e0       	ldi	r18, 0x00	; 0
    44c0:	30 e0       	ldi	r19, 0x00	; 0
    44c2:	40 e8       	ldi	r20, 0x80	; 128
    44c4:	5f e3       	ldi	r21, 0x3F	; 63
    44c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    44ca:	88 23       	and	r24, r24
    44cc:	2c f4       	brge	.+10     	; 0x44d8 <OWNER_vidUserOptions+0xfa4>
		__ticks = 1;
    44ce:	81 e0       	ldi	r24, 0x01	; 1
    44d0:	90 e0       	ldi	r25, 0x00	; 0
    44d2:	9e 83       	std	Y+6, r25	; 0x06
    44d4:	8d 83       	std	Y+5, r24	; 0x05
    44d6:	3f c0       	rjmp	.+126    	; 0x4556 <OWNER_vidUserOptions+0x1022>
	else if (__tmp > 65535)
    44d8:	6f 81       	ldd	r22, Y+7	; 0x07
    44da:	78 85       	ldd	r23, Y+8	; 0x08
    44dc:	89 85       	ldd	r24, Y+9	; 0x09
    44de:	9a 85       	ldd	r25, Y+10	; 0x0a
    44e0:	20 e0       	ldi	r18, 0x00	; 0
    44e2:	3f ef       	ldi	r19, 0xFF	; 255
    44e4:	4f e7       	ldi	r20, 0x7F	; 127
    44e6:	57 e4       	ldi	r21, 0x47	; 71
    44e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    44ec:	18 16       	cp	r1, r24
    44ee:	4c f5       	brge	.+82     	; 0x4542 <OWNER_vidUserOptions+0x100e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    44f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    44f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    44f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    44f8:	20 e0       	ldi	r18, 0x00	; 0
    44fa:	30 e0       	ldi	r19, 0x00	; 0
    44fc:	40 e2       	ldi	r20, 0x20	; 32
    44fe:	51 e4       	ldi	r21, 0x41	; 65
    4500:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4504:	dc 01       	movw	r26, r24
    4506:	cb 01       	movw	r24, r22
    4508:	bc 01       	movw	r22, r24
    450a:	cd 01       	movw	r24, r26
    450c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4510:	dc 01       	movw	r26, r24
    4512:	cb 01       	movw	r24, r22
    4514:	9e 83       	std	Y+6, r25	; 0x06
    4516:	8d 83       	std	Y+5, r24	; 0x05
    4518:	0f c0       	rjmp	.+30     	; 0x4538 <OWNER_vidUserOptions+0x1004>
    451a:	80 e9       	ldi	r24, 0x90	; 144
    451c:	91 e0       	ldi	r25, 0x01	; 1
    451e:	9c 83       	std	Y+4, r25	; 0x04
    4520:	8b 83       	std	Y+3, r24	; 0x03
    4522:	8b 81       	ldd	r24, Y+3	; 0x03
    4524:	9c 81       	ldd	r25, Y+4	; 0x04
    4526:	01 97       	sbiw	r24, 0x01	; 1
    4528:	f1 f7       	brne	.-4      	; 0x4526 <OWNER_vidUserOptions+0xff2>
    452a:	9c 83       	std	Y+4, r25	; 0x04
    452c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    452e:	8d 81       	ldd	r24, Y+5	; 0x05
    4530:	9e 81       	ldd	r25, Y+6	; 0x06
    4532:	01 97       	sbiw	r24, 0x01	; 1
    4534:	9e 83       	std	Y+6, r25	; 0x06
    4536:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4538:	8d 81       	ldd	r24, Y+5	; 0x05
    453a:	9e 81       	ldd	r25, Y+6	; 0x06
    453c:	00 97       	sbiw	r24, 0x00	; 0
    453e:	69 f7       	brne	.-38     	; 0x451a <OWNER_vidUserOptions+0xfe6>
    4540:	18 c0       	rjmp	.+48     	; 0x4572 <OWNER_vidUserOptions+0x103e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4542:	6f 81       	ldd	r22, Y+7	; 0x07
    4544:	78 85       	ldd	r23, Y+8	; 0x08
    4546:	89 85       	ldd	r24, Y+9	; 0x09
    4548:	9a 85       	ldd	r25, Y+10	; 0x0a
    454a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    454e:	dc 01       	movw	r26, r24
    4550:	cb 01       	movw	r24, r22
    4552:	9e 83       	std	Y+6, r25	; 0x06
    4554:	8d 83       	std	Y+5, r24	; 0x05
    4556:	8d 81       	ldd	r24, Y+5	; 0x05
    4558:	9e 81       	ldd	r25, Y+6	; 0x06
    455a:	9a 83       	std	Y+2, r25	; 0x02
    455c:	89 83       	std	Y+1, r24	; 0x01
    455e:	89 81       	ldd	r24, Y+1	; 0x01
    4560:	9a 81       	ldd	r25, Y+2	; 0x02
    4562:	01 97       	sbiw	r24, 0x01	; 1
    4564:	f1 f7       	brne	.-4      	; 0x4562 <OWNER_vidUserOptions+0x102e>
    4566:	9a 83       	std	Y+2, r25	; 0x02
    4568:	89 83       	std	Y+1, r24	; 0x01
    456a:	03 c0       	rjmp	.+6      	; 0x4572 <OWNER_vidUserOptions+0x103e>
					break;
			/* in case user press on a key have a value not refer to available option
			 * assign the initial value in the pressed key variable to act like no pressed key case
			 * */
				default:
					u8keyPressed = WAITING_PRESS_KEY;	//assign the initial value
    456c:	8f ef       	ldi	r24, 0xFF	; 255
    456e:	80 93 ec 02 	sts	0x02EC, r24
		LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);		//clear LCD screen
		LCD_enuSendString("1.Modes  2.Rooms");		//print the available options
		LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN0);
		LCD_enuSendString("3.Garage  4.Temp");
		u8keyPressed = WAITING_PRESS_KEY;	//assign the initial value refer to the application waiting the user to enter a value
		while(u8keyPressed == WAITING_PRESS_KEY){//loop until user select option
    4572:	80 91 ec 02 	lds	r24, 0x02EC
    4576:	8f 3f       	cpi	r24, 0xFF	; 255
    4578:	09 f4       	brne	.+2      	; 0x457c <OWNER_vidUserOptions+0x1048>
    457a:	a9 c8       	rjmp	.-3758   	; 0x36ce <OWNER_vidUserOptions+0x19a>
	u8 Local_u8maxTemperature;		//create a variable carry the max temperature entered by user
	u8 Local_u8minTemperature;		//create a variable carry the min temperature entered by user
	u8 Local_au8CustomCharacterParty[BLOCK_SIZE] = {0x01, 0x03, 0x05, 0x09, 0x09, 0x0B, 0x1B, 0x18}; //party pattern --> CGRAM_BLOCK_2
	u8 Local_au8CustomCharacterTemperature[BLOCK_SIZE] = {0x04, 0x0A, 0x0A, 0x0E, 0x0E, 0x1F, 0x1F, 0x0E}; //temperature pattern --> CGRAM_BLOCK_3
	/* select option from list */
	while(Local_u8selectedOption == NO_OPTION){	//still display option list until user
    457c:	fe 01       	movw	r30, r28
    457e:	e1 57       	subi	r30, 0x71	; 113
    4580:	ff 4f       	sbci	r31, 0xFF	; 255
    4582:	80 81       	ld	r24, Z
    4584:	88 23       	and	r24, r24
    4586:	09 f4       	brne	.+2      	; 0x458a <OWNER_vidUserOptions+0x1056>
    4588:	8e c8       	rjmp	.-3812   	; 0x36a6 <OWNER_vidUserOptions+0x172>
			}//end of #switch case# --> compare the value of pressed key with the available options
		}//end of #while loop# --> looping on the value of pressed key
	}//end of #while loop# --> looping on the selected option from the main menu
	/*	while(1){
		}*/
}//end of OWNER_vidUserOptions()
    458a:	c1 55       	subi	r28, 0x51	; 81
    458c:	df 4f       	sbci	r29, 0xFF	; 255
    458e:	0f b6       	in	r0, 0x3f	; 63
    4590:	f8 94       	cli
    4592:	de bf       	out	0x3e, r29	; 62
    4594:	0f be       	out	0x3f, r0	; 63
    4596:	cd bf       	out	0x3d, r28	; 61
    4598:	cf 91       	pop	r28
    459a:	df 91       	pop	r29
    459c:	1f 91       	pop	r17
    459e:	0f 91       	pop	r16
    45a0:	08 95       	ret

000045a2 <OWNER_vidMasterRoom>:
 * 				- after each switching recall the function to update the room status
 * 				- back to the previous screen option is available
 * Arguments: void
 * Return:	void
 */
void OWNER_vidMasterRoom(void){
    45a2:	0f 93       	push	r16
    45a4:	1f 93       	push	r17
    45a6:	df 93       	push	r29
    45a8:	cf 93       	push	r28
    45aa:	cd b7       	in	r28, 0x3d	; 61
    45ac:	de b7       	in	r29, 0x3e	; 62
    45ae:	c8 54       	subi	r28, 0x48	; 72
    45b0:	d0 40       	sbci	r29, 0x00	; 0
    45b2:	0f b6       	in	r0, 0x3f	; 63
    45b4:	f8 94       	cli
    45b6:	de bf       	out	0x3e, r29	; 62
    45b8:	0f be       	out	0x3f, r0	; 63
    45ba:	cd bf       	out	0x3d, r28	; 61
	/* clear the LCD screen */
	LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
    45bc:	81 e0       	ldi	r24, 0x01	; 1
    45be:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
	/* send request to the slave MC to send back the room status */
	SPI_vidTransceive(GET_MASTER_DOOR_STATUS);
    45c2:	83 e0       	ldi	r24, 0x03	; 3
    45c4:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_vidTransceive>
    45c8:	fe 01       	movw	r30, r28
    45ca:	ed 5b       	subi	r30, 0xBD	; 189
    45cc:	ff 4f       	sbci	r31, 0xFF	; 255
    45ce:	80 e0       	ldi	r24, 0x00	; 0
    45d0:	90 e0       	ldi	r25, 0x00	; 0
    45d2:	a8 e4       	ldi	r26, 0x48	; 72
    45d4:	b2 e4       	ldi	r27, 0x42	; 66
    45d6:	80 83       	st	Z, r24
    45d8:	91 83       	std	Z+1, r25	; 0x01
    45da:	a2 83       	std	Z+2, r26	; 0x02
    45dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45de:	8e 01       	movw	r16, r28
    45e0:	01 5c       	subi	r16, 0xC1	; 193
    45e2:	1f 4f       	sbci	r17, 0xFF	; 255
    45e4:	fe 01       	movw	r30, r28
    45e6:	ed 5b       	subi	r30, 0xBD	; 189
    45e8:	ff 4f       	sbci	r31, 0xFF	; 255
    45ea:	60 81       	ld	r22, Z
    45ec:	71 81       	ldd	r23, Z+1	; 0x01
    45ee:	82 81       	ldd	r24, Z+2	; 0x02
    45f0:	93 81       	ldd	r25, Z+3	; 0x03
    45f2:	20 e0       	ldi	r18, 0x00	; 0
    45f4:	30 e0       	ldi	r19, 0x00	; 0
    45f6:	4a e7       	ldi	r20, 0x7A	; 122
    45f8:	55 e4       	ldi	r21, 0x45	; 69
    45fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45fe:	dc 01       	movw	r26, r24
    4600:	cb 01       	movw	r24, r22
    4602:	f8 01       	movw	r30, r16
    4604:	80 83       	st	Z, r24
    4606:	91 83       	std	Z+1, r25	; 0x01
    4608:	a2 83       	std	Z+2, r26	; 0x02
    460a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    460c:	fe 01       	movw	r30, r28
    460e:	ff 96       	adiw	r30, 0x3f	; 63
    4610:	60 81       	ld	r22, Z
    4612:	71 81       	ldd	r23, Z+1	; 0x01
    4614:	82 81       	ldd	r24, Z+2	; 0x02
    4616:	93 81       	ldd	r25, Z+3	; 0x03
    4618:	20 e0       	ldi	r18, 0x00	; 0
    461a:	30 e0       	ldi	r19, 0x00	; 0
    461c:	40 e8       	ldi	r20, 0x80	; 128
    461e:	5f e3       	ldi	r21, 0x3F	; 63
    4620:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4624:	88 23       	and	r24, r24
    4626:	2c f4       	brge	.+10     	; 0x4632 <OWNER_vidMasterRoom+0x90>
		__ticks = 1;
    4628:	81 e0       	ldi	r24, 0x01	; 1
    462a:	90 e0       	ldi	r25, 0x00	; 0
    462c:	9e af       	std	Y+62, r25	; 0x3e
    462e:	8d af       	std	Y+61, r24	; 0x3d
    4630:	46 c0       	rjmp	.+140    	; 0x46be <OWNER_vidMasterRoom+0x11c>
	else if (__tmp > 65535)
    4632:	fe 01       	movw	r30, r28
    4634:	ff 96       	adiw	r30, 0x3f	; 63
    4636:	60 81       	ld	r22, Z
    4638:	71 81       	ldd	r23, Z+1	; 0x01
    463a:	82 81       	ldd	r24, Z+2	; 0x02
    463c:	93 81       	ldd	r25, Z+3	; 0x03
    463e:	20 e0       	ldi	r18, 0x00	; 0
    4640:	3f ef       	ldi	r19, 0xFF	; 255
    4642:	4f e7       	ldi	r20, 0x7F	; 127
    4644:	57 e4       	ldi	r21, 0x47	; 71
    4646:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    464a:	18 16       	cp	r1, r24
    464c:	64 f5       	brge	.+88     	; 0x46a6 <OWNER_vidMasterRoom+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    464e:	fe 01       	movw	r30, r28
    4650:	ed 5b       	subi	r30, 0xBD	; 189
    4652:	ff 4f       	sbci	r31, 0xFF	; 255
    4654:	60 81       	ld	r22, Z
    4656:	71 81       	ldd	r23, Z+1	; 0x01
    4658:	82 81       	ldd	r24, Z+2	; 0x02
    465a:	93 81       	ldd	r25, Z+3	; 0x03
    465c:	20 e0       	ldi	r18, 0x00	; 0
    465e:	30 e0       	ldi	r19, 0x00	; 0
    4660:	40 e2       	ldi	r20, 0x20	; 32
    4662:	51 e4       	ldi	r21, 0x41	; 65
    4664:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4668:	dc 01       	movw	r26, r24
    466a:	cb 01       	movw	r24, r22
    466c:	bc 01       	movw	r22, r24
    466e:	cd 01       	movw	r24, r26
    4670:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4674:	dc 01       	movw	r26, r24
    4676:	cb 01       	movw	r24, r22
    4678:	9e af       	std	Y+62, r25	; 0x3e
    467a:	8d af       	std	Y+61, r24	; 0x3d
    467c:	0f c0       	rjmp	.+30     	; 0x469c <OWNER_vidMasterRoom+0xfa>
    467e:	80 e9       	ldi	r24, 0x90	; 144
    4680:	91 e0       	ldi	r25, 0x01	; 1
    4682:	9c af       	std	Y+60, r25	; 0x3c
    4684:	8b af       	std	Y+59, r24	; 0x3b
    4686:	8b ad       	ldd	r24, Y+59	; 0x3b
    4688:	9c ad       	ldd	r25, Y+60	; 0x3c
    468a:	01 97       	sbiw	r24, 0x01	; 1
    468c:	f1 f7       	brne	.-4      	; 0x468a <OWNER_vidMasterRoom+0xe8>
    468e:	9c af       	std	Y+60, r25	; 0x3c
    4690:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4692:	8d ad       	ldd	r24, Y+61	; 0x3d
    4694:	9e ad       	ldd	r25, Y+62	; 0x3e
    4696:	01 97       	sbiw	r24, 0x01	; 1
    4698:	9e af       	std	Y+62, r25	; 0x3e
    469a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    469c:	8d ad       	ldd	r24, Y+61	; 0x3d
    469e:	9e ad       	ldd	r25, Y+62	; 0x3e
    46a0:	00 97       	sbiw	r24, 0x00	; 0
    46a2:	69 f7       	brne	.-38     	; 0x467e <OWNER_vidMasterRoom+0xdc>
    46a4:	16 c0       	rjmp	.+44     	; 0x46d2 <OWNER_vidMasterRoom+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46a6:	fe 01       	movw	r30, r28
    46a8:	ff 96       	adiw	r30, 0x3f	; 63
    46aa:	60 81       	ld	r22, Z
    46ac:	71 81       	ldd	r23, Z+1	; 0x01
    46ae:	82 81       	ldd	r24, Z+2	; 0x02
    46b0:	93 81       	ldd	r25, Z+3	; 0x03
    46b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46b6:	dc 01       	movw	r26, r24
    46b8:	cb 01       	movw	r24, r22
    46ba:	9e af       	std	Y+62, r25	; 0x3e
    46bc:	8d af       	std	Y+61, r24	; 0x3d
    46be:	8d ad       	ldd	r24, Y+61	; 0x3d
    46c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    46c2:	9a af       	std	Y+58, r25	; 0x3a
    46c4:	89 af       	std	Y+57, r24	; 0x39
    46c6:	89 ad       	ldd	r24, Y+57	; 0x39
    46c8:	9a ad       	ldd	r25, Y+58	; 0x3a
    46ca:	01 97       	sbiw	r24, 0x01	; 1
    46cc:	f1 f7       	brne	.-4      	; 0x46ca <OWNER_vidMasterRoom+0x128>
    46ce:	9a af       	std	Y+58, r25	; 0x3a
    46d0:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);
	u8SPIrequest = SPI_vidTransceive(DONT_CARE);
    46d2:	8f ef       	ldi	r24, 0xFF	; 255
    46d4:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_vidTransceive>
    46d8:	80 93 eb 02 	sts	0x02EB, r24
	if(u8SPIrequest == MASTER_DOOR_CLOSE){
    46dc:	80 91 eb 02 	lds	r24, 0x02EB
    46e0:	85 30       	cpi	r24, 0x05	; 5
    46e2:	29 f4       	brne	.+10     	; 0x46ee <OWNER_vidMasterRoom+0x14c>
		LCD_enuSendString("DOOR:LOCK ");
    46e4:	8a e0       	ldi	r24, 0x0A	; 10
    46e6:	92 e0       	ldi	r25, 0x02	; 2
    46e8:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
    46ec:	08 c0       	rjmp	.+16     	; 0x46fe <OWNER_vidMasterRoom+0x15c>
	} else if(u8SPIrequest == MASTER_DOOR_OPEN){
    46ee:	80 91 eb 02 	lds	r24, 0x02EB
    46f2:	84 30       	cpi	r24, 0x04	; 4
    46f4:	21 f4       	brne	.+8      	; 0x46fe <OWNER_vidMasterRoom+0x15c>
		 LCD_enuSendString("DOOR:OPEN ");
    46f6:	85 e1       	ldi	r24, 0x15	; 21
    46f8:	92 e0       	ldi	r25, 0x02	; 2
    46fa:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
	} else { /*.....*/ }
	LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN0);
    46fe:	81 e0       	ldi	r24, 0x01	; 1
    4700:	60 e0       	ldi	r22, 0x00	; 0
    4702:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
	SPI_vidTransceive(GET_MASTER_LIGHT_STATUS);
    4706:	86 e0       	ldi	r24, 0x06	; 6
    4708:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_vidTransceive>
    470c:	80 e0       	ldi	r24, 0x00	; 0
    470e:	90 e0       	ldi	r25, 0x00	; 0
    4710:	a8 e4       	ldi	r26, 0x48	; 72
    4712:	b2 e4       	ldi	r27, 0x42	; 66
    4714:	8d ab       	std	Y+53, r24	; 0x35
    4716:	9e ab       	std	Y+54, r25	; 0x36
    4718:	af ab       	std	Y+55, r26	; 0x37
    471a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    471c:	6d a9       	ldd	r22, Y+53	; 0x35
    471e:	7e a9       	ldd	r23, Y+54	; 0x36
    4720:	8f a9       	ldd	r24, Y+55	; 0x37
    4722:	98 ad       	ldd	r25, Y+56	; 0x38
    4724:	20 e0       	ldi	r18, 0x00	; 0
    4726:	30 e0       	ldi	r19, 0x00	; 0
    4728:	4a e7       	ldi	r20, 0x7A	; 122
    472a:	55 e4       	ldi	r21, 0x45	; 69
    472c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4730:	dc 01       	movw	r26, r24
    4732:	cb 01       	movw	r24, r22
    4734:	89 ab       	std	Y+49, r24	; 0x31
    4736:	9a ab       	std	Y+50, r25	; 0x32
    4738:	ab ab       	std	Y+51, r26	; 0x33
    473a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    473c:	69 a9       	ldd	r22, Y+49	; 0x31
    473e:	7a a9       	ldd	r23, Y+50	; 0x32
    4740:	8b a9       	ldd	r24, Y+51	; 0x33
    4742:	9c a9       	ldd	r25, Y+52	; 0x34
    4744:	20 e0       	ldi	r18, 0x00	; 0
    4746:	30 e0       	ldi	r19, 0x00	; 0
    4748:	40 e8       	ldi	r20, 0x80	; 128
    474a:	5f e3       	ldi	r21, 0x3F	; 63
    474c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4750:	88 23       	and	r24, r24
    4752:	2c f4       	brge	.+10     	; 0x475e <OWNER_vidMasterRoom+0x1bc>
		__ticks = 1;
    4754:	81 e0       	ldi	r24, 0x01	; 1
    4756:	90 e0       	ldi	r25, 0x00	; 0
    4758:	98 ab       	std	Y+48, r25	; 0x30
    475a:	8f a7       	std	Y+47, r24	; 0x2f
    475c:	3f c0       	rjmp	.+126    	; 0x47dc <OWNER_vidMasterRoom+0x23a>
	else if (__tmp > 65535)
    475e:	69 a9       	ldd	r22, Y+49	; 0x31
    4760:	7a a9       	ldd	r23, Y+50	; 0x32
    4762:	8b a9       	ldd	r24, Y+51	; 0x33
    4764:	9c a9       	ldd	r25, Y+52	; 0x34
    4766:	20 e0       	ldi	r18, 0x00	; 0
    4768:	3f ef       	ldi	r19, 0xFF	; 255
    476a:	4f e7       	ldi	r20, 0x7F	; 127
    476c:	57 e4       	ldi	r21, 0x47	; 71
    476e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4772:	18 16       	cp	r1, r24
    4774:	4c f5       	brge	.+82     	; 0x47c8 <OWNER_vidMasterRoom+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4776:	6d a9       	ldd	r22, Y+53	; 0x35
    4778:	7e a9       	ldd	r23, Y+54	; 0x36
    477a:	8f a9       	ldd	r24, Y+55	; 0x37
    477c:	98 ad       	ldd	r25, Y+56	; 0x38
    477e:	20 e0       	ldi	r18, 0x00	; 0
    4780:	30 e0       	ldi	r19, 0x00	; 0
    4782:	40 e2       	ldi	r20, 0x20	; 32
    4784:	51 e4       	ldi	r21, 0x41	; 65
    4786:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    478a:	dc 01       	movw	r26, r24
    478c:	cb 01       	movw	r24, r22
    478e:	bc 01       	movw	r22, r24
    4790:	cd 01       	movw	r24, r26
    4792:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4796:	dc 01       	movw	r26, r24
    4798:	cb 01       	movw	r24, r22
    479a:	98 ab       	std	Y+48, r25	; 0x30
    479c:	8f a7       	std	Y+47, r24	; 0x2f
    479e:	0f c0       	rjmp	.+30     	; 0x47be <OWNER_vidMasterRoom+0x21c>
    47a0:	80 e9       	ldi	r24, 0x90	; 144
    47a2:	91 e0       	ldi	r25, 0x01	; 1
    47a4:	9e a7       	std	Y+46, r25	; 0x2e
    47a6:	8d a7       	std	Y+45, r24	; 0x2d
    47a8:	8d a5       	ldd	r24, Y+45	; 0x2d
    47aa:	9e a5       	ldd	r25, Y+46	; 0x2e
    47ac:	01 97       	sbiw	r24, 0x01	; 1
    47ae:	f1 f7       	brne	.-4      	; 0x47ac <OWNER_vidMasterRoom+0x20a>
    47b0:	9e a7       	std	Y+46, r25	; 0x2e
    47b2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    47b6:	98 a9       	ldd	r25, Y+48	; 0x30
    47b8:	01 97       	sbiw	r24, 0x01	; 1
    47ba:	98 ab       	std	Y+48, r25	; 0x30
    47bc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47be:	8f a5       	ldd	r24, Y+47	; 0x2f
    47c0:	98 a9       	ldd	r25, Y+48	; 0x30
    47c2:	00 97       	sbiw	r24, 0x00	; 0
    47c4:	69 f7       	brne	.-38     	; 0x47a0 <OWNER_vidMasterRoom+0x1fe>
    47c6:	14 c0       	rjmp	.+40     	; 0x47f0 <OWNER_vidMasterRoom+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47c8:	69 a9       	ldd	r22, Y+49	; 0x31
    47ca:	7a a9       	ldd	r23, Y+50	; 0x32
    47cc:	8b a9       	ldd	r24, Y+51	; 0x33
    47ce:	9c a9       	ldd	r25, Y+52	; 0x34
    47d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47d4:	dc 01       	movw	r26, r24
    47d6:	cb 01       	movw	r24, r22
    47d8:	98 ab       	std	Y+48, r25	; 0x30
    47da:	8f a7       	std	Y+47, r24	; 0x2f
    47dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    47de:	98 a9       	ldd	r25, Y+48	; 0x30
    47e0:	9c a7       	std	Y+44, r25	; 0x2c
    47e2:	8b a7       	std	Y+43, r24	; 0x2b
    47e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    47e6:	9c a5       	ldd	r25, Y+44	; 0x2c
    47e8:	01 97       	sbiw	r24, 0x01	; 1
    47ea:	f1 f7       	brne	.-4      	; 0x47e8 <OWNER_vidMasterRoom+0x246>
    47ec:	9c a7       	std	Y+44, r25	; 0x2c
    47ee:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	u8SPIrequest = SPI_vidTransceive(DONT_CARE);
    47f0:	8f ef       	ldi	r24, 0xFF	; 255
    47f2:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_vidTransceive>
    47f6:	80 93 eb 02 	sts	0x02EB, r24
	if(u8SPIrequest == MASTER_LIGHT_OFF){
    47fa:	80 91 eb 02 	lds	r24, 0x02EB
    47fe:	88 30       	cpi	r24, 0x08	; 8
    4800:	29 f4       	brne	.+10     	; 0x480c <OWNER_vidMasterRoom+0x26a>
		LCD_enuSendString("LED:OFF");
    4802:	80 e2       	ldi	r24, 0x20	; 32
    4804:	92 e0       	ldi	r25, 0x02	; 2
    4806:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
    480a:	08 c0       	rjmp	.+16     	; 0x481c <OWNER_vidMasterRoom+0x27a>
	} else if(u8SPIrequest == MASTER_LIGHT_ON){
    480c:	80 91 eb 02 	lds	r24, 0x02EB
    4810:	87 30       	cpi	r24, 0x07	; 7
    4812:	21 f4       	brne	.+8      	; 0x481c <OWNER_vidMasterRoom+0x27a>
		 LCD_enuSendString("LED:ON");
    4814:	88 e2       	ldi	r24, 0x28	; 40
    4816:	92 e0       	ldi	r25, 0x02	; 2
    4818:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
    481c:	80 e0       	ldi	r24, 0x00	; 0
    481e:	90 e0       	ldi	r25, 0x00	; 0
    4820:	a8 ec       	ldi	r26, 0xC8	; 200
    4822:	b2 e4       	ldi	r27, 0x42	; 66
    4824:	8f a3       	std	Y+39, r24	; 0x27
    4826:	98 a7       	std	Y+40, r25	; 0x28
    4828:	a9 a7       	std	Y+41, r26	; 0x29
    482a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    482c:	6f a1       	ldd	r22, Y+39	; 0x27
    482e:	78 a5       	ldd	r23, Y+40	; 0x28
    4830:	89 a5       	ldd	r24, Y+41	; 0x29
    4832:	9a a5       	ldd	r25, Y+42	; 0x2a
    4834:	20 e0       	ldi	r18, 0x00	; 0
    4836:	30 e0       	ldi	r19, 0x00	; 0
    4838:	4a e7       	ldi	r20, 0x7A	; 122
    483a:	55 e4       	ldi	r21, 0x45	; 69
    483c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4840:	dc 01       	movw	r26, r24
    4842:	cb 01       	movw	r24, r22
    4844:	8b a3       	std	Y+35, r24	; 0x23
    4846:	9c a3       	std	Y+36, r25	; 0x24
    4848:	ad a3       	std	Y+37, r26	; 0x25
    484a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    484c:	6b a1       	ldd	r22, Y+35	; 0x23
    484e:	7c a1       	ldd	r23, Y+36	; 0x24
    4850:	8d a1       	ldd	r24, Y+37	; 0x25
    4852:	9e a1       	ldd	r25, Y+38	; 0x26
    4854:	20 e0       	ldi	r18, 0x00	; 0
    4856:	30 e0       	ldi	r19, 0x00	; 0
    4858:	40 e8       	ldi	r20, 0x80	; 128
    485a:	5f e3       	ldi	r21, 0x3F	; 63
    485c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4860:	88 23       	and	r24, r24
    4862:	2c f4       	brge	.+10     	; 0x486e <OWNER_vidMasterRoom+0x2cc>
		__ticks = 1;
    4864:	81 e0       	ldi	r24, 0x01	; 1
    4866:	90 e0       	ldi	r25, 0x00	; 0
    4868:	9a a3       	std	Y+34, r25	; 0x22
    486a:	89 a3       	std	Y+33, r24	; 0x21
    486c:	3f c0       	rjmp	.+126    	; 0x48ec <OWNER_vidMasterRoom+0x34a>
	else if (__tmp > 65535)
    486e:	6b a1       	ldd	r22, Y+35	; 0x23
    4870:	7c a1       	ldd	r23, Y+36	; 0x24
    4872:	8d a1       	ldd	r24, Y+37	; 0x25
    4874:	9e a1       	ldd	r25, Y+38	; 0x26
    4876:	20 e0       	ldi	r18, 0x00	; 0
    4878:	3f ef       	ldi	r19, 0xFF	; 255
    487a:	4f e7       	ldi	r20, 0x7F	; 127
    487c:	57 e4       	ldi	r21, 0x47	; 71
    487e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4882:	18 16       	cp	r1, r24
    4884:	4c f5       	brge	.+82     	; 0x48d8 <OWNER_vidMasterRoom+0x336>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4886:	6f a1       	ldd	r22, Y+39	; 0x27
    4888:	78 a5       	ldd	r23, Y+40	; 0x28
    488a:	89 a5       	ldd	r24, Y+41	; 0x29
    488c:	9a a5       	ldd	r25, Y+42	; 0x2a
    488e:	20 e0       	ldi	r18, 0x00	; 0
    4890:	30 e0       	ldi	r19, 0x00	; 0
    4892:	40 e2       	ldi	r20, 0x20	; 32
    4894:	51 e4       	ldi	r21, 0x41	; 65
    4896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    489a:	dc 01       	movw	r26, r24
    489c:	cb 01       	movw	r24, r22
    489e:	bc 01       	movw	r22, r24
    48a0:	cd 01       	movw	r24, r26
    48a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48a6:	dc 01       	movw	r26, r24
    48a8:	cb 01       	movw	r24, r22
    48aa:	9a a3       	std	Y+34, r25	; 0x22
    48ac:	89 a3       	std	Y+33, r24	; 0x21
    48ae:	0f c0       	rjmp	.+30     	; 0x48ce <OWNER_vidMasterRoom+0x32c>
    48b0:	80 e9       	ldi	r24, 0x90	; 144
    48b2:	91 e0       	ldi	r25, 0x01	; 1
    48b4:	98 a3       	std	Y+32, r25	; 0x20
    48b6:	8f 8f       	std	Y+31, r24	; 0x1f
    48b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    48ba:	98 a1       	ldd	r25, Y+32	; 0x20
    48bc:	01 97       	sbiw	r24, 0x01	; 1
    48be:	f1 f7       	brne	.-4      	; 0x48bc <OWNER_vidMasterRoom+0x31a>
    48c0:	98 a3       	std	Y+32, r25	; 0x20
    48c2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48c4:	89 a1       	ldd	r24, Y+33	; 0x21
    48c6:	9a a1       	ldd	r25, Y+34	; 0x22
    48c8:	01 97       	sbiw	r24, 0x01	; 1
    48ca:	9a a3       	std	Y+34, r25	; 0x22
    48cc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48ce:	89 a1       	ldd	r24, Y+33	; 0x21
    48d0:	9a a1       	ldd	r25, Y+34	; 0x22
    48d2:	00 97       	sbiw	r24, 0x00	; 0
    48d4:	69 f7       	brne	.-38     	; 0x48b0 <OWNER_vidMasterRoom+0x30e>
    48d6:	14 c0       	rjmp	.+40     	; 0x4900 <OWNER_vidMasterRoom+0x35e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48d8:	6b a1       	ldd	r22, Y+35	; 0x23
    48da:	7c a1       	ldd	r23, Y+36	; 0x24
    48dc:	8d a1       	ldd	r24, Y+37	; 0x25
    48de:	9e a1       	ldd	r25, Y+38	; 0x26
    48e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48e4:	dc 01       	movw	r26, r24
    48e6:	cb 01       	movw	r24, r22
    48e8:	9a a3       	std	Y+34, r25	; 0x22
    48ea:	89 a3       	std	Y+33, r24	; 0x21
    48ec:	89 a1       	ldd	r24, Y+33	; 0x21
    48ee:	9a a1       	ldd	r25, Y+34	; 0x22
    48f0:	9e 8f       	std	Y+30, r25	; 0x1e
    48f2:	8d 8f       	std	Y+29, r24	; 0x1d
    48f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    48f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    48f8:	01 97       	sbiw	r24, 0x01	; 1
    48fa:	f1 f7       	brne	.-4      	; 0x48f8 <OWNER_vidMasterRoom+0x356>
    48fc:	9e 8f       	std	Y+30, r25	; 0x1e
    48fe:	8d 8f       	std	Y+29, r24	; 0x1d
	} else { /*.....*/ }
	_delay_ms(100);
	/* list the option available to the user and interact with keypad */
	LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
    4900:	81 e0       	ldi	r24, 0x01	; 1
    4902:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
	LCD_enuSendString("1:DOOR   2:LIGHT");
    4906:	8f e2       	ldi	r24, 0x2F	; 47
    4908:	92 e0       	ldi	r25, 0x02	; 2
    490a:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
	LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN10);
    490e:	81 e0       	ldi	r24, 0x01	; 1
    4910:	6a e0       	ldi	r22, 0x0A	; 10
    4912:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
	LCD_enuSendString("0:BACK");
    4916:	80 e4       	ldi	r24, 0x40	; 64
    4918:	92 e0       	ldi	r25, 0x02	; 2
    491a:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
	u8keyPressed = WAITING_PRESS_KEY;
    491e:	8f ef       	ldi	r24, 0xFF	; 255
    4920:	80 93 ec 02 	sts	0x02EC, r24
    4924:	17 c1       	rjmp	.+558    	; 0x4b54 <OWNER_vidMasterRoom+0x5b2>
	while(u8keyPressed == WAITING_PRESS_KEY){
		KEYPAD_vidGetPressedKey(&u8keyPressed);
    4926:	8c ee       	ldi	r24, 0xEC	; 236
    4928:	92 e0       	ldi	r25, 0x02	; 2
    492a:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <KEYPAD_vidGetPressedKey>
		switch(u8keyPressed){
    492e:	80 91 ec 02 	lds	r24, 0x02EC
    4932:	28 2f       	mov	r18, r24
    4934:	30 e0       	ldi	r19, 0x00	; 0
    4936:	29 96       	adiw	r28, 0x09	; 9
    4938:	3f af       	std	Y+63, r19	; 0x3f
    493a:	2e af       	std	Y+62, r18	; 0x3e
    493c:	29 97       	sbiw	r28, 0x09	; 9
    493e:	29 96       	adiw	r28, 0x09	; 9
    4940:	8e ad       	ldd	r24, Y+62	; 0x3e
    4942:	9f ad       	ldd	r25, Y+63	; 0x3f
    4944:	29 97       	sbiw	r28, 0x09	; 9
    4946:	81 33       	cpi	r24, 0x31	; 49
    4948:	91 05       	cpc	r25, r1
    494a:	89 f0       	breq	.+34     	; 0x496e <OWNER_vidMasterRoom+0x3cc>
    494c:	29 96       	adiw	r28, 0x09	; 9
    494e:	ee ad       	ldd	r30, Y+62	; 0x3e
    4950:	ff ad       	ldd	r31, Y+63	; 0x3f
    4952:	29 97       	sbiw	r28, 0x09	; 9
    4954:	e2 33       	cpi	r30, 0x32	; 50
    4956:	f1 05       	cpc	r31, r1
    4958:	09 f4       	brne	.+2      	; 0x495c <OWNER_vidMasterRoom+0x3ba>
    495a:	81 c0       	rjmp	.+258    	; 0x4a5e <OWNER_vidMasterRoom+0x4bc>
    495c:	29 96       	adiw	r28, 0x09	; 9
    495e:	2e ad       	ldd	r18, Y+62	; 0x3e
    4960:	3f ad       	ldd	r19, Y+63	; 0x3f
    4962:	29 97       	sbiw	r28, 0x09	; 9
    4964:	20 33       	cpi	r18, 0x30	; 48
    4966:	31 05       	cpc	r19, r1
    4968:	09 f4       	brne	.+2      	; 0x496c <OWNER_vidMasterRoom+0x3ca>
    496a:	f4 c0       	rjmp	.+488    	; 0x4b54 <OWNER_vidMasterRoom+0x5b2>
    496c:	f0 c0       	rjmp	.+480    	; 0x4b4e <OWNER_vidMasterRoom+0x5ac>
			case ROOM_DOOR:
				SPI_vidTransceive(MASTER_DOOR_SWITCH_REQUEST);
    496e:	8f e0       	ldi	r24, 0x0F	; 15
    4970:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_vidTransceive>
    4974:	80 e0       	ldi	r24, 0x00	; 0
    4976:	90 e0       	ldi	r25, 0x00	; 0
    4978:	a8 e4       	ldi	r26, 0x48	; 72
    497a:	b2 e4       	ldi	r27, 0x42	; 66
    497c:	89 8f       	std	Y+25, r24	; 0x19
    497e:	9a 8f       	std	Y+26, r25	; 0x1a
    4980:	ab 8f       	std	Y+27, r26	; 0x1b
    4982:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4984:	69 8d       	ldd	r22, Y+25	; 0x19
    4986:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4988:	8b 8d       	ldd	r24, Y+27	; 0x1b
    498a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    498c:	20 e0       	ldi	r18, 0x00	; 0
    498e:	30 e0       	ldi	r19, 0x00	; 0
    4990:	4a e7       	ldi	r20, 0x7A	; 122
    4992:	55 e4       	ldi	r21, 0x45	; 69
    4994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4998:	dc 01       	movw	r26, r24
    499a:	cb 01       	movw	r24, r22
    499c:	8d 8b       	std	Y+21, r24	; 0x15
    499e:	9e 8b       	std	Y+22, r25	; 0x16
    49a0:	af 8b       	std	Y+23, r26	; 0x17
    49a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    49a4:	6d 89       	ldd	r22, Y+21	; 0x15
    49a6:	7e 89       	ldd	r23, Y+22	; 0x16
    49a8:	8f 89       	ldd	r24, Y+23	; 0x17
    49aa:	98 8d       	ldd	r25, Y+24	; 0x18
    49ac:	20 e0       	ldi	r18, 0x00	; 0
    49ae:	30 e0       	ldi	r19, 0x00	; 0
    49b0:	40 e8       	ldi	r20, 0x80	; 128
    49b2:	5f e3       	ldi	r21, 0x3F	; 63
    49b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    49b8:	88 23       	and	r24, r24
    49ba:	2c f4       	brge	.+10     	; 0x49c6 <OWNER_vidMasterRoom+0x424>
		__ticks = 1;
    49bc:	81 e0       	ldi	r24, 0x01	; 1
    49be:	90 e0       	ldi	r25, 0x00	; 0
    49c0:	9c 8b       	std	Y+20, r25	; 0x14
    49c2:	8b 8b       	std	Y+19, r24	; 0x13
    49c4:	3f c0       	rjmp	.+126    	; 0x4a44 <OWNER_vidMasterRoom+0x4a2>
	else if (__tmp > 65535)
    49c6:	6d 89       	ldd	r22, Y+21	; 0x15
    49c8:	7e 89       	ldd	r23, Y+22	; 0x16
    49ca:	8f 89       	ldd	r24, Y+23	; 0x17
    49cc:	98 8d       	ldd	r25, Y+24	; 0x18
    49ce:	20 e0       	ldi	r18, 0x00	; 0
    49d0:	3f ef       	ldi	r19, 0xFF	; 255
    49d2:	4f e7       	ldi	r20, 0x7F	; 127
    49d4:	57 e4       	ldi	r21, 0x47	; 71
    49d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    49da:	18 16       	cp	r1, r24
    49dc:	4c f5       	brge	.+82     	; 0x4a30 <OWNER_vidMasterRoom+0x48e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49de:	69 8d       	ldd	r22, Y+25	; 0x19
    49e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    49e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    49e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    49e6:	20 e0       	ldi	r18, 0x00	; 0
    49e8:	30 e0       	ldi	r19, 0x00	; 0
    49ea:	40 e2       	ldi	r20, 0x20	; 32
    49ec:	51 e4       	ldi	r21, 0x41	; 65
    49ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49f2:	dc 01       	movw	r26, r24
    49f4:	cb 01       	movw	r24, r22
    49f6:	bc 01       	movw	r22, r24
    49f8:	cd 01       	movw	r24, r26
    49fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49fe:	dc 01       	movw	r26, r24
    4a00:	cb 01       	movw	r24, r22
    4a02:	9c 8b       	std	Y+20, r25	; 0x14
    4a04:	8b 8b       	std	Y+19, r24	; 0x13
    4a06:	0f c0       	rjmp	.+30     	; 0x4a26 <OWNER_vidMasterRoom+0x484>
    4a08:	80 e9       	ldi	r24, 0x90	; 144
    4a0a:	91 e0       	ldi	r25, 0x01	; 1
    4a0c:	9a 8b       	std	Y+18, r25	; 0x12
    4a0e:	89 8b       	std	Y+17, r24	; 0x11
    4a10:	89 89       	ldd	r24, Y+17	; 0x11
    4a12:	9a 89       	ldd	r25, Y+18	; 0x12
    4a14:	01 97       	sbiw	r24, 0x01	; 1
    4a16:	f1 f7       	brne	.-4      	; 0x4a14 <OWNER_vidMasterRoom+0x472>
    4a18:	9a 8b       	std	Y+18, r25	; 0x12
    4a1a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a1c:	8b 89       	ldd	r24, Y+19	; 0x13
    4a1e:	9c 89       	ldd	r25, Y+20	; 0x14
    4a20:	01 97       	sbiw	r24, 0x01	; 1
    4a22:	9c 8b       	std	Y+20, r25	; 0x14
    4a24:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a26:	8b 89       	ldd	r24, Y+19	; 0x13
    4a28:	9c 89       	ldd	r25, Y+20	; 0x14
    4a2a:	00 97       	sbiw	r24, 0x00	; 0
    4a2c:	69 f7       	brne	.-38     	; 0x4a08 <OWNER_vidMasterRoom+0x466>
    4a2e:	14 c0       	rjmp	.+40     	; 0x4a58 <OWNER_vidMasterRoom+0x4b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a30:	6d 89       	ldd	r22, Y+21	; 0x15
    4a32:	7e 89       	ldd	r23, Y+22	; 0x16
    4a34:	8f 89       	ldd	r24, Y+23	; 0x17
    4a36:	98 8d       	ldd	r25, Y+24	; 0x18
    4a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a3c:	dc 01       	movw	r26, r24
    4a3e:	cb 01       	movw	r24, r22
    4a40:	9c 8b       	std	Y+20, r25	; 0x14
    4a42:	8b 8b       	std	Y+19, r24	; 0x13
    4a44:	8b 89       	ldd	r24, Y+19	; 0x13
    4a46:	9c 89       	ldd	r25, Y+20	; 0x14
    4a48:	98 8b       	std	Y+16, r25	; 0x10
    4a4a:	8f 87       	std	Y+15, r24	; 0x0f
    4a4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a4e:	98 89       	ldd	r25, Y+16	; 0x10
    4a50:	01 97       	sbiw	r24, 0x01	; 1
    4a52:	f1 f7       	brne	.-4      	; 0x4a50 <OWNER_vidMasterRoom+0x4ae>
    4a54:	98 8b       	std	Y+16, r25	; 0x10
    4a56:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(50);
				OWNER_vidMasterRoom();
    4a58:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <OWNER_vidMasterRoom>
    4a5c:	7b c0       	rjmp	.+246    	; 0x4b54 <OWNER_vidMasterRoom+0x5b2>
				break;
			case ROOM_LIGHT:
				SPI_vidTransceive(MASTER_LIGHT_SWITCH_REQUEST);
    4a5e:	8f e1       	ldi	r24, 0x1F	; 31
    4a60:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_vidTransceive>
    4a64:	80 e0       	ldi	r24, 0x00	; 0
    4a66:	90 e0       	ldi	r25, 0x00	; 0
    4a68:	a8 e4       	ldi	r26, 0x48	; 72
    4a6a:	b2 e4       	ldi	r27, 0x42	; 66
    4a6c:	8b 87       	std	Y+11, r24	; 0x0b
    4a6e:	9c 87       	std	Y+12, r25	; 0x0c
    4a70:	ad 87       	std	Y+13, r26	; 0x0d
    4a72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a74:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a76:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a78:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a7c:	20 e0       	ldi	r18, 0x00	; 0
    4a7e:	30 e0       	ldi	r19, 0x00	; 0
    4a80:	4a e7       	ldi	r20, 0x7A	; 122
    4a82:	55 e4       	ldi	r21, 0x45	; 69
    4a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a88:	dc 01       	movw	r26, r24
    4a8a:	cb 01       	movw	r24, r22
    4a8c:	8f 83       	std	Y+7, r24	; 0x07
    4a8e:	98 87       	std	Y+8, r25	; 0x08
    4a90:	a9 87       	std	Y+9, r26	; 0x09
    4a92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4a94:	6f 81       	ldd	r22, Y+7	; 0x07
    4a96:	78 85       	ldd	r23, Y+8	; 0x08
    4a98:	89 85       	ldd	r24, Y+9	; 0x09
    4a9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a9c:	20 e0       	ldi	r18, 0x00	; 0
    4a9e:	30 e0       	ldi	r19, 0x00	; 0
    4aa0:	40 e8       	ldi	r20, 0x80	; 128
    4aa2:	5f e3       	ldi	r21, 0x3F	; 63
    4aa4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4aa8:	88 23       	and	r24, r24
    4aaa:	2c f4       	brge	.+10     	; 0x4ab6 <OWNER_vidMasterRoom+0x514>
		__ticks = 1;
    4aac:	81 e0       	ldi	r24, 0x01	; 1
    4aae:	90 e0       	ldi	r25, 0x00	; 0
    4ab0:	9e 83       	std	Y+6, r25	; 0x06
    4ab2:	8d 83       	std	Y+5, r24	; 0x05
    4ab4:	3f c0       	rjmp	.+126    	; 0x4b34 <OWNER_vidMasterRoom+0x592>
	else if (__tmp > 65535)
    4ab6:	6f 81       	ldd	r22, Y+7	; 0x07
    4ab8:	78 85       	ldd	r23, Y+8	; 0x08
    4aba:	89 85       	ldd	r24, Y+9	; 0x09
    4abc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4abe:	20 e0       	ldi	r18, 0x00	; 0
    4ac0:	3f ef       	ldi	r19, 0xFF	; 255
    4ac2:	4f e7       	ldi	r20, 0x7F	; 127
    4ac4:	57 e4       	ldi	r21, 0x47	; 71
    4ac6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4aca:	18 16       	cp	r1, r24
    4acc:	4c f5       	brge	.+82     	; 0x4b20 <OWNER_vidMasterRoom+0x57e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ace:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ad0:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ad2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ad4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ad6:	20 e0       	ldi	r18, 0x00	; 0
    4ad8:	30 e0       	ldi	r19, 0x00	; 0
    4ada:	40 e2       	ldi	r20, 0x20	; 32
    4adc:	51 e4       	ldi	r21, 0x41	; 65
    4ade:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ae2:	dc 01       	movw	r26, r24
    4ae4:	cb 01       	movw	r24, r22
    4ae6:	bc 01       	movw	r22, r24
    4ae8:	cd 01       	movw	r24, r26
    4aea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4aee:	dc 01       	movw	r26, r24
    4af0:	cb 01       	movw	r24, r22
    4af2:	9e 83       	std	Y+6, r25	; 0x06
    4af4:	8d 83       	std	Y+5, r24	; 0x05
    4af6:	0f c0       	rjmp	.+30     	; 0x4b16 <OWNER_vidMasterRoom+0x574>
    4af8:	80 e9       	ldi	r24, 0x90	; 144
    4afa:	91 e0       	ldi	r25, 0x01	; 1
    4afc:	9c 83       	std	Y+4, r25	; 0x04
    4afe:	8b 83       	std	Y+3, r24	; 0x03
    4b00:	8b 81       	ldd	r24, Y+3	; 0x03
    4b02:	9c 81       	ldd	r25, Y+4	; 0x04
    4b04:	01 97       	sbiw	r24, 0x01	; 1
    4b06:	f1 f7       	brne	.-4      	; 0x4b04 <OWNER_vidMasterRoom+0x562>
    4b08:	9c 83       	std	Y+4, r25	; 0x04
    4b0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b0c:	8d 81       	ldd	r24, Y+5	; 0x05
    4b0e:	9e 81       	ldd	r25, Y+6	; 0x06
    4b10:	01 97       	sbiw	r24, 0x01	; 1
    4b12:	9e 83       	std	Y+6, r25	; 0x06
    4b14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b16:	8d 81       	ldd	r24, Y+5	; 0x05
    4b18:	9e 81       	ldd	r25, Y+6	; 0x06
    4b1a:	00 97       	sbiw	r24, 0x00	; 0
    4b1c:	69 f7       	brne	.-38     	; 0x4af8 <OWNER_vidMasterRoom+0x556>
    4b1e:	14 c0       	rjmp	.+40     	; 0x4b48 <OWNER_vidMasterRoom+0x5a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b20:	6f 81       	ldd	r22, Y+7	; 0x07
    4b22:	78 85       	ldd	r23, Y+8	; 0x08
    4b24:	89 85       	ldd	r24, Y+9	; 0x09
    4b26:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b2c:	dc 01       	movw	r26, r24
    4b2e:	cb 01       	movw	r24, r22
    4b30:	9e 83       	std	Y+6, r25	; 0x06
    4b32:	8d 83       	std	Y+5, r24	; 0x05
    4b34:	8d 81       	ldd	r24, Y+5	; 0x05
    4b36:	9e 81       	ldd	r25, Y+6	; 0x06
    4b38:	9a 83       	std	Y+2, r25	; 0x02
    4b3a:	89 83       	std	Y+1, r24	; 0x01
    4b3c:	89 81       	ldd	r24, Y+1	; 0x01
    4b3e:	9a 81       	ldd	r25, Y+2	; 0x02
    4b40:	01 97       	sbiw	r24, 0x01	; 1
    4b42:	f1 f7       	brne	.-4      	; 0x4b40 <OWNER_vidMasterRoom+0x59e>
    4b44:	9a 83       	std	Y+2, r25	; 0x02
    4b46:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(50);
				OWNER_vidMasterRoom();
    4b48:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <OWNER_vidMasterRoom>
    4b4c:	03 c0       	rjmp	.+6      	; 0x4b54 <OWNER_vidMasterRoom+0x5b2>
				break;
			case BACK:
				continue;
			default:
				u8keyPressed = WAITING_PRESS_KEY;
    4b4e:	8f ef       	ldi	r24, 0xFF	; 255
    4b50:	80 93 ec 02 	sts	0x02EC, r24
	LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
	LCD_enuSendString("1:DOOR   2:LIGHT");
	LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN10);
	LCD_enuSendString("0:BACK");
	u8keyPressed = WAITING_PRESS_KEY;
	while(u8keyPressed == WAITING_PRESS_KEY){
    4b54:	80 91 ec 02 	lds	r24, 0x02EC
    4b58:	8f 3f       	cpi	r24, 0xFF	; 255
    4b5a:	09 f4       	brne	.+2      	; 0x4b5e <OWNER_vidMasterRoom+0x5bc>
    4b5c:	e4 ce       	rjmp	.-568    	; 0x4926 <OWNER_vidMasterRoom+0x384>
			default:
				u8keyPressed = WAITING_PRESS_KEY;
				break;
		}//end of #switch case
	}// end of #while loop
}//end of OWNER_vidMasterRoom()
    4b5e:	c8 5b       	subi	r28, 0xB8	; 184
    4b60:	df 4f       	sbci	r29, 0xFF	; 255
    4b62:	0f b6       	in	r0, 0x3f	; 63
    4b64:	f8 94       	cli
    4b66:	de bf       	out	0x3e, r29	; 62
    4b68:	0f be       	out	0x3f, r0	; 63
    4b6a:	cd bf       	out	0x3d, r28	; 61
    4b6c:	cf 91       	pop	r28
    4b6e:	df 91       	pop	r29
    4b70:	1f 91       	pop	r17
    4b72:	0f 91       	pop	r16
    4b74:	08 95       	ret

00004b76 <OWNER_vidTenantRoom>:
 * 				- after each switching recall the function to update the room status
 * 				- back to the previous screen option is available
 * Arguments: void
 * Return:	void
 */
void OWNER_vidTenantRoom(void){
    4b76:	0f 93       	push	r16
    4b78:	1f 93       	push	r17
    4b7a:	df 93       	push	r29
    4b7c:	cf 93       	push	r28
    4b7e:	cd b7       	in	r28, 0x3d	; 61
    4b80:	de b7       	in	r29, 0x3e	; 62
    4b82:	c8 54       	subi	r28, 0x48	; 72
    4b84:	d0 40       	sbci	r29, 0x00	; 0
    4b86:	0f b6       	in	r0, 0x3f	; 63
    4b88:	f8 94       	cli
    4b8a:	de bf       	out	0x3e, r29	; 62
    4b8c:	0f be       	out	0x3f, r0	; 63
    4b8e:	cd bf       	out	0x3d, r28	; 61
	/* clear the LCD screen */
	LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
    4b90:	81 e0       	ldi	r24, 0x01	; 1
    4b92:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
	/* send request to the slave MC to send back the room status */
	SPI_vidTransceive(GET_TENANT_DOOR_STATUS);
    4b96:	89 e0       	ldi	r24, 0x09	; 9
    4b98:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_vidTransceive>
    4b9c:	fe 01       	movw	r30, r28
    4b9e:	ed 5b       	subi	r30, 0xBD	; 189
    4ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba2:	80 e0       	ldi	r24, 0x00	; 0
    4ba4:	90 e0       	ldi	r25, 0x00	; 0
    4ba6:	a8 e4       	ldi	r26, 0x48	; 72
    4ba8:	b2 e4       	ldi	r27, 0x42	; 66
    4baa:	80 83       	st	Z, r24
    4bac:	91 83       	std	Z+1, r25	; 0x01
    4bae:	a2 83       	std	Z+2, r26	; 0x02
    4bb0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bb2:	8e 01       	movw	r16, r28
    4bb4:	01 5c       	subi	r16, 0xC1	; 193
    4bb6:	1f 4f       	sbci	r17, 0xFF	; 255
    4bb8:	fe 01       	movw	r30, r28
    4bba:	ed 5b       	subi	r30, 0xBD	; 189
    4bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    4bbe:	60 81       	ld	r22, Z
    4bc0:	71 81       	ldd	r23, Z+1	; 0x01
    4bc2:	82 81       	ldd	r24, Z+2	; 0x02
    4bc4:	93 81       	ldd	r25, Z+3	; 0x03
    4bc6:	20 e0       	ldi	r18, 0x00	; 0
    4bc8:	30 e0       	ldi	r19, 0x00	; 0
    4bca:	4a e7       	ldi	r20, 0x7A	; 122
    4bcc:	55 e4       	ldi	r21, 0x45	; 69
    4bce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bd2:	dc 01       	movw	r26, r24
    4bd4:	cb 01       	movw	r24, r22
    4bd6:	f8 01       	movw	r30, r16
    4bd8:	80 83       	st	Z, r24
    4bda:	91 83       	std	Z+1, r25	; 0x01
    4bdc:	a2 83       	std	Z+2, r26	; 0x02
    4bde:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4be0:	fe 01       	movw	r30, r28
    4be2:	ff 96       	adiw	r30, 0x3f	; 63
    4be4:	60 81       	ld	r22, Z
    4be6:	71 81       	ldd	r23, Z+1	; 0x01
    4be8:	82 81       	ldd	r24, Z+2	; 0x02
    4bea:	93 81       	ldd	r25, Z+3	; 0x03
    4bec:	20 e0       	ldi	r18, 0x00	; 0
    4bee:	30 e0       	ldi	r19, 0x00	; 0
    4bf0:	40 e8       	ldi	r20, 0x80	; 128
    4bf2:	5f e3       	ldi	r21, 0x3F	; 63
    4bf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4bf8:	88 23       	and	r24, r24
    4bfa:	2c f4       	brge	.+10     	; 0x4c06 <OWNER_vidTenantRoom+0x90>
		__ticks = 1;
    4bfc:	81 e0       	ldi	r24, 0x01	; 1
    4bfe:	90 e0       	ldi	r25, 0x00	; 0
    4c00:	9e af       	std	Y+62, r25	; 0x3e
    4c02:	8d af       	std	Y+61, r24	; 0x3d
    4c04:	46 c0       	rjmp	.+140    	; 0x4c92 <OWNER_vidTenantRoom+0x11c>
	else if (__tmp > 65535)
    4c06:	fe 01       	movw	r30, r28
    4c08:	ff 96       	adiw	r30, 0x3f	; 63
    4c0a:	60 81       	ld	r22, Z
    4c0c:	71 81       	ldd	r23, Z+1	; 0x01
    4c0e:	82 81       	ldd	r24, Z+2	; 0x02
    4c10:	93 81       	ldd	r25, Z+3	; 0x03
    4c12:	20 e0       	ldi	r18, 0x00	; 0
    4c14:	3f ef       	ldi	r19, 0xFF	; 255
    4c16:	4f e7       	ldi	r20, 0x7F	; 127
    4c18:	57 e4       	ldi	r21, 0x47	; 71
    4c1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4c1e:	18 16       	cp	r1, r24
    4c20:	64 f5       	brge	.+88     	; 0x4c7a <OWNER_vidTenantRoom+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c22:	fe 01       	movw	r30, r28
    4c24:	ed 5b       	subi	r30, 0xBD	; 189
    4c26:	ff 4f       	sbci	r31, 0xFF	; 255
    4c28:	60 81       	ld	r22, Z
    4c2a:	71 81       	ldd	r23, Z+1	; 0x01
    4c2c:	82 81       	ldd	r24, Z+2	; 0x02
    4c2e:	93 81       	ldd	r25, Z+3	; 0x03
    4c30:	20 e0       	ldi	r18, 0x00	; 0
    4c32:	30 e0       	ldi	r19, 0x00	; 0
    4c34:	40 e2       	ldi	r20, 0x20	; 32
    4c36:	51 e4       	ldi	r21, 0x41	; 65
    4c38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c3c:	dc 01       	movw	r26, r24
    4c3e:	cb 01       	movw	r24, r22
    4c40:	bc 01       	movw	r22, r24
    4c42:	cd 01       	movw	r24, r26
    4c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c48:	dc 01       	movw	r26, r24
    4c4a:	cb 01       	movw	r24, r22
    4c4c:	9e af       	std	Y+62, r25	; 0x3e
    4c4e:	8d af       	std	Y+61, r24	; 0x3d
    4c50:	0f c0       	rjmp	.+30     	; 0x4c70 <OWNER_vidTenantRoom+0xfa>
    4c52:	80 e9       	ldi	r24, 0x90	; 144
    4c54:	91 e0       	ldi	r25, 0x01	; 1
    4c56:	9c af       	std	Y+60, r25	; 0x3c
    4c58:	8b af       	std	Y+59, r24	; 0x3b
    4c5a:	8b ad       	ldd	r24, Y+59	; 0x3b
    4c5c:	9c ad       	ldd	r25, Y+60	; 0x3c
    4c5e:	01 97       	sbiw	r24, 0x01	; 1
    4c60:	f1 f7       	brne	.-4      	; 0x4c5e <OWNER_vidTenantRoom+0xe8>
    4c62:	9c af       	std	Y+60, r25	; 0x3c
    4c64:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c66:	8d ad       	ldd	r24, Y+61	; 0x3d
    4c68:	9e ad       	ldd	r25, Y+62	; 0x3e
    4c6a:	01 97       	sbiw	r24, 0x01	; 1
    4c6c:	9e af       	std	Y+62, r25	; 0x3e
    4c6e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c70:	8d ad       	ldd	r24, Y+61	; 0x3d
    4c72:	9e ad       	ldd	r25, Y+62	; 0x3e
    4c74:	00 97       	sbiw	r24, 0x00	; 0
    4c76:	69 f7       	brne	.-38     	; 0x4c52 <OWNER_vidTenantRoom+0xdc>
    4c78:	16 c0       	rjmp	.+44     	; 0x4ca6 <OWNER_vidTenantRoom+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c7a:	fe 01       	movw	r30, r28
    4c7c:	ff 96       	adiw	r30, 0x3f	; 63
    4c7e:	60 81       	ld	r22, Z
    4c80:	71 81       	ldd	r23, Z+1	; 0x01
    4c82:	82 81       	ldd	r24, Z+2	; 0x02
    4c84:	93 81       	ldd	r25, Z+3	; 0x03
    4c86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c8a:	dc 01       	movw	r26, r24
    4c8c:	cb 01       	movw	r24, r22
    4c8e:	9e af       	std	Y+62, r25	; 0x3e
    4c90:	8d af       	std	Y+61, r24	; 0x3d
    4c92:	8d ad       	ldd	r24, Y+61	; 0x3d
    4c94:	9e ad       	ldd	r25, Y+62	; 0x3e
    4c96:	9a af       	std	Y+58, r25	; 0x3a
    4c98:	89 af       	std	Y+57, r24	; 0x39
    4c9a:	89 ad       	ldd	r24, Y+57	; 0x39
    4c9c:	9a ad       	ldd	r25, Y+58	; 0x3a
    4c9e:	01 97       	sbiw	r24, 0x01	; 1
    4ca0:	f1 f7       	brne	.-4      	; 0x4c9e <OWNER_vidTenantRoom+0x128>
    4ca2:	9a af       	std	Y+58, r25	; 0x3a
    4ca4:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);
	u8SPIrequest = SPI_vidTransceive(DONT_CARE);
    4ca6:	8f ef       	ldi	r24, 0xFF	; 255
    4ca8:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_vidTransceive>
    4cac:	80 93 eb 02 	sts	0x02EB, r24
	if(u8SPIrequest == TENANT_DOOR_CLOSE){
    4cb0:	80 91 eb 02 	lds	r24, 0x02EB
    4cb4:	8b 30       	cpi	r24, 0x0B	; 11
    4cb6:	29 f4       	brne	.+10     	; 0x4cc2 <OWNER_vidTenantRoom+0x14c>
		LCD_enuSendString("DOOR:LOCK ");
    4cb8:	8a e0       	ldi	r24, 0x0A	; 10
    4cba:	92 e0       	ldi	r25, 0x02	; 2
    4cbc:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
    4cc0:	08 c0       	rjmp	.+16     	; 0x4cd2 <OWNER_vidTenantRoom+0x15c>
	} else if(u8SPIrequest == TENANT_DOOR_OPEN){
    4cc2:	80 91 eb 02 	lds	r24, 0x02EB
    4cc6:	8a 30       	cpi	r24, 0x0A	; 10
    4cc8:	21 f4       	brne	.+8      	; 0x4cd2 <OWNER_vidTenantRoom+0x15c>
		 LCD_enuSendString("DOOR:OPEN ");
    4cca:	85 e1       	ldi	r24, 0x15	; 21
    4ccc:	92 e0       	ldi	r25, 0x02	; 2
    4cce:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
	} else { /*.....*/ }
	LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN0);
    4cd2:	81 e0       	ldi	r24, 0x01	; 1
    4cd4:	60 e0       	ldi	r22, 0x00	; 0
    4cd6:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
	SPI_vidTransceive(GET_TENANT_LIGHT_STATUS);
    4cda:	8c e0       	ldi	r24, 0x0C	; 12
    4cdc:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_vidTransceive>
    4ce0:	80 e0       	ldi	r24, 0x00	; 0
    4ce2:	90 e0       	ldi	r25, 0x00	; 0
    4ce4:	a8 e4       	ldi	r26, 0x48	; 72
    4ce6:	b2 e4       	ldi	r27, 0x42	; 66
    4ce8:	8d ab       	std	Y+53, r24	; 0x35
    4cea:	9e ab       	std	Y+54, r25	; 0x36
    4cec:	af ab       	std	Y+55, r26	; 0x37
    4cee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cf0:	6d a9       	ldd	r22, Y+53	; 0x35
    4cf2:	7e a9       	ldd	r23, Y+54	; 0x36
    4cf4:	8f a9       	ldd	r24, Y+55	; 0x37
    4cf6:	98 ad       	ldd	r25, Y+56	; 0x38
    4cf8:	20 e0       	ldi	r18, 0x00	; 0
    4cfa:	30 e0       	ldi	r19, 0x00	; 0
    4cfc:	4a e7       	ldi	r20, 0x7A	; 122
    4cfe:	55 e4       	ldi	r21, 0x45	; 69
    4d00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d04:	dc 01       	movw	r26, r24
    4d06:	cb 01       	movw	r24, r22
    4d08:	89 ab       	std	Y+49, r24	; 0x31
    4d0a:	9a ab       	std	Y+50, r25	; 0x32
    4d0c:	ab ab       	std	Y+51, r26	; 0x33
    4d0e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4d10:	69 a9       	ldd	r22, Y+49	; 0x31
    4d12:	7a a9       	ldd	r23, Y+50	; 0x32
    4d14:	8b a9       	ldd	r24, Y+51	; 0x33
    4d16:	9c a9       	ldd	r25, Y+52	; 0x34
    4d18:	20 e0       	ldi	r18, 0x00	; 0
    4d1a:	30 e0       	ldi	r19, 0x00	; 0
    4d1c:	40 e8       	ldi	r20, 0x80	; 128
    4d1e:	5f e3       	ldi	r21, 0x3F	; 63
    4d20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4d24:	88 23       	and	r24, r24
    4d26:	2c f4       	brge	.+10     	; 0x4d32 <OWNER_vidTenantRoom+0x1bc>
		__ticks = 1;
    4d28:	81 e0       	ldi	r24, 0x01	; 1
    4d2a:	90 e0       	ldi	r25, 0x00	; 0
    4d2c:	98 ab       	std	Y+48, r25	; 0x30
    4d2e:	8f a7       	std	Y+47, r24	; 0x2f
    4d30:	3f c0       	rjmp	.+126    	; 0x4db0 <OWNER_vidTenantRoom+0x23a>
	else if (__tmp > 65535)
    4d32:	69 a9       	ldd	r22, Y+49	; 0x31
    4d34:	7a a9       	ldd	r23, Y+50	; 0x32
    4d36:	8b a9       	ldd	r24, Y+51	; 0x33
    4d38:	9c a9       	ldd	r25, Y+52	; 0x34
    4d3a:	20 e0       	ldi	r18, 0x00	; 0
    4d3c:	3f ef       	ldi	r19, 0xFF	; 255
    4d3e:	4f e7       	ldi	r20, 0x7F	; 127
    4d40:	57 e4       	ldi	r21, 0x47	; 71
    4d42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4d46:	18 16       	cp	r1, r24
    4d48:	4c f5       	brge	.+82     	; 0x4d9c <OWNER_vidTenantRoom+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d4a:	6d a9       	ldd	r22, Y+53	; 0x35
    4d4c:	7e a9       	ldd	r23, Y+54	; 0x36
    4d4e:	8f a9       	ldd	r24, Y+55	; 0x37
    4d50:	98 ad       	ldd	r25, Y+56	; 0x38
    4d52:	20 e0       	ldi	r18, 0x00	; 0
    4d54:	30 e0       	ldi	r19, 0x00	; 0
    4d56:	40 e2       	ldi	r20, 0x20	; 32
    4d58:	51 e4       	ldi	r21, 0x41	; 65
    4d5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d5e:	dc 01       	movw	r26, r24
    4d60:	cb 01       	movw	r24, r22
    4d62:	bc 01       	movw	r22, r24
    4d64:	cd 01       	movw	r24, r26
    4d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d6a:	dc 01       	movw	r26, r24
    4d6c:	cb 01       	movw	r24, r22
    4d6e:	98 ab       	std	Y+48, r25	; 0x30
    4d70:	8f a7       	std	Y+47, r24	; 0x2f
    4d72:	0f c0       	rjmp	.+30     	; 0x4d92 <OWNER_vidTenantRoom+0x21c>
    4d74:	80 e9       	ldi	r24, 0x90	; 144
    4d76:	91 e0       	ldi	r25, 0x01	; 1
    4d78:	9e a7       	std	Y+46, r25	; 0x2e
    4d7a:	8d a7       	std	Y+45, r24	; 0x2d
    4d7c:	8d a5       	ldd	r24, Y+45	; 0x2d
    4d7e:	9e a5       	ldd	r25, Y+46	; 0x2e
    4d80:	01 97       	sbiw	r24, 0x01	; 1
    4d82:	f1 f7       	brne	.-4      	; 0x4d80 <OWNER_vidTenantRoom+0x20a>
    4d84:	9e a7       	std	Y+46, r25	; 0x2e
    4d86:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d88:	8f a5       	ldd	r24, Y+47	; 0x2f
    4d8a:	98 a9       	ldd	r25, Y+48	; 0x30
    4d8c:	01 97       	sbiw	r24, 0x01	; 1
    4d8e:	98 ab       	std	Y+48, r25	; 0x30
    4d90:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d92:	8f a5       	ldd	r24, Y+47	; 0x2f
    4d94:	98 a9       	ldd	r25, Y+48	; 0x30
    4d96:	00 97       	sbiw	r24, 0x00	; 0
    4d98:	69 f7       	brne	.-38     	; 0x4d74 <OWNER_vidTenantRoom+0x1fe>
    4d9a:	14 c0       	rjmp	.+40     	; 0x4dc4 <OWNER_vidTenantRoom+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d9c:	69 a9       	ldd	r22, Y+49	; 0x31
    4d9e:	7a a9       	ldd	r23, Y+50	; 0x32
    4da0:	8b a9       	ldd	r24, Y+51	; 0x33
    4da2:	9c a9       	ldd	r25, Y+52	; 0x34
    4da4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4da8:	dc 01       	movw	r26, r24
    4daa:	cb 01       	movw	r24, r22
    4dac:	98 ab       	std	Y+48, r25	; 0x30
    4dae:	8f a7       	std	Y+47, r24	; 0x2f
    4db0:	8f a5       	ldd	r24, Y+47	; 0x2f
    4db2:	98 a9       	ldd	r25, Y+48	; 0x30
    4db4:	9c a7       	std	Y+44, r25	; 0x2c
    4db6:	8b a7       	std	Y+43, r24	; 0x2b
    4db8:	8b a5       	ldd	r24, Y+43	; 0x2b
    4dba:	9c a5       	ldd	r25, Y+44	; 0x2c
    4dbc:	01 97       	sbiw	r24, 0x01	; 1
    4dbe:	f1 f7       	brne	.-4      	; 0x4dbc <OWNER_vidTenantRoom+0x246>
    4dc0:	9c a7       	std	Y+44, r25	; 0x2c
    4dc2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	u8SPIrequest = SPI_vidTransceive(DONT_CARE);
    4dc4:	8f ef       	ldi	r24, 0xFF	; 255
    4dc6:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_vidTransceive>
    4dca:	80 93 eb 02 	sts	0x02EB, r24
	if(u8SPIrequest == TENANT_LIGHT_OFF){
    4dce:	80 91 eb 02 	lds	r24, 0x02EB
    4dd2:	8e 30       	cpi	r24, 0x0E	; 14
    4dd4:	29 f4       	brne	.+10     	; 0x4de0 <OWNER_vidTenantRoom+0x26a>
		LCD_enuSendString("LED:OFF");
    4dd6:	80 e2       	ldi	r24, 0x20	; 32
    4dd8:	92 e0       	ldi	r25, 0x02	; 2
    4dda:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
    4dde:	08 c0       	rjmp	.+16     	; 0x4df0 <OWNER_vidTenantRoom+0x27a>
	} else if(u8SPIrequest == TENANT_LIGHT_ON){
    4de0:	80 91 eb 02 	lds	r24, 0x02EB
    4de4:	8d 30       	cpi	r24, 0x0D	; 13
    4de6:	21 f4       	brne	.+8      	; 0x4df0 <OWNER_vidTenantRoom+0x27a>
		 LCD_enuSendString("LED:ON");
    4de8:	88 e2       	ldi	r24, 0x28	; 40
    4dea:	92 e0       	ldi	r25, 0x02	; 2
    4dec:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
    4df0:	80 e0       	ldi	r24, 0x00	; 0
    4df2:	90 e0       	ldi	r25, 0x00	; 0
    4df4:	a8 ec       	ldi	r26, 0xC8	; 200
    4df6:	b2 e4       	ldi	r27, 0x42	; 66
    4df8:	8f a3       	std	Y+39, r24	; 0x27
    4dfa:	98 a7       	std	Y+40, r25	; 0x28
    4dfc:	a9 a7       	std	Y+41, r26	; 0x29
    4dfe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e00:	6f a1       	ldd	r22, Y+39	; 0x27
    4e02:	78 a5       	ldd	r23, Y+40	; 0x28
    4e04:	89 a5       	ldd	r24, Y+41	; 0x29
    4e06:	9a a5       	ldd	r25, Y+42	; 0x2a
    4e08:	20 e0       	ldi	r18, 0x00	; 0
    4e0a:	30 e0       	ldi	r19, 0x00	; 0
    4e0c:	4a e7       	ldi	r20, 0x7A	; 122
    4e0e:	55 e4       	ldi	r21, 0x45	; 69
    4e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e14:	dc 01       	movw	r26, r24
    4e16:	cb 01       	movw	r24, r22
    4e18:	8b a3       	std	Y+35, r24	; 0x23
    4e1a:	9c a3       	std	Y+36, r25	; 0x24
    4e1c:	ad a3       	std	Y+37, r26	; 0x25
    4e1e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4e20:	6b a1       	ldd	r22, Y+35	; 0x23
    4e22:	7c a1       	ldd	r23, Y+36	; 0x24
    4e24:	8d a1       	ldd	r24, Y+37	; 0x25
    4e26:	9e a1       	ldd	r25, Y+38	; 0x26
    4e28:	20 e0       	ldi	r18, 0x00	; 0
    4e2a:	30 e0       	ldi	r19, 0x00	; 0
    4e2c:	40 e8       	ldi	r20, 0x80	; 128
    4e2e:	5f e3       	ldi	r21, 0x3F	; 63
    4e30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4e34:	88 23       	and	r24, r24
    4e36:	2c f4       	brge	.+10     	; 0x4e42 <OWNER_vidTenantRoom+0x2cc>
		__ticks = 1;
    4e38:	81 e0       	ldi	r24, 0x01	; 1
    4e3a:	90 e0       	ldi	r25, 0x00	; 0
    4e3c:	9a a3       	std	Y+34, r25	; 0x22
    4e3e:	89 a3       	std	Y+33, r24	; 0x21
    4e40:	3f c0       	rjmp	.+126    	; 0x4ec0 <OWNER_vidTenantRoom+0x34a>
	else if (__tmp > 65535)
    4e42:	6b a1       	ldd	r22, Y+35	; 0x23
    4e44:	7c a1       	ldd	r23, Y+36	; 0x24
    4e46:	8d a1       	ldd	r24, Y+37	; 0x25
    4e48:	9e a1       	ldd	r25, Y+38	; 0x26
    4e4a:	20 e0       	ldi	r18, 0x00	; 0
    4e4c:	3f ef       	ldi	r19, 0xFF	; 255
    4e4e:	4f e7       	ldi	r20, 0x7F	; 127
    4e50:	57 e4       	ldi	r21, 0x47	; 71
    4e52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4e56:	18 16       	cp	r1, r24
    4e58:	4c f5       	brge	.+82     	; 0x4eac <OWNER_vidTenantRoom+0x336>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e5a:	6f a1       	ldd	r22, Y+39	; 0x27
    4e5c:	78 a5       	ldd	r23, Y+40	; 0x28
    4e5e:	89 a5       	ldd	r24, Y+41	; 0x29
    4e60:	9a a5       	ldd	r25, Y+42	; 0x2a
    4e62:	20 e0       	ldi	r18, 0x00	; 0
    4e64:	30 e0       	ldi	r19, 0x00	; 0
    4e66:	40 e2       	ldi	r20, 0x20	; 32
    4e68:	51 e4       	ldi	r21, 0x41	; 65
    4e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e6e:	dc 01       	movw	r26, r24
    4e70:	cb 01       	movw	r24, r22
    4e72:	bc 01       	movw	r22, r24
    4e74:	cd 01       	movw	r24, r26
    4e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e7a:	dc 01       	movw	r26, r24
    4e7c:	cb 01       	movw	r24, r22
    4e7e:	9a a3       	std	Y+34, r25	; 0x22
    4e80:	89 a3       	std	Y+33, r24	; 0x21
    4e82:	0f c0       	rjmp	.+30     	; 0x4ea2 <OWNER_vidTenantRoom+0x32c>
    4e84:	80 e9       	ldi	r24, 0x90	; 144
    4e86:	91 e0       	ldi	r25, 0x01	; 1
    4e88:	98 a3       	std	Y+32, r25	; 0x20
    4e8a:	8f 8f       	std	Y+31, r24	; 0x1f
    4e8c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4e8e:	98 a1       	ldd	r25, Y+32	; 0x20
    4e90:	01 97       	sbiw	r24, 0x01	; 1
    4e92:	f1 f7       	brne	.-4      	; 0x4e90 <OWNER_vidTenantRoom+0x31a>
    4e94:	98 a3       	std	Y+32, r25	; 0x20
    4e96:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e98:	89 a1       	ldd	r24, Y+33	; 0x21
    4e9a:	9a a1       	ldd	r25, Y+34	; 0x22
    4e9c:	01 97       	sbiw	r24, 0x01	; 1
    4e9e:	9a a3       	std	Y+34, r25	; 0x22
    4ea0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ea2:	89 a1       	ldd	r24, Y+33	; 0x21
    4ea4:	9a a1       	ldd	r25, Y+34	; 0x22
    4ea6:	00 97       	sbiw	r24, 0x00	; 0
    4ea8:	69 f7       	brne	.-38     	; 0x4e84 <OWNER_vidTenantRoom+0x30e>
    4eaa:	14 c0       	rjmp	.+40     	; 0x4ed4 <OWNER_vidTenantRoom+0x35e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4eac:	6b a1       	ldd	r22, Y+35	; 0x23
    4eae:	7c a1       	ldd	r23, Y+36	; 0x24
    4eb0:	8d a1       	ldd	r24, Y+37	; 0x25
    4eb2:	9e a1       	ldd	r25, Y+38	; 0x26
    4eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4eb8:	dc 01       	movw	r26, r24
    4eba:	cb 01       	movw	r24, r22
    4ebc:	9a a3       	std	Y+34, r25	; 0x22
    4ebe:	89 a3       	std	Y+33, r24	; 0x21
    4ec0:	89 a1       	ldd	r24, Y+33	; 0x21
    4ec2:	9a a1       	ldd	r25, Y+34	; 0x22
    4ec4:	9e 8f       	std	Y+30, r25	; 0x1e
    4ec6:	8d 8f       	std	Y+29, r24	; 0x1d
    4ec8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4eca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4ecc:	01 97       	sbiw	r24, 0x01	; 1
    4ece:	f1 f7       	brne	.-4      	; 0x4ecc <OWNER_vidTenantRoom+0x356>
    4ed0:	9e 8f       	std	Y+30, r25	; 0x1e
    4ed2:	8d 8f       	std	Y+29, r24	; 0x1d
	} else { /*.....*/ }
	_delay_ms(100);
	/* list the option available to the user and interact with keypad */
	LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
    4ed4:	81 e0       	ldi	r24, 0x01	; 1
    4ed6:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
	LCD_enuSendString("1:DOOR   2:LIGHT");
    4eda:	8f e2       	ldi	r24, 0x2F	; 47
    4edc:	92 e0       	ldi	r25, 0x02	; 2
    4ede:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
	LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN10);
    4ee2:	81 e0       	ldi	r24, 0x01	; 1
    4ee4:	6a e0       	ldi	r22, 0x0A	; 10
    4ee6:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
	LCD_enuSendString("0:BACK");
    4eea:	80 e4       	ldi	r24, 0x40	; 64
    4eec:	92 e0       	ldi	r25, 0x02	; 2
    4eee:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
	u8keyPressed = WAITING_PRESS_KEY;
    4ef2:	8f ef       	ldi	r24, 0xFF	; 255
    4ef4:	80 93 ec 02 	sts	0x02EC, r24
    4ef8:	17 c1       	rjmp	.+558    	; 0x5128 <OWNER_vidTenantRoom+0x5b2>
	while(u8keyPressed == WAITING_PRESS_KEY){
		KEYPAD_vidGetPressedKey(&u8keyPressed);
    4efa:	8c ee       	ldi	r24, 0xEC	; 236
    4efc:	92 e0       	ldi	r25, 0x02	; 2
    4efe:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <KEYPAD_vidGetPressedKey>
		switch(u8keyPressed){
    4f02:	80 91 ec 02 	lds	r24, 0x02EC
    4f06:	28 2f       	mov	r18, r24
    4f08:	30 e0       	ldi	r19, 0x00	; 0
    4f0a:	29 96       	adiw	r28, 0x09	; 9
    4f0c:	3f af       	std	Y+63, r19	; 0x3f
    4f0e:	2e af       	std	Y+62, r18	; 0x3e
    4f10:	29 97       	sbiw	r28, 0x09	; 9
    4f12:	29 96       	adiw	r28, 0x09	; 9
    4f14:	8e ad       	ldd	r24, Y+62	; 0x3e
    4f16:	9f ad       	ldd	r25, Y+63	; 0x3f
    4f18:	29 97       	sbiw	r28, 0x09	; 9
    4f1a:	81 33       	cpi	r24, 0x31	; 49
    4f1c:	91 05       	cpc	r25, r1
    4f1e:	89 f0       	breq	.+34     	; 0x4f42 <OWNER_vidTenantRoom+0x3cc>
    4f20:	29 96       	adiw	r28, 0x09	; 9
    4f22:	ee ad       	ldd	r30, Y+62	; 0x3e
    4f24:	ff ad       	ldd	r31, Y+63	; 0x3f
    4f26:	29 97       	sbiw	r28, 0x09	; 9
    4f28:	e2 33       	cpi	r30, 0x32	; 50
    4f2a:	f1 05       	cpc	r31, r1
    4f2c:	09 f4       	brne	.+2      	; 0x4f30 <OWNER_vidTenantRoom+0x3ba>
    4f2e:	81 c0       	rjmp	.+258    	; 0x5032 <OWNER_vidTenantRoom+0x4bc>
    4f30:	29 96       	adiw	r28, 0x09	; 9
    4f32:	2e ad       	ldd	r18, Y+62	; 0x3e
    4f34:	3f ad       	ldd	r19, Y+63	; 0x3f
    4f36:	29 97       	sbiw	r28, 0x09	; 9
    4f38:	20 33       	cpi	r18, 0x30	; 48
    4f3a:	31 05       	cpc	r19, r1
    4f3c:	09 f4       	brne	.+2      	; 0x4f40 <OWNER_vidTenantRoom+0x3ca>
    4f3e:	f4 c0       	rjmp	.+488    	; 0x5128 <OWNER_vidTenantRoom+0x5b2>
    4f40:	f0 c0       	rjmp	.+480    	; 0x5122 <OWNER_vidTenantRoom+0x5ac>
			case ROOM_DOOR:
				SPI_vidTransceive(TENANT_DOOR_SWITCH_REQUEST);
    4f42:	8f e2       	ldi	r24, 0x2F	; 47
    4f44:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_vidTransceive>
    4f48:	80 e0       	ldi	r24, 0x00	; 0
    4f4a:	90 e0       	ldi	r25, 0x00	; 0
    4f4c:	a8 e4       	ldi	r26, 0x48	; 72
    4f4e:	b2 e4       	ldi	r27, 0x42	; 66
    4f50:	89 8f       	std	Y+25, r24	; 0x19
    4f52:	9a 8f       	std	Y+26, r25	; 0x1a
    4f54:	ab 8f       	std	Y+27, r26	; 0x1b
    4f56:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f58:	69 8d       	ldd	r22, Y+25	; 0x19
    4f5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4f5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4f5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4f60:	20 e0       	ldi	r18, 0x00	; 0
    4f62:	30 e0       	ldi	r19, 0x00	; 0
    4f64:	4a e7       	ldi	r20, 0x7A	; 122
    4f66:	55 e4       	ldi	r21, 0x45	; 69
    4f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f6c:	dc 01       	movw	r26, r24
    4f6e:	cb 01       	movw	r24, r22
    4f70:	8d 8b       	std	Y+21, r24	; 0x15
    4f72:	9e 8b       	std	Y+22, r25	; 0x16
    4f74:	af 8b       	std	Y+23, r26	; 0x17
    4f76:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4f78:	6d 89       	ldd	r22, Y+21	; 0x15
    4f7a:	7e 89       	ldd	r23, Y+22	; 0x16
    4f7c:	8f 89       	ldd	r24, Y+23	; 0x17
    4f7e:	98 8d       	ldd	r25, Y+24	; 0x18
    4f80:	20 e0       	ldi	r18, 0x00	; 0
    4f82:	30 e0       	ldi	r19, 0x00	; 0
    4f84:	40 e8       	ldi	r20, 0x80	; 128
    4f86:	5f e3       	ldi	r21, 0x3F	; 63
    4f88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4f8c:	88 23       	and	r24, r24
    4f8e:	2c f4       	brge	.+10     	; 0x4f9a <OWNER_vidTenantRoom+0x424>
		__ticks = 1;
    4f90:	81 e0       	ldi	r24, 0x01	; 1
    4f92:	90 e0       	ldi	r25, 0x00	; 0
    4f94:	9c 8b       	std	Y+20, r25	; 0x14
    4f96:	8b 8b       	std	Y+19, r24	; 0x13
    4f98:	3f c0       	rjmp	.+126    	; 0x5018 <OWNER_vidTenantRoom+0x4a2>
	else if (__tmp > 65535)
    4f9a:	6d 89       	ldd	r22, Y+21	; 0x15
    4f9c:	7e 89       	ldd	r23, Y+22	; 0x16
    4f9e:	8f 89       	ldd	r24, Y+23	; 0x17
    4fa0:	98 8d       	ldd	r25, Y+24	; 0x18
    4fa2:	20 e0       	ldi	r18, 0x00	; 0
    4fa4:	3f ef       	ldi	r19, 0xFF	; 255
    4fa6:	4f e7       	ldi	r20, 0x7F	; 127
    4fa8:	57 e4       	ldi	r21, 0x47	; 71
    4faa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4fae:	18 16       	cp	r1, r24
    4fb0:	4c f5       	brge	.+82     	; 0x5004 <OWNER_vidTenantRoom+0x48e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fb2:	69 8d       	ldd	r22, Y+25	; 0x19
    4fb4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4fb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4fb8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4fba:	20 e0       	ldi	r18, 0x00	; 0
    4fbc:	30 e0       	ldi	r19, 0x00	; 0
    4fbe:	40 e2       	ldi	r20, 0x20	; 32
    4fc0:	51 e4       	ldi	r21, 0x41	; 65
    4fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fc6:	dc 01       	movw	r26, r24
    4fc8:	cb 01       	movw	r24, r22
    4fca:	bc 01       	movw	r22, r24
    4fcc:	cd 01       	movw	r24, r26
    4fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fd2:	dc 01       	movw	r26, r24
    4fd4:	cb 01       	movw	r24, r22
    4fd6:	9c 8b       	std	Y+20, r25	; 0x14
    4fd8:	8b 8b       	std	Y+19, r24	; 0x13
    4fda:	0f c0       	rjmp	.+30     	; 0x4ffa <OWNER_vidTenantRoom+0x484>
    4fdc:	80 e9       	ldi	r24, 0x90	; 144
    4fde:	91 e0       	ldi	r25, 0x01	; 1
    4fe0:	9a 8b       	std	Y+18, r25	; 0x12
    4fe2:	89 8b       	std	Y+17, r24	; 0x11
    4fe4:	89 89       	ldd	r24, Y+17	; 0x11
    4fe6:	9a 89       	ldd	r25, Y+18	; 0x12
    4fe8:	01 97       	sbiw	r24, 0x01	; 1
    4fea:	f1 f7       	brne	.-4      	; 0x4fe8 <OWNER_vidTenantRoom+0x472>
    4fec:	9a 8b       	std	Y+18, r25	; 0x12
    4fee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ff0:	8b 89       	ldd	r24, Y+19	; 0x13
    4ff2:	9c 89       	ldd	r25, Y+20	; 0x14
    4ff4:	01 97       	sbiw	r24, 0x01	; 1
    4ff6:	9c 8b       	std	Y+20, r25	; 0x14
    4ff8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ffa:	8b 89       	ldd	r24, Y+19	; 0x13
    4ffc:	9c 89       	ldd	r25, Y+20	; 0x14
    4ffe:	00 97       	sbiw	r24, 0x00	; 0
    5000:	69 f7       	brne	.-38     	; 0x4fdc <OWNER_vidTenantRoom+0x466>
    5002:	14 c0       	rjmp	.+40     	; 0x502c <OWNER_vidTenantRoom+0x4b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5004:	6d 89       	ldd	r22, Y+21	; 0x15
    5006:	7e 89       	ldd	r23, Y+22	; 0x16
    5008:	8f 89       	ldd	r24, Y+23	; 0x17
    500a:	98 8d       	ldd	r25, Y+24	; 0x18
    500c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5010:	dc 01       	movw	r26, r24
    5012:	cb 01       	movw	r24, r22
    5014:	9c 8b       	std	Y+20, r25	; 0x14
    5016:	8b 8b       	std	Y+19, r24	; 0x13
    5018:	8b 89       	ldd	r24, Y+19	; 0x13
    501a:	9c 89       	ldd	r25, Y+20	; 0x14
    501c:	98 8b       	std	Y+16, r25	; 0x10
    501e:	8f 87       	std	Y+15, r24	; 0x0f
    5020:	8f 85       	ldd	r24, Y+15	; 0x0f
    5022:	98 89       	ldd	r25, Y+16	; 0x10
    5024:	01 97       	sbiw	r24, 0x01	; 1
    5026:	f1 f7       	brne	.-4      	; 0x5024 <OWNER_vidTenantRoom+0x4ae>
    5028:	98 8b       	std	Y+16, r25	; 0x10
    502a:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(50);
				OWNER_vidMasterRoom();
    502c:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <OWNER_vidMasterRoom>
    5030:	7b c0       	rjmp	.+246    	; 0x5128 <OWNER_vidTenantRoom+0x5b2>
				break;
			case ROOM_LIGHT:
				SPI_vidTransceive(TENANT_LIGHT_SWITCH_REQUEST);
    5032:	8f e3       	ldi	r24, 0x3F	; 63
    5034:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_vidTransceive>
    5038:	80 e0       	ldi	r24, 0x00	; 0
    503a:	90 e0       	ldi	r25, 0x00	; 0
    503c:	a8 e4       	ldi	r26, 0x48	; 72
    503e:	b2 e4       	ldi	r27, 0x42	; 66
    5040:	8b 87       	std	Y+11, r24	; 0x0b
    5042:	9c 87       	std	Y+12, r25	; 0x0c
    5044:	ad 87       	std	Y+13, r26	; 0x0d
    5046:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5048:	6b 85       	ldd	r22, Y+11	; 0x0b
    504a:	7c 85       	ldd	r23, Y+12	; 0x0c
    504c:	8d 85       	ldd	r24, Y+13	; 0x0d
    504e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5050:	20 e0       	ldi	r18, 0x00	; 0
    5052:	30 e0       	ldi	r19, 0x00	; 0
    5054:	4a e7       	ldi	r20, 0x7A	; 122
    5056:	55 e4       	ldi	r21, 0x45	; 69
    5058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    505c:	dc 01       	movw	r26, r24
    505e:	cb 01       	movw	r24, r22
    5060:	8f 83       	std	Y+7, r24	; 0x07
    5062:	98 87       	std	Y+8, r25	; 0x08
    5064:	a9 87       	std	Y+9, r26	; 0x09
    5066:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5068:	6f 81       	ldd	r22, Y+7	; 0x07
    506a:	78 85       	ldd	r23, Y+8	; 0x08
    506c:	89 85       	ldd	r24, Y+9	; 0x09
    506e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5070:	20 e0       	ldi	r18, 0x00	; 0
    5072:	30 e0       	ldi	r19, 0x00	; 0
    5074:	40 e8       	ldi	r20, 0x80	; 128
    5076:	5f e3       	ldi	r21, 0x3F	; 63
    5078:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    507c:	88 23       	and	r24, r24
    507e:	2c f4       	brge	.+10     	; 0x508a <OWNER_vidTenantRoom+0x514>
		__ticks = 1;
    5080:	81 e0       	ldi	r24, 0x01	; 1
    5082:	90 e0       	ldi	r25, 0x00	; 0
    5084:	9e 83       	std	Y+6, r25	; 0x06
    5086:	8d 83       	std	Y+5, r24	; 0x05
    5088:	3f c0       	rjmp	.+126    	; 0x5108 <OWNER_vidTenantRoom+0x592>
	else if (__tmp > 65535)
    508a:	6f 81       	ldd	r22, Y+7	; 0x07
    508c:	78 85       	ldd	r23, Y+8	; 0x08
    508e:	89 85       	ldd	r24, Y+9	; 0x09
    5090:	9a 85       	ldd	r25, Y+10	; 0x0a
    5092:	20 e0       	ldi	r18, 0x00	; 0
    5094:	3f ef       	ldi	r19, 0xFF	; 255
    5096:	4f e7       	ldi	r20, 0x7F	; 127
    5098:	57 e4       	ldi	r21, 0x47	; 71
    509a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    509e:	18 16       	cp	r1, r24
    50a0:	4c f5       	brge	.+82     	; 0x50f4 <OWNER_vidTenantRoom+0x57e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    50a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    50a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    50a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    50aa:	20 e0       	ldi	r18, 0x00	; 0
    50ac:	30 e0       	ldi	r19, 0x00	; 0
    50ae:	40 e2       	ldi	r20, 0x20	; 32
    50b0:	51 e4       	ldi	r21, 0x41	; 65
    50b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50b6:	dc 01       	movw	r26, r24
    50b8:	cb 01       	movw	r24, r22
    50ba:	bc 01       	movw	r22, r24
    50bc:	cd 01       	movw	r24, r26
    50be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50c2:	dc 01       	movw	r26, r24
    50c4:	cb 01       	movw	r24, r22
    50c6:	9e 83       	std	Y+6, r25	; 0x06
    50c8:	8d 83       	std	Y+5, r24	; 0x05
    50ca:	0f c0       	rjmp	.+30     	; 0x50ea <OWNER_vidTenantRoom+0x574>
    50cc:	80 e9       	ldi	r24, 0x90	; 144
    50ce:	91 e0       	ldi	r25, 0x01	; 1
    50d0:	9c 83       	std	Y+4, r25	; 0x04
    50d2:	8b 83       	std	Y+3, r24	; 0x03
    50d4:	8b 81       	ldd	r24, Y+3	; 0x03
    50d6:	9c 81       	ldd	r25, Y+4	; 0x04
    50d8:	01 97       	sbiw	r24, 0x01	; 1
    50da:	f1 f7       	brne	.-4      	; 0x50d8 <OWNER_vidTenantRoom+0x562>
    50dc:	9c 83       	std	Y+4, r25	; 0x04
    50de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50e0:	8d 81       	ldd	r24, Y+5	; 0x05
    50e2:	9e 81       	ldd	r25, Y+6	; 0x06
    50e4:	01 97       	sbiw	r24, 0x01	; 1
    50e6:	9e 83       	std	Y+6, r25	; 0x06
    50e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50ea:	8d 81       	ldd	r24, Y+5	; 0x05
    50ec:	9e 81       	ldd	r25, Y+6	; 0x06
    50ee:	00 97       	sbiw	r24, 0x00	; 0
    50f0:	69 f7       	brne	.-38     	; 0x50cc <OWNER_vidTenantRoom+0x556>
    50f2:	14 c0       	rjmp	.+40     	; 0x511c <OWNER_vidTenantRoom+0x5a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50f4:	6f 81       	ldd	r22, Y+7	; 0x07
    50f6:	78 85       	ldd	r23, Y+8	; 0x08
    50f8:	89 85       	ldd	r24, Y+9	; 0x09
    50fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    50fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5100:	dc 01       	movw	r26, r24
    5102:	cb 01       	movw	r24, r22
    5104:	9e 83       	std	Y+6, r25	; 0x06
    5106:	8d 83       	std	Y+5, r24	; 0x05
    5108:	8d 81       	ldd	r24, Y+5	; 0x05
    510a:	9e 81       	ldd	r25, Y+6	; 0x06
    510c:	9a 83       	std	Y+2, r25	; 0x02
    510e:	89 83       	std	Y+1, r24	; 0x01
    5110:	89 81       	ldd	r24, Y+1	; 0x01
    5112:	9a 81       	ldd	r25, Y+2	; 0x02
    5114:	01 97       	sbiw	r24, 0x01	; 1
    5116:	f1 f7       	brne	.-4      	; 0x5114 <OWNER_vidTenantRoom+0x59e>
    5118:	9a 83       	std	Y+2, r25	; 0x02
    511a:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(50);
				OWNER_vidMasterRoom();
    511c:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <OWNER_vidMasterRoom>
    5120:	03 c0       	rjmp	.+6      	; 0x5128 <OWNER_vidTenantRoom+0x5b2>
				break;
			case BACK:
				continue;
			default:
				u8keyPressed = WAITING_PRESS_KEY;
    5122:	8f ef       	ldi	r24, 0xFF	; 255
    5124:	80 93 ec 02 	sts	0x02EC, r24
	LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
	LCD_enuSendString("1:DOOR   2:LIGHT");
	LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN10);
	LCD_enuSendString("0:BACK");
	u8keyPressed = WAITING_PRESS_KEY;
	while(u8keyPressed == WAITING_PRESS_KEY){
    5128:	80 91 ec 02 	lds	r24, 0x02EC
    512c:	8f 3f       	cpi	r24, 0xFF	; 255
    512e:	09 f4       	brne	.+2      	; 0x5132 <OWNER_vidTenantRoom+0x5bc>
    5130:	e4 ce       	rjmp	.-568    	; 0x4efa <OWNER_vidTenantRoom+0x384>
			default:
				u8keyPressed = WAITING_PRESS_KEY;
				break;
		}//end of #switch case
	}// end of #while loop
}//end of OWNER_vidTenantRoom()
    5132:	c8 5b       	subi	r28, 0xB8	; 184
    5134:	df 4f       	sbci	r29, 0xFF	; 255
    5136:	0f b6       	in	r0, 0x3f	; 63
    5138:	f8 94       	cli
    513a:	de bf       	out	0x3e, r29	; 62
    513c:	0f be       	out	0x3f, r0	; 63
    513e:	cd bf       	out	0x3d, r28	; 61
    5140:	cf 91       	pop	r28
    5142:	df 91       	pop	r29
    5144:	1f 91       	pop	r17
    5146:	0f 91       	pop	r16
    5148:	08 95       	ret

0000514a <OWNER_vidGarageControl>:
 * 				- after each switching recall the function to update the room status
 * 				- back to the previous screen option is available
 * Arguments: void
 * Return:	void
 */
void OWNER_vidGarageControl(void){
    514a:	0f 93       	push	r16
    514c:	1f 93       	push	r17
    514e:	df 93       	push	r29
    5150:	cf 93       	push	r28
    5152:	cd b7       	in	r28, 0x3d	; 61
    5154:	de b7       	in	r29, 0x3e	; 62
    5156:	c8 54       	subi	r28, 0x48	; 72
    5158:	d0 40       	sbci	r29, 0x00	; 0
    515a:	0f b6       	in	r0, 0x3f	; 63
    515c:	f8 94       	cli
    515e:	de bf       	out	0x3e, r29	; 62
    5160:	0f be       	out	0x3f, r0	; 63
    5162:	cd bf       	out	0x3d, r28	; 61
	/* clear the LCD screen */
	LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
    5164:	81 e0       	ldi	r24, 0x01	; 1
    5166:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
	/* list the option available to the user and interact with keypad */
	LCD_enuSendString("1:AUTO  2:MANUAL");
    516a:	87 e4       	ldi	r24, 0x47	; 71
    516c:	92 e0       	ldi	r25, 0x02	; 2
    516e:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
	LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN10);
    5172:	81 e0       	ldi	r24, 0x01	; 1
    5174:	6a e0       	ldi	r22, 0x0A	; 10
    5176:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
	LCD_enuSendString("0:BACK");
    517a:	80 e4       	ldi	r24, 0x40	; 64
    517c:	92 e0       	ldi	r25, 0x02	; 2
    517e:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
	u8keyPressed = WAITING_PRESS_KEY;
    5182:	8f ef       	ldi	r24, 0xFF	; 255
    5184:	80 93 ec 02 	sts	0x02EC, r24
    5188:	bc c2       	rjmp	.+1400   	; 0x5702 <OWNER_vidGarageControl+0x5b8>
	while(u8keyPressed == WAITING_PRESS_KEY){
		KEYPAD_vidGetPressedKey(&u8keyPressed);
    518a:	8c ee       	ldi	r24, 0xEC	; 236
    518c:	92 e0       	ldi	r25, 0x02	; 2
    518e:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <KEYPAD_vidGetPressedKey>
		switch(u8keyPressed){
    5192:	80 91 ec 02 	lds	r24, 0x02EC
    5196:	28 2f       	mov	r18, r24
    5198:	30 e0       	ldi	r19, 0x00	; 0
    519a:	29 96       	adiw	r28, 0x09	; 9
    519c:	3f af       	std	Y+63, r19	; 0x3f
    519e:	2e af       	std	Y+62, r18	; 0x3e
    51a0:	29 97       	sbiw	r28, 0x09	; 9
    51a2:	29 96       	adiw	r28, 0x09	; 9
    51a4:	8e ad       	ldd	r24, Y+62	; 0x3e
    51a6:	9f ad       	ldd	r25, Y+63	; 0x3f
    51a8:	29 97       	sbiw	r28, 0x09	; 9
    51aa:	81 33       	cpi	r24, 0x31	; 49
    51ac:	91 05       	cpc	r25, r1
    51ae:	89 f0       	breq	.+34     	; 0x51d2 <OWNER_vidGarageControl+0x88>
    51b0:	29 96       	adiw	r28, 0x09	; 9
    51b2:	ee ad       	ldd	r30, Y+62	; 0x3e
    51b4:	ff ad       	ldd	r31, Y+63	; 0x3f
    51b6:	29 97       	sbiw	r28, 0x09	; 9
    51b8:	e2 33       	cpi	r30, 0x32	; 50
    51ba:	f1 05       	cpc	r31, r1
    51bc:	09 f4       	brne	.+2      	; 0x51c0 <OWNER_vidGarageControl+0x76>
    51be:	13 c1       	rjmp	.+550    	; 0x53e6 <OWNER_vidGarageControl+0x29c>
    51c0:	29 96       	adiw	r28, 0x09	; 9
    51c2:	2e ad       	ldd	r18, Y+62	; 0x3e
    51c4:	3f ad       	ldd	r19, Y+63	; 0x3f
    51c6:	29 97       	sbiw	r28, 0x09	; 9
    51c8:	20 33       	cpi	r18, 0x30	; 48
    51ca:	31 05       	cpc	r19, r1
    51cc:	09 f4       	brne	.+2      	; 0x51d0 <OWNER_vidGarageControl+0x86>
    51ce:	99 c2       	rjmp	.+1330   	; 0x5702 <OWNER_vidGarageControl+0x5b8>
    51d0:	95 c2       	rjmp	.+1322   	; 0x56fc <OWNER_vidGarageControl+0x5b2>
			case GARAGE_AUTO_CONTROL:
				SPI_vidTransceive(SET_GARAGE_AUTO);
    51d2:	8f e4       	ldi	r24, 0x4F	; 79
    51d4:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_vidTransceive>
    51d8:	fe 01       	movw	r30, r28
    51da:	ed 5b       	subi	r30, 0xBD	; 189
    51dc:	ff 4f       	sbci	r31, 0xFF	; 255
    51de:	80 e0       	ldi	r24, 0x00	; 0
    51e0:	90 e0       	ldi	r25, 0x00	; 0
    51e2:	a8 e4       	ldi	r26, 0x48	; 72
    51e4:	b2 e4       	ldi	r27, 0x42	; 66
    51e6:	80 83       	st	Z, r24
    51e8:	91 83       	std	Z+1, r25	; 0x01
    51ea:	a2 83       	std	Z+2, r26	; 0x02
    51ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51ee:	8e 01       	movw	r16, r28
    51f0:	01 5c       	subi	r16, 0xC1	; 193
    51f2:	1f 4f       	sbci	r17, 0xFF	; 255
    51f4:	fe 01       	movw	r30, r28
    51f6:	ed 5b       	subi	r30, 0xBD	; 189
    51f8:	ff 4f       	sbci	r31, 0xFF	; 255
    51fa:	60 81       	ld	r22, Z
    51fc:	71 81       	ldd	r23, Z+1	; 0x01
    51fe:	82 81       	ldd	r24, Z+2	; 0x02
    5200:	93 81       	ldd	r25, Z+3	; 0x03
    5202:	20 e0       	ldi	r18, 0x00	; 0
    5204:	30 e0       	ldi	r19, 0x00	; 0
    5206:	4a e7       	ldi	r20, 0x7A	; 122
    5208:	55 e4       	ldi	r21, 0x45	; 69
    520a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    520e:	dc 01       	movw	r26, r24
    5210:	cb 01       	movw	r24, r22
    5212:	f8 01       	movw	r30, r16
    5214:	80 83       	st	Z, r24
    5216:	91 83       	std	Z+1, r25	; 0x01
    5218:	a2 83       	std	Z+2, r26	; 0x02
    521a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    521c:	fe 01       	movw	r30, r28
    521e:	ff 96       	adiw	r30, 0x3f	; 63
    5220:	60 81       	ld	r22, Z
    5222:	71 81       	ldd	r23, Z+1	; 0x01
    5224:	82 81       	ldd	r24, Z+2	; 0x02
    5226:	93 81       	ldd	r25, Z+3	; 0x03
    5228:	20 e0       	ldi	r18, 0x00	; 0
    522a:	30 e0       	ldi	r19, 0x00	; 0
    522c:	40 e8       	ldi	r20, 0x80	; 128
    522e:	5f e3       	ldi	r21, 0x3F	; 63
    5230:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5234:	88 23       	and	r24, r24
    5236:	2c f4       	brge	.+10     	; 0x5242 <OWNER_vidGarageControl+0xf8>
		__ticks = 1;
    5238:	81 e0       	ldi	r24, 0x01	; 1
    523a:	90 e0       	ldi	r25, 0x00	; 0
    523c:	9e af       	std	Y+62, r25	; 0x3e
    523e:	8d af       	std	Y+61, r24	; 0x3d
    5240:	46 c0       	rjmp	.+140    	; 0x52ce <OWNER_vidGarageControl+0x184>
	else if (__tmp > 65535)
    5242:	fe 01       	movw	r30, r28
    5244:	ff 96       	adiw	r30, 0x3f	; 63
    5246:	60 81       	ld	r22, Z
    5248:	71 81       	ldd	r23, Z+1	; 0x01
    524a:	82 81       	ldd	r24, Z+2	; 0x02
    524c:	93 81       	ldd	r25, Z+3	; 0x03
    524e:	20 e0       	ldi	r18, 0x00	; 0
    5250:	3f ef       	ldi	r19, 0xFF	; 255
    5252:	4f e7       	ldi	r20, 0x7F	; 127
    5254:	57 e4       	ldi	r21, 0x47	; 71
    5256:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    525a:	18 16       	cp	r1, r24
    525c:	64 f5       	brge	.+88     	; 0x52b6 <OWNER_vidGarageControl+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    525e:	fe 01       	movw	r30, r28
    5260:	ed 5b       	subi	r30, 0xBD	; 189
    5262:	ff 4f       	sbci	r31, 0xFF	; 255
    5264:	60 81       	ld	r22, Z
    5266:	71 81       	ldd	r23, Z+1	; 0x01
    5268:	82 81       	ldd	r24, Z+2	; 0x02
    526a:	93 81       	ldd	r25, Z+3	; 0x03
    526c:	20 e0       	ldi	r18, 0x00	; 0
    526e:	30 e0       	ldi	r19, 0x00	; 0
    5270:	40 e2       	ldi	r20, 0x20	; 32
    5272:	51 e4       	ldi	r21, 0x41	; 65
    5274:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5278:	dc 01       	movw	r26, r24
    527a:	cb 01       	movw	r24, r22
    527c:	bc 01       	movw	r22, r24
    527e:	cd 01       	movw	r24, r26
    5280:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5284:	dc 01       	movw	r26, r24
    5286:	cb 01       	movw	r24, r22
    5288:	9e af       	std	Y+62, r25	; 0x3e
    528a:	8d af       	std	Y+61, r24	; 0x3d
    528c:	0f c0       	rjmp	.+30     	; 0x52ac <OWNER_vidGarageControl+0x162>
    528e:	80 e9       	ldi	r24, 0x90	; 144
    5290:	91 e0       	ldi	r25, 0x01	; 1
    5292:	9c af       	std	Y+60, r25	; 0x3c
    5294:	8b af       	std	Y+59, r24	; 0x3b
    5296:	8b ad       	ldd	r24, Y+59	; 0x3b
    5298:	9c ad       	ldd	r25, Y+60	; 0x3c
    529a:	01 97       	sbiw	r24, 0x01	; 1
    529c:	f1 f7       	brne	.-4      	; 0x529a <OWNER_vidGarageControl+0x150>
    529e:	9c af       	std	Y+60, r25	; 0x3c
    52a0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52a2:	8d ad       	ldd	r24, Y+61	; 0x3d
    52a4:	9e ad       	ldd	r25, Y+62	; 0x3e
    52a6:	01 97       	sbiw	r24, 0x01	; 1
    52a8:	9e af       	std	Y+62, r25	; 0x3e
    52aa:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52ac:	8d ad       	ldd	r24, Y+61	; 0x3d
    52ae:	9e ad       	ldd	r25, Y+62	; 0x3e
    52b0:	00 97       	sbiw	r24, 0x00	; 0
    52b2:	69 f7       	brne	.-38     	; 0x528e <OWNER_vidGarageControl+0x144>
    52b4:	16 c0       	rjmp	.+44     	; 0x52e2 <OWNER_vidGarageControl+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52b6:	fe 01       	movw	r30, r28
    52b8:	ff 96       	adiw	r30, 0x3f	; 63
    52ba:	60 81       	ld	r22, Z
    52bc:	71 81       	ldd	r23, Z+1	; 0x01
    52be:	82 81       	ldd	r24, Z+2	; 0x02
    52c0:	93 81       	ldd	r25, Z+3	; 0x03
    52c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52c6:	dc 01       	movw	r26, r24
    52c8:	cb 01       	movw	r24, r22
    52ca:	9e af       	std	Y+62, r25	; 0x3e
    52cc:	8d af       	std	Y+61, r24	; 0x3d
    52ce:	8d ad       	ldd	r24, Y+61	; 0x3d
    52d0:	9e ad       	ldd	r25, Y+62	; 0x3e
    52d2:	9a af       	std	Y+58, r25	; 0x3a
    52d4:	89 af       	std	Y+57, r24	; 0x39
    52d6:	89 ad       	ldd	r24, Y+57	; 0x39
    52d8:	9a ad       	ldd	r25, Y+58	; 0x3a
    52da:	01 97       	sbiw	r24, 0x01	; 1
    52dc:	f1 f7       	brne	.-4      	; 0x52da <OWNER_vidGarageControl+0x190>
    52de:	9a af       	std	Y+58, r25	; 0x3a
    52e0:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(50);
				LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
    52e2:	81 e0       	ldi	r24, 0x01	; 1
    52e4:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
				LCD_enuSendString("   GARAGE DOOR  ");
    52e8:	88 e5       	ldi	r24, 0x58	; 88
    52ea:	92 e0       	ldi	r25, 0x02	; 2
    52ec:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
				LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN7);
    52f0:	81 e0       	ldi	r24, 0x01	; 1
    52f2:	67 e0       	ldi	r22, 0x07	; 7
    52f4:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
				LCD_enuSendString("AUTO");
    52f8:	89 e6       	ldi	r24, 0x69	; 105
    52fa:	92 e0       	ldi	r25, 0x02	; 2
    52fc:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
    5300:	80 e0       	ldi	r24, 0x00	; 0
    5302:	90 e0       	ldi	r25, 0x00	; 0
    5304:	a8 ec       	ldi	r26, 0xC8	; 200
    5306:	b2 e4       	ldi	r27, 0x42	; 66
    5308:	8d ab       	std	Y+53, r24	; 0x35
    530a:	9e ab       	std	Y+54, r25	; 0x36
    530c:	af ab       	std	Y+55, r26	; 0x37
    530e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5310:	6d a9       	ldd	r22, Y+53	; 0x35
    5312:	7e a9       	ldd	r23, Y+54	; 0x36
    5314:	8f a9       	ldd	r24, Y+55	; 0x37
    5316:	98 ad       	ldd	r25, Y+56	; 0x38
    5318:	20 e0       	ldi	r18, 0x00	; 0
    531a:	30 e0       	ldi	r19, 0x00	; 0
    531c:	4a e7       	ldi	r20, 0x7A	; 122
    531e:	55 e4       	ldi	r21, 0x45	; 69
    5320:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5324:	dc 01       	movw	r26, r24
    5326:	cb 01       	movw	r24, r22
    5328:	89 ab       	std	Y+49, r24	; 0x31
    532a:	9a ab       	std	Y+50, r25	; 0x32
    532c:	ab ab       	std	Y+51, r26	; 0x33
    532e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5330:	69 a9       	ldd	r22, Y+49	; 0x31
    5332:	7a a9       	ldd	r23, Y+50	; 0x32
    5334:	8b a9       	ldd	r24, Y+51	; 0x33
    5336:	9c a9       	ldd	r25, Y+52	; 0x34
    5338:	20 e0       	ldi	r18, 0x00	; 0
    533a:	30 e0       	ldi	r19, 0x00	; 0
    533c:	40 e8       	ldi	r20, 0x80	; 128
    533e:	5f e3       	ldi	r21, 0x3F	; 63
    5340:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5344:	88 23       	and	r24, r24
    5346:	2c f4       	brge	.+10     	; 0x5352 <OWNER_vidGarageControl+0x208>
		__ticks = 1;
    5348:	81 e0       	ldi	r24, 0x01	; 1
    534a:	90 e0       	ldi	r25, 0x00	; 0
    534c:	98 ab       	std	Y+48, r25	; 0x30
    534e:	8f a7       	std	Y+47, r24	; 0x2f
    5350:	3f c0       	rjmp	.+126    	; 0x53d0 <OWNER_vidGarageControl+0x286>
	else if (__tmp > 65535)
    5352:	69 a9       	ldd	r22, Y+49	; 0x31
    5354:	7a a9       	ldd	r23, Y+50	; 0x32
    5356:	8b a9       	ldd	r24, Y+51	; 0x33
    5358:	9c a9       	ldd	r25, Y+52	; 0x34
    535a:	20 e0       	ldi	r18, 0x00	; 0
    535c:	3f ef       	ldi	r19, 0xFF	; 255
    535e:	4f e7       	ldi	r20, 0x7F	; 127
    5360:	57 e4       	ldi	r21, 0x47	; 71
    5362:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5366:	18 16       	cp	r1, r24
    5368:	4c f5       	brge	.+82     	; 0x53bc <OWNER_vidGarageControl+0x272>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    536a:	6d a9       	ldd	r22, Y+53	; 0x35
    536c:	7e a9       	ldd	r23, Y+54	; 0x36
    536e:	8f a9       	ldd	r24, Y+55	; 0x37
    5370:	98 ad       	ldd	r25, Y+56	; 0x38
    5372:	20 e0       	ldi	r18, 0x00	; 0
    5374:	30 e0       	ldi	r19, 0x00	; 0
    5376:	40 e2       	ldi	r20, 0x20	; 32
    5378:	51 e4       	ldi	r21, 0x41	; 65
    537a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    537e:	dc 01       	movw	r26, r24
    5380:	cb 01       	movw	r24, r22
    5382:	bc 01       	movw	r22, r24
    5384:	cd 01       	movw	r24, r26
    5386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    538a:	dc 01       	movw	r26, r24
    538c:	cb 01       	movw	r24, r22
    538e:	98 ab       	std	Y+48, r25	; 0x30
    5390:	8f a7       	std	Y+47, r24	; 0x2f
    5392:	0f c0       	rjmp	.+30     	; 0x53b2 <OWNER_vidGarageControl+0x268>
    5394:	80 e9       	ldi	r24, 0x90	; 144
    5396:	91 e0       	ldi	r25, 0x01	; 1
    5398:	9e a7       	std	Y+46, r25	; 0x2e
    539a:	8d a7       	std	Y+45, r24	; 0x2d
    539c:	8d a5       	ldd	r24, Y+45	; 0x2d
    539e:	9e a5       	ldd	r25, Y+46	; 0x2e
    53a0:	01 97       	sbiw	r24, 0x01	; 1
    53a2:	f1 f7       	brne	.-4      	; 0x53a0 <OWNER_vidGarageControl+0x256>
    53a4:	9e a7       	std	Y+46, r25	; 0x2e
    53a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    53aa:	98 a9       	ldd	r25, Y+48	; 0x30
    53ac:	01 97       	sbiw	r24, 0x01	; 1
    53ae:	98 ab       	std	Y+48, r25	; 0x30
    53b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    53b4:	98 a9       	ldd	r25, Y+48	; 0x30
    53b6:	00 97       	sbiw	r24, 0x00	; 0
    53b8:	69 f7       	brne	.-38     	; 0x5394 <OWNER_vidGarageControl+0x24a>
    53ba:	a3 c1       	rjmp	.+838    	; 0x5702 <OWNER_vidGarageControl+0x5b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53bc:	69 a9       	ldd	r22, Y+49	; 0x31
    53be:	7a a9       	ldd	r23, Y+50	; 0x32
    53c0:	8b a9       	ldd	r24, Y+51	; 0x33
    53c2:	9c a9       	ldd	r25, Y+52	; 0x34
    53c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53c8:	dc 01       	movw	r26, r24
    53ca:	cb 01       	movw	r24, r22
    53cc:	98 ab       	std	Y+48, r25	; 0x30
    53ce:	8f a7       	std	Y+47, r24	; 0x2f
    53d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    53d2:	98 a9       	ldd	r25, Y+48	; 0x30
    53d4:	9c a7       	std	Y+44, r25	; 0x2c
    53d6:	8b a7       	std	Y+43, r24	; 0x2b
    53d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    53da:	9c a5       	ldd	r25, Y+44	; 0x2c
    53dc:	01 97       	sbiw	r24, 0x01	; 1
    53de:	f1 f7       	brne	.-4      	; 0x53dc <OWNER_vidGarageControl+0x292>
    53e0:	9c a7       	std	Y+44, r25	; 0x2c
    53e2:	8b a7       	std	Y+43, r24	; 0x2b
    53e4:	8e c1       	rjmp	.+796    	; 0x5702 <OWNER_vidGarageControl+0x5b8>
				_delay_ms(100);
				break;
			case GARAGE_MANUAL_CONTROL:
				SPI_vidTransceive(SET_GARAGE_MANUAL);
    53e6:	8f e5       	ldi	r24, 0x5F	; 95
    53e8:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_vidTransceive>
    53ec:	80 e0       	ldi	r24, 0x00	; 0
    53ee:	90 e0       	ldi	r25, 0x00	; 0
    53f0:	a8 e4       	ldi	r26, 0x48	; 72
    53f2:	b2 e4       	ldi	r27, 0x42	; 66
    53f4:	8f a3       	std	Y+39, r24	; 0x27
    53f6:	98 a7       	std	Y+40, r25	; 0x28
    53f8:	a9 a7       	std	Y+41, r26	; 0x29
    53fa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53fc:	6f a1       	ldd	r22, Y+39	; 0x27
    53fe:	78 a5       	ldd	r23, Y+40	; 0x28
    5400:	89 a5       	ldd	r24, Y+41	; 0x29
    5402:	9a a5       	ldd	r25, Y+42	; 0x2a
    5404:	20 e0       	ldi	r18, 0x00	; 0
    5406:	30 e0       	ldi	r19, 0x00	; 0
    5408:	4a e7       	ldi	r20, 0x7A	; 122
    540a:	55 e4       	ldi	r21, 0x45	; 69
    540c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5410:	dc 01       	movw	r26, r24
    5412:	cb 01       	movw	r24, r22
    5414:	8b a3       	std	Y+35, r24	; 0x23
    5416:	9c a3       	std	Y+36, r25	; 0x24
    5418:	ad a3       	std	Y+37, r26	; 0x25
    541a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    541c:	6b a1       	ldd	r22, Y+35	; 0x23
    541e:	7c a1       	ldd	r23, Y+36	; 0x24
    5420:	8d a1       	ldd	r24, Y+37	; 0x25
    5422:	9e a1       	ldd	r25, Y+38	; 0x26
    5424:	20 e0       	ldi	r18, 0x00	; 0
    5426:	30 e0       	ldi	r19, 0x00	; 0
    5428:	40 e8       	ldi	r20, 0x80	; 128
    542a:	5f e3       	ldi	r21, 0x3F	; 63
    542c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5430:	88 23       	and	r24, r24
    5432:	2c f4       	brge	.+10     	; 0x543e <OWNER_vidGarageControl+0x2f4>
		__ticks = 1;
    5434:	81 e0       	ldi	r24, 0x01	; 1
    5436:	90 e0       	ldi	r25, 0x00	; 0
    5438:	9a a3       	std	Y+34, r25	; 0x22
    543a:	89 a3       	std	Y+33, r24	; 0x21
    543c:	3f c0       	rjmp	.+126    	; 0x54bc <OWNER_vidGarageControl+0x372>
	else if (__tmp > 65535)
    543e:	6b a1       	ldd	r22, Y+35	; 0x23
    5440:	7c a1       	ldd	r23, Y+36	; 0x24
    5442:	8d a1       	ldd	r24, Y+37	; 0x25
    5444:	9e a1       	ldd	r25, Y+38	; 0x26
    5446:	20 e0       	ldi	r18, 0x00	; 0
    5448:	3f ef       	ldi	r19, 0xFF	; 255
    544a:	4f e7       	ldi	r20, 0x7F	; 127
    544c:	57 e4       	ldi	r21, 0x47	; 71
    544e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5452:	18 16       	cp	r1, r24
    5454:	4c f5       	brge	.+82     	; 0x54a8 <OWNER_vidGarageControl+0x35e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5456:	6f a1       	ldd	r22, Y+39	; 0x27
    5458:	78 a5       	ldd	r23, Y+40	; 0x28
    545a:	89 a5       	ldd	r24, Y+41	; 0x29
    545c:	9a a5       	ldd	r25, Y+42	; 0x2a
    545e:	20 e0       	ldi	r18, 0x00	; 0
    5460:	30 e0       	ldi	r19, 0x00	; 0
    5462:	40 e2       	ldi	r20, 0x20	; 32
    5464:	51 e4       	ldi	r21, 0x41	; 65
    5466:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    546a:	dc 01       	movw	r26, r24
    546c:	cb 01       	movw	r24, r22
    546e:	bc 01       	movw	r22, r24
    5470:	cd 01       	movw	r24, r26
    5472:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5476:	dc 01       	movw	r26, r24
    5478:	cb 01       	movw	r24, r22
    547a:	9a a3       	std	Y+34, r25	; 0x22
    547c:	89 a3       	std	Y+33, r24	; 0x21
    547e:	0f c0       	rjmp	.+30     	; 0x549e <OWNER_vidGarageControl+0x354>
    5480:	80 e9       	ldi	r24, 0x90	; 144
    5482:	91 e0       	ldi	r25, 0x01	; 1
    5484:	98 a3       	std	Y+32, r25	; 0x20
    5486:	8f 8f       	std	Y+31, r24	; 0x1f
    5488:	8f 8d       	ldd	r24, Y+31	; 0x1f
    548a:	98 a1       	ldd	r25, Y+32	; 0x20
    548c:	01 97       	sbiw	r24, 0x01	; 1
    548e:	f1 f7       	brne	.-4      	; 0x548c <OWNER_vidGarageControl+0x342>
    5490:	98 a3       	std	Y+32, r25	; 0x20
    5492:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5494:	89 a1       	ldd	r24, Y+33	; 0x21
    5496:	9a a1       	ldd	r25, Y+34	; 0x22
    5498:	01 97       	sbiw	r24, 0x01	; 1
    549a:	9a a3       	std	Y+34, r25	; 0x22
    549c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    549e:	89 a1       	ldd	r24, Y+33	; 0x21
    54a0:	9a a1       	ldd	r25, Y+34	; 0x22
    54a2:	00 97       	sbiw	r24, 0x00	; 0
    54a4:	69 f7       	brne	.-38     	; 0x5480 <OWNER_vidGarageControl+0x336>
    54a6:	14 c0       	rjmp	.+40     	; 0x54d0 <OWNER_vidGarageControl+0x386>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54a8:	6b a1       	ldd	r22, Y+35	; 0x23
    54aa:	7c a1       	ldd	r23, Y+36	; 0x24
    54ac:	8d a1       	ldd	r24, Y+37	; 0x25
    54ae:	9e a1       	ldd	r25, Y+38	; 0x26
    54b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54b4:	dc 01       	movw	r26, r24
    54b6:	cb 01       	movw	r24, r22
    54b8:	9a a3       	std	Y+34, r25	; 0x22
    54ba:	89 a3       	std	Y+33, r24	; 0x21
    54bc:	89 a1       	ldd	r24, Y+33	; 0x21
    54be:	9a a1       	ldd	r25, Y+34	; 0x22
    54c0:	9e 8f       	std	Y+30, r25	; 0x1e
    54c2:	8d 8f       	std	Y+29, r24	; 0x1d
    54c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    54c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    54c8:	01 97       	sbiw	r24, 0x01	; 1
    54ca:	f1 f7       	brne	.-4      	; 0x54c8 <OWNER_vidGarageControl+0x37e>
    54cc:	9e 8f       	std	Y+30, r25	; 0x1e
    54ce:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(50);
				LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
    54d0:	81 e0       	ldi	r24, 0x01	; 1
    54d2:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
				LCD_enuSendString("1:Open Garage");
    54d6:	8e e6       	ldi	r24, 0x6E	; 110
    54d8:	92 e0       	ldi	r25, 0x02	; 2
    54da:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
				LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN0);
    54de:	81 e0       	ldi	r24, 0x01	; 1
    54e0:	60 e0       	ldi	r22, 0x00	; 0
    54e2:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
				LCD_enuSendString("2:Close Garage");
    54e6:	8c e7       	ldi	r24, 0x7C	; 124
    54e8:	92 e0       	ldi	r25, 0x02	; 2
    54ea:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
				u8keyPressed = WAITING_PRESS_KEY;
    54ee:	8f ef       	ldi	r24, 0xFF	; 255
    54f0:	80 93 ec 02 	sts	0x02EC, r24
    54f4:	fd c0       	rjmp	.+506    	; 0x56f0 <OWNER_vidGarageControl+0x5a6>
				while(u8keyPressed == WAITING_PRESS_KEY){
					KEYPAD_vidGetPressedKey(&u8keyPressed);
    54f6:	8c ee       	ldi	r24, 0xEC	; 236
    54f8:	92 e0       	ldi	r25, 0x02	; 2
    54fa:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <KEYPAD_vidGetPressedKey>
					if(u8keyPressed == GARAGE_OPEN){
    54fe:	80 91 ec 02 	lds	r24, 0x02EC
    5502:	81 33       	cpi	r24, 0x31	; 49
    5504:	09 f0       	breq	.+2      	; 0x5508 <OWNER_vidGarageControl+0x3be>
    5506:	76 c0       	rjmp	.+236    	; 0x55f4 <OWNER_vidGarageControl+0x4aa>
						SPI_vidTransceive(OPEN_GARAGE_REQUEST);
    5508:	8f e6       	ldi	r24, 0x6F	; 111
    550a:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_vidTransceive>
    550e:	80 e0       	ldi	r24, 0x00	; 0
    5510:	90 e0       	ldi	r25, 0x00	; 0
    5512:	a8 e4       	ldi	r26, 0x48	; 72
    5514:	b2 e4       	ldi	r27, 0x42	; 66
    5516:	89 8f       	std	Y+25, r24	; 0x19
    5518:	9a 8f       	std	Y+26, r25	; 0x1a
    551a:	ab 8f       	std	Y+27, r26	; 0x1b
    551c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    551e:	69 8d       	ldd	r22, Y+25	; 0x19
    5520:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5522:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5524:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5526:	20 e0       	ldi	r18, 0x00	; 0
    5528:	30 e0       	ldi	r19, 0x00	; 0
    552a:	4a e7       	ldi	r20, 0x7A	; 122
    552c:	55 e4       	ldi	r21, 0x45	; 69
    552e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5532:	dc 01       	movw	r26, r24
    5534:	cb 01       	movw	r24, r22
    5536:	8d 8b       	std	Y+21, r24	; 0x15
    5538:	9e 8b       	std	Y+22, r25	; 0x16
    553a:	af 8b       	std	Y+23, r26	; 0x17
    553c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    553e:	6d 89       	ldd	r22, Y+21	; 0x15
    5540:	7e 89       	ldd	r23, Y+22	; 0x16
    5542:	8f 89       	ldd	r24, Y+23	; 0x17
    5544:	98 8d       	ldd	r25, Y+24	; 0x18
    5546:	20 e0       	ldi	r18, 0x00	; 0
    5548:	30 e0       	ldi	r19, 0x00	; 0
    554a:	40 e8       	ldi	r20, 0x80	; 128
    554c:	5f e3       	ldi	r21, 0x3F	; 63
    554e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5552:	88 23       	and	r24, r24
    5554:	2c f4       	brge	.+10     	; 0x5560 <OWNER_vidGarageControl+0x416>
		__ticks = 1;
    5556:	81 e0       	ldi	r24, 0x01	; 1
    5558:	90 e0       	ldi	r25, 0x00	; 0
    555a:	9c 8b       	std	Y+20, r25	; 0x14
    555c:	8b 8b       	std	Y+19, r24	; 0x13
    555e:	3f c0       	rjmp	.+126    	; 0x55de <OWNER_vidGarageControl+0x494>
	else if (__tmp > 65535)
    5560:	6d 89       	ldd	r22, Y+21	; 0x15
    5562:	7e 89       	ldd	r23, Y+22	; 0x16
    5564:	8f 89       	ldd	r24, Y+23	; 0x17
    5566:	98 8d       	ldd	r25, Y+24	; 0x18
    5568:	20 e0       	ldi	r18, 0x00	; 0
    556a:	3f ef       	ldi	r19, 0xFF	; 255
    556c:	4f e7       	ldi	r20, 0x7F	; 127
    556e:	57 e4       	ldi	r21, 0x47	; 71
    5570:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5574:	18 16       	cp	r1, r24
    5576:	4c f5       	brge	.+82     	; 0x55ca <OWNER_vidGarageControl+0x480>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5578:	69 8d       	ldd	r22, Y+25	; 0x19
    557a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    557c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    557e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5580:	20 e0       	ldi	r18, 0x00	; 0
    5582:	30 e0       	ldi	r19, 0x00	; 0
    5584:	40 e2       	ldi	r20, 0x20	; 32
    5586:	51 e4       	ldi	r21, 0x41	; 65
    5588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    558c:	dc 01       	movw	r26, r24
    558e:	cb 01       	movw	r24, r22
    5590:	bc 01       	movw	r22, r24
    5592:	cd 01       	movw	r24, r26
    5594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5598:	dc 01       	movw	r26, r24
    559a:	cb 01       	movw	r24, r22
    559c:	9c 8b       	std	Y+20, r25	; 0x14
    559e:	8b 8b       	std	Y+19, r24	; 0x13
    55a0:	0f c0       	rjmp	.+30     	; 0x55c0 <OWNER_vidGarageControl+0x476>
    55a2:	80 e9       	ldi	r24, 0x90	; 144
    55a4:	91 e0       	ldi	r25, 0x01	; 1
    55a6:	9a 8b       	std	Y+18, r25	; 0x12
    55a8:	89 8b       	std	Y+17, r24	; 0x11
    55aa:	89 89       	ldd	r24, Y+17	; 0x11
    55ac:	9a 89       	ldd	r25, Y+18	; 0x12
    55ae:	01 97       	sbiw	r24, 0x01	; 1
    55b0:	f1 f7       	brne	.-4      	; 0x55ae <OWNER_vidGarageControl+0x464>
    55b2:	9a 8b       	std	Y+18, r25	; 0x12
    55b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55b6:	8b 89       	ldd	r24, Y+19	; 0x13
    55b8:	9c 89       	ldd	r25, Y+20	; 0x14
    55ba:	01 97       	sbiw	r24, 0x01	; 1
    55bc:	9c 8b       	std	Y+20, r25	; 0x14
    55be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55c0:	8b 89       	ldd	r24, Y+19	; 0x13
    55c2:	9c 89       	ldd	r25, Y+20	; 0x14
    55c4:	00 97       	sbiw	r24, 0x00	; 0
    55c6:	69 f7       	brne	.-38     	; 0x55a2 <OWNER_vidGarageControl+0x458>
    55c8:	93 c0       	rjmp	.+294    	; 0x56f0 <OWNER_vidGarageControl+0x5a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55ca:	6d 89       	ldd	r22, Y+21	; 0x15
    55cc:	7e 89       	ldd	r23, Y+22	; 0x16
    55ce:	8f 89       	ldd	r24, Y+23	; 0x17
    55d0:	98 8d       	ldd	r25, Y+24	; 0x18
    55d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55d6:	dc 01       	movw	r26, r24
    55d8:	cb 01       	movw	r24, r22
    55da:	9c 8b       	std	Y+20, r25	; 0x14
    55dc:	8b 8b       	std	Y+19, r24	; 0x13
    55de:	8b 89       	ldd	r24, Y+19	; 0x13
    55e0:	9c 89       	ldd	r25, Y+20	; 0x14
    55e2:	98 8b       	std	Y+16, r25	; 0x10
    55e4:	8f 87       	std	Y+15, r24	; 0x0f
    55e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    55e8:	98 89       	ldd	r25, Y+16	; 0x10
    55ea:	01 97       	sbiw	r24, 0x01	; 1
    55ec:	f1 f7       	brne	.-4      	; 0x55ea <OWNER_vidGarageControl+0x4a0>
    55ee:	98 8b       	std	Y+16, r25	; 0x10
    55f0:	8f 87       	std	Y+15, r24	; 0x0f
    55f2:	7e c0       	rjmp	.+252    	; 0x56f0 <OWNER_vidGarageControl+0x5a6>
						_delay_ms(50);
					}else if(u8keyPressed == GARAGE_LOCK){
    55f4:	80 91 ec 02 	lds	r24, 0x02EC
    55f8:	82 33       	cpi	r24, 0x32	; 50
    55fa:	09 f0       	breq	.+2      	; 0x55fe <OWNER_vidGarageControl+0x4b4>
    55fc:	76 c0       	rjmp	.+236    	; 0x56ea <OWNER_vidGarageControl+0x5a0>
						SPI_vidTransceive(LOCK_GARAGE_REQUEST);
    55fe:	8f e7       	ldi	r24, 0x7F	; 127
    5600:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_vidTransceive>
    5604:	80 e0       	ldi	r24, 0x00	; 0
    5606:	90 e0       	ldi	r25, 0x00	; 0
    5608:	a8 e4       	ldi	r26, 0x48	; 72
    560a:	b2 e4       	ldi	r27, 0x42	; 66
    560c:	8b 87       	std	Y+11, r24	; 0x0b
    560e:	9c 87       	std	Y+12, r25	; 0x0c
    5610:	ad 87       	std	Y+13, r26	; 0x0d
    5612:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5614:	6b 85       	ldd	r22, Y+11	; 0x0b
    5616:	7c 85       	ldd	r23, Y+12	; 0x0c
    5618:	8d 85       	ldd	r24, Y+13	; 0x0d
    561a:	9e 85       	ldd	r25, Y+14	; 0x0e
    561c:	20 e0       	ldi	r18, 0x00	; 0
    561e:	30 e0       	ldi	r19, 0x00	; 0
    5620:	4a e7       	ldi	r20, 0x7A	; 122
    5622:	55 e4       	ldi	r21, 0x45	; 69
    5624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5628:	dc 01       	movw	r26, r24
    562a:	cb 01       	movw	r24, r22
    562c:	8f 83       	std	Y+7, r24	; 0x07
    562e:	98 87       	std	Y+8, r25	; 0x08
    5630:	a9 87       	std	Y+9, r26	; 0x09
    5632:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5634:	6f 81       	ldd	r22, Y+7	; 0x07
    5636:	78 85       	ldd	r23, Y+8	; 0x08
    5638:	89 85       	ldd	r24, Y+9	; 0x09
    563a:	9a 85       	ldd	r25, Y+10	; 0x0a
    563c:	20 e0       	ldi	r18, 0x00	; 0
    563e:	30 e0       	ldi	r19, 0x00	; 0
    5640:	40 e8       	ldi	r20, 0x80	; 128
    5642:	5f e3       	ldi	r21, 0x3F	; 63
    5644:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5648:	88 23       	and	r24, r24
    564a:	2c f4       	brge	.+10     	; 0x5656 <OWNER_vidGarageControl+0x50c>
		__ticks = 1;
    564c:	81 e0       	ldi	r24, 0x01	; 1
    564e:	90 e0       	ldi	r25, 0x00	; 0
    5650:	9e 83       	std	Y+6, r25	; 0x06
    5652:	8d 83       	std	Y+5, r24	; 0x05
    5654:	3f c0       	rjmp	.+126    	; 0x56d4 <OWNER_vidGarageControl+0x58a>
	else if (__tmp > 65535)
    5656:	6f 81       	ldd	r22, Y+7	; 0x07
    5658:	78 85       	ldd	r23, Y+8	; 0x08
    565a:	89 85       	ldd	r24, Y+9	; 0x09
    565c:	9a 85       	ldd	r25, Y+10	; 0x0a
    565e:	20 e0       	ldi	r18, 0x00	; 0
    5660:	3f ef       	ldi	r19, 0xFF	; 255
    5662:	4f e7       	ldi	r20, 0x7F	; 127
    5664:	57 e4       	ldi	r21, 0x47	; 71
    5666:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    566a:	18 16       	cp	r1, r24
    566c:	4c f5       	brge	.+82     	; 0x56c0 <OWNER_vidGarageControl+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    566e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5670:	7c 85       	ldd	r23, Y+12	; 0x0c
    5672:	8d 85       	ldd	r24, Y+13	; 0x0d
    5674:	9e 85       	ldd	r25, Y+14	; 0x0e
    5676:	20 e0       	ldi	r18, 0x00	; 0
    5678:	30 e0       	ldi	r19, 0x00	; 0
    567a:	40 e2       	ldi	r20, 0x20	; 32
    567c:	51 e4       	ldi	r21, 0x41	; 65
    567e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5682:	dc 01       	movw	r26, r24
    5684:	cb 01       	movw	r24, r22
    5686:	bc 01       	movw	r22, r24
    5688:	cd 01       	movw	r24, r26
    568a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    568e:	dc 01       	movw	r26, r24
    5690:	cb 01       	movw	r24, r22
    5692:	9e 83       	std	Y+6, r25	; 0x06
    5694:	8d 83       	std	Y+5, r24	; 0x05
    5696:	0f c0       	rjmp	.+30     	; 0x56b6 <OWNER_vidGarageControl+0x56c>
    5698:	80 e9       	ldi	r24, 0x90	; 144
    569a:	91 e0       	ldi	r25, 0x01	; 1
    569c:	9c 83       	std	Y+4, r25	; 0x04
    569e:	8b 83       	std	Y+3, r24	; 0x03
    56a0:	8b 81       	ldd	r24, Y+3	; 0x03
    56a2:	9c 81       	ldd	r25, Y+4	; 0x04
    56a4:	01 97       	sbiw	r24, 0x01	; 1
    56a6:	f1 f7       	brne	.-4      	; 0x56a4 <OWNER_vidGarageControl+0x55a>
    56a8:	9c 83       	std	Y+4, r25	; 0x04
    56aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56ac:	8d 81       	ldd	r24, Y+5	; 0x05
    56ae:	9e 81       	ldd	r25, Y+6	; 0x06
    56b0:	01 97       	sbiw	r24, 0x01	; 1
    56b2:	9e 83       	std	Y+6, r25	; 0x06
    56b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56b6:	8d 81       	ldd	r24, Y+5	; 0x05
    56b8:	9e 81       	ldd	r25, Y+6	; 0x06
    56ba:	00 97       	sbiw	r24, 0x00	; 0
    56bc:	69 f7       	brne	.-38     	; 0x5698 <OWNER_vidGarageControl+0x54e>
    56be:	18 c0       	rjmp	.+48     	; 0x56f0 <OWNER_vidGarageControl+0x5a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56c0:	6f 81       	ldd	r22, Y+7	; 0x07
    56c2:	78 85       	ldd	r23, Y+8	; 0x08
    56c4:	89 85       	ldd	r24, Y+9	; 0x09
    56c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    56c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56cc:	dc 01       	movw	r26, r24
    56ce:	cb 01       	movw	r24, r22
    56d0:	9e 83       	std	Y+6, r25	; 0x06
    56d2:	8d 83       	std	Y+5, r24	; 0x05
    56d4:	8d 81       	ldd	r24, Y+5	; 0x05
    56d6:	9e 81       	ldd	r25, Y+6	; 0x06
    56d8:	9a 83       	std	Y+2, r25	; 0x02
    56da:	89 83       	std	Y+1, r24	; 0x01
    56dc:	89 81       	ldd	r24, Y+1	; 0x01
    56de:	9a 81       	ldd	r25, Y+2	; 0x02
    56e0:	01 97       	sbiw	r24, 0x01	; 1
    56e2:	f1 f7       	brne	.-4      	; 0x56e0 <OWNER_vidGarageControl+0x596>
    56e4:	9a 83       	std	Y+2, r25	; 0x02
    56e6:	89 83       	std	Y+1, r24	; 0x01
    56e8:	03 c0       	rjmp	.+6      	; 0x56f0 <OWNER_vidGarageControl+0x5a6>
						_delay_ms(50);
					}else {
						u8keyPressed = WAITING_PRESS_KEY;
    56ea:	8f ef       	ldi	r24, 0xFF	; 255
    56ec:	80 93 ec 02 	sts	0x02EC, r24
				LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
				LCD_enuSendString("1:Open Garage");
				LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN0);
				LCD_enuSendString("2:Close Garage");
				u8keyPressed = WAITING_PRESS_KEY;
				while(u8keyPressed == WAITING_PRESS_KEY){
    56f0:	80 91 ec 02 	lds	r24, 0x02EC
    56f4:	8f 3f       	cpi	r24, 0xFF	; 255
    56f6:	09 f4       	brne	.+2      	; 0x56fa <OWNER_vidGarageControl+0x5b0>
    56f8:	fe ce       	rjmp	.-516    	; 0x54f6 <OWNER_vidGarageControl+0x3ac>
    56fa:	03 c0       	rjmp	.+6      	; 0x5702 <OWNER_vidGarageControl+0x5b8>
				}//end of #while loop# --> select open/close option
				break;
			case BACK:
				continue;
			default:
				u8keyPressed = WAITING_PRESS_KEY;
    56fc:	8f ef       	ldi	r24, 0xFF	; 255
    56fe:	80 93 ec 02 	sts	0x02EC, r24
	/* list the option available to the user and interact with keypad */
	LCD_enuSendString("1:AUTO  2:MANUAL");
	LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN10);
	LCD_enuSendString("0:BACK");
	u8keyPressed = WAITING_PRESS_KEY;
	while(u8keyPressed == WAITING_PRESS_KEY){
    5702:	80 91 ec 02 	lds	r24, 0x02EC
    5706:	8f 3f       	cpi	r24, 0xFF	; 255
    5708:	09 f4       	brne	.+2      	; 0x570c <OWNER_vidGarageControl+0x5c2>
    570a:	3f cd       	rjmp	.-1410   	; 0x518a <OWNER_vidGarageControl+0x40>
			default:
				u8keyPressed = WAITING_PRESS_KEY;
				break;
		}//end of #switch case# --> enter operation mode
	}// end of #while loop# --> enter operation mode
}//end of OWNER_vidGarageControl()
    570c:	c8 5b       	subi	r28, 0xB8	; 184
    570e:	df 4f       	sbci	r29, 0xFF	; 255
    5710:	0f b6       	in	r0, 0x3f	; 63
    5712:	f8 94       	cli
    5714:	de bf       	out	0x3e, r29	; 62
    5716:	0f be       	out	0x3f, r0	; 63
    5718:	cd bf       	out	0x3d, r28	; 61
    571a:	cf 91       	pop	r28
    571c:	df 91       	pop	r29
    571e:	1f 91       	pop	r17
    5720:	0f 91       	pop	r16
    5722:	08 95       	ret

00005724 <OWNER_vidcounterDown>:
/* Name: OWNER_vidcounterDown
 * Description: implement a down counter for the period of activate party mode
 * Arguments:	Copy_u8timeMinutes  -->  options (pass the value user enter it)
 * Return:	void
 */
void OWNER_vidcounterDown(u8 Copy_u8timeMinutes){
    5724:	df 93       	push	r29
    5726:	cf 93       	push	r28
    5728:	00 d0       	rcall	.+0      	; 0x572a <OWNER_vidcounterDown+0x6>
    572a:	cd b7       	in	r28, 0x3d	; 61
    572c:	de b7       	in	r29, 0x3e	; 62
    572e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8RemainingMinutes = Copy_u8timeMinutes;
    5730:	8a 81       	ldd	r24, Y+2	; 0x02
    5732:	89 83       	std	Y+1, r24	; 0x01
	LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
    5734:	81 e0       	ldi	r24, 0x01	; 1
    5736:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
	LCD_enuGoTo(LCD_u8_ROW0, LCD_u8_COLUMN4);
    573a:	80 e0       	ldi	r24, 0x00	; 0
    573c:	64 e0       	ldi	r22, 0x04	; 4
    573e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
	LCD_enuSendString("00:  :");
    5742:	8b e8       	ldi	r24, 0x8B	; 139
    5744:	92 e0       	ldi	r25, 0x02	; 2
    5746:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
	LCD_enuGoTo(LCD_u8_ROW0, LCD_u8_COLUMN7);
    574a:	80 e0       	ldi	r24, 0x00	; 0
    574c:	67 e0       	ldi	r22, 0x07	; 7
    574e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
	LCD_enuSendNumber(Local_u8RemainingMinutes);
    5752:	89 81       	ldd	r24, Y+1	; 0x01
    5754:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <LCD_enuSendNumber>
	LCD_enuGoTo(LCD_u8_ROW0, LCD_u8_COLUMN10);
    5758:	80 e0       	ldi	r24, 0x00	; 0
    575a:	6a e0       	ldi	r22, 0x0A	; 10
    575c:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
	LCD_enuSendCharacter('00');
    5760:	80 e3       	ldi	r24, 0x30	; 48
    5762:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LCD_enuSendCharacter>
	GPT_vidStartTimer(GPT_u8_TIMER0, SECONDS_IN_MINUTES, NO_PRELOAD);
    5766:	80 e0       	ldi	r24, 0x00	; 0
    5768:	6b e3       	ldi	r22, 0x3B	; 59
    576a:	40 e0       	ldi	r20, 0x00	; 0
    576c:	0e 94 22 06 	call	0xc44	; 0xc44 <GPT_vidStartTimer>
    5770:	10 c0       	rjmp	.+32     	; 0x5792 <OWNER_vidcounterDown+0x6e>
	while((Local_u8RemainingMinutes <= Copy_u8timeMinutes) && (Local_u8RemainingMinutes != ZERO)){
		u8MinuteEnd = FALSE;
    5772:	10 92 ed 02 	sts	0x02ED, r1
		Local_u8RemainingMinutes --;
    5776:	89 81       	ldd	r24, Y+1	; 0x01
    5778:	81 50       	subi	r24, 0x01	; 1
    577a:	89 83       	std	Y+1, r24	; 0x01
		LCD_enuGoTo(LCD_u8_ROW0, LCD_u8_COLUMN7);
    577c:	80 e0       	ldi	r24, 0x00	; 0
    577e:	67 e0       	ldi	r22, 0x07	; 7
    5780:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
		LCD_enuSendNumber(Local_u8RemainingMinutes);
    5784:	89 81       	ldd	r24, Y+1	; 0x01
    5786:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <LCD_enuSendNumber>
		while(u8MinuteEnd != TRUE);
    578a:	80 91 ed 02 	lds	r24, 0x02ED
    578e:	81 30       	cpi	r24, 0x01	; 1
    5790:	e1 f7       	brne	.-8      	; 0x578a <OWNER_vidcounterDown+0x66>
	LCD_enuGoTo(LCD_u8_ROW0, LCD_u8_COLUMN7);
	LCD_enuSendNumber(Local_u8RemainingMinutes);
	LCD_enuGoTo(LCD_u8_ROW0, LCD_u8_COLUMN10);
	LCD_enuSendCharacter('00');
	GPT_vidStartTimer(GPT_u8_TIMER0, SECONDS_IN_MINUTES, NO_PRELOAD);
	while((Local_u8RemainingMinutes <= Copy_u8timeMinutes) && (Local_u8RemainingMinutes != ZERO)){
    5792:	99 81       	ldd	r25, Y+1	; 0x01
    5794:	8a 81       	ldd	r24, Y+2	; 0x02
    5796:	89 17       	cp	r24, r25
    5798:	18 f0       	brcs	.+6      	; 0x57a0 <OWNER_vidcounterDown+0x7c>
    579a:	89 81       	ldd	r24, Y+1	; 0x01
    579c:	88 23       	and	r24, r24
    579e:	49 f7       	brne	.-46     	; 0x5772 <OWNER_vidcounterDown+0x4e>
		Local_u8RemainingMinutes --;
		LCD_enuGoTo(LCD_u8_ROW0, LCD_u8_COLUMN7);
		LCD_enuSendNumber(Local_u8RemainingMinutes);
		while(u8MinuteEnd != TRUE);
	}
	LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN0); //move the cursor to the middle of first row
    57a0:	81 e0       	ldi	r24, 0x01	; 1
    57a2:	60 e0       	ldi	r22, 0x00	; 0
    57a4:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
	LCD_enuSendString(" PARTY TIME OUT ");
    57a8:	82 e9       	ldi	r24, 0x92	; 146
    57aa:	92 e0       	ldi	r25, 0x02	; 2
    57ac:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
}
    57b0:	0f 90       	pop	r0
    57b2:	0f 90       	pop	r0
    57b4:	cf 91       	pop	r28
    57b6:	df 91       	pop	r29
    57b8:	08 95       	ret

000057ba <__vector_11>:

ISR(TIMER0_OVF_vect){
    57ba:	1f 92       	push	r1
    57bc:	0f 92       	push	r0
    57be:	0f b6       	in	r0, 0x3f	; 63
    57c0:	0f 92       	push	r0
    57c2:	11 24       	eor	r1, r1
    57c4:	2f 93       	push	r18
    57c6:	3f 93       	push	r19
    57c8:	4f 93       	push	r20
    57ca:	5f 93       	push	r21
    57cc:	6f 93       	push	r22
    57ce:	7f 93       	push	r23
    57d0:	8f 93       	push	r24
    57d2:	9f 93       	push	r25
    57d4:	af 93       	push	r26
    57d6:	bf 93       	push	r27
    57d8:	ef 93       	push	r30
    57da:	ff 93       	push	r31
    57dc:	df 93       	push	r29
    57de:	cf 93       	push	r28
    57e0:	cd b7       	in	r28, 0x3d	; 61
    57e2:	de b7       	in	r29, 0x3e	; 62
	static u8 sec_counter = ZERO;
	static u8 min_counter = ZERO;
	LCD_enuGoTo(LCD_u8_ROW0, LCD_u8_COLUMN10);
    57e4:	80 e0       	ldi	r24, 0x00	; 0
    57e6:	6a e0       	ldi	r22, 0x0A	; 10
    57e8:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
	LCD_enuSendNumber(SECONDS_IN_MINUTES - sec_counter);
    57ec:	90 91 2a 03 	lds	r25, 0x032A
    57f0:	8b e3       	ldi	r24, 0x3B	; 59
    57f2:	89 1b       	sub	r24, r25
    57f4:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <LCD_enuSendNumber>
	sec_counter ++;
    57f8:	80 91 2a 03 	lds	r24, 0x032A
    57fc:	8f 5f       	subi	r24, 0xFF	; 255
    57fe:	80 93 2a 03 	sts	0x032A, r24
	if(sec_counter == SECONDS_IN_MINUTES + 1){
    5802:	80 91 2a 03 	lds	r24, 0x032A
    5806:	8c 33       	cpi	r24, 0x3C	; 60
    5808:	a9 f4       	brne	.+42     	; 0x5834 <__vector_11+0x7a>
		sec_counter = ZERO;
    580a:	10 92 2a 03 	sts	0x032A, r1
		u8MinuteEnd = TRUE;
    580e:	81 e0       	ldi	r24, 0x01	; 1
    5810:	80 93 ed 02 	sts	0x02ED, r24
		min_counter++;
    5814:	80 91 29 03 	lds	r24, 0x0329
    5818:	8f 5f       	subi	r24, 0xFF	; 255
    581a:	80 93 29 03 	sts	0x0329, r24
		if(min_counter == u8PartyDuration){
    581e:	90 91 29 03 	lds	r25, 0x0329
    5822:	80 91 2d 03 	lds	r24, 0x032D
    5826:	98 17       	cp	r25, r24
    5828:	29 f4       	brne	.+10     	; 0x5834 <__vector_11+0x7a>
			GPT_vidStopTimer(GPT_u8_TIMER0);
    582a:	80 e0       	ldi	r24, 0x00	; 0
    582c:	0e 94 48 06 	call	0xc90	; 0xc90 <GPT_vidStopTimer>
			min_counter = 0;
    5830:	10 92 29 03 	sts	0x0329, r1
		}

	}
}
    5834:	cf 91       	pop	r28
    5836:	df 91       	pop	r29
    5838:	ff 91       	pop	r31
    583a:	ef 91       	pop	r30
    583c:	bf 91       	pop	r27
    583e:	af 91       	pop	r26
    5840:	9f 91       	pop	r25
    5842:	8f 91       	pop	r24
    5844:	7f 91       	pop	r23
    5846:	6f 91       	pop	r22
    5848:	5f 91       	pop	r21
    584a:	4f 91       	pop	r20
    584c:	3f 91       	pop	r19
    584e:	2f 91       	pop	r18
    5850:	0f 90       	pop	r0
    5852:	0f be       	out	0x3f, r0	; 63
    5854:	0f 90       	pop	r0
    5856:	1f 90       	pop	r1
    5858:	18 95       	reti

0000585a <OWNER_u8getTemperature>:
 * Description: function get the temperature degree from the keypad ...
 *				user press two keys sequentially and enter it in the equation to return a number with two digits
 * Arguments:	Copy_u8TempLimit  ------->  options(MAX_TEMP, MIN_TEMP)
 * Return:	u8 ------> temperature degree
 */
u8 OWNER_u8getTemperature(u8 Copy_u8TempLimit){
    585a:	df 93       	push	r29
    585c:	cf 93       	push	r28
    585e:	cd b7       	in	r28, 0x3d	; 61
    5860:	de b7       	in	r29, 0x3e	; 62
    5862:	62 97       	sbiw	r28, 0x12	; 18
    5864:	0f b6       	in	r0, 0x3f	; 63
    5866:	f8 94       	cli
    5868:	de bf       	out	0x3e, r29	; 62
    586a:	0f be       	out	0x3f, r0	; 63
    586c:	cd bf       	out	0x3d, r28	; 61
    586e:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Local_u8tempTens;	// create local variable to store the first digit
	u8 Local_u8tempOnes;	// create local variable to store the second digit
	u8 Local_u8iterator;	// create local count digits
	/* get the pressed key value and store it in the specific local variable */
	u8keyPressed = WAITING_PRESS_KEY;
    5870:	8f ef       	ldi	r24, 0xFF	; 255
    5872:	80 93 ec 02 	sts	0x02EC, r24
	if(Copy_u8TempLimit == MIN_TEMP){
    5876:	8a 89       	ldd	r24, Y+18	; 0x12
    5878:	88 23       	and	r24, r24
    587a:	29 f4       	brne	.+10     	; 0x5886 <OWNER_u8getTemperature+0x2c>
		LCD_enuGoTo(LCD_u8_ROW0, LCD_u8_COLUMN13);
    587c:	80 e0       	ldi	r24, 0x00	; 0
    587e:	6d e0       	ldi	r22, 0x0D	; 13
    5880:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
    5884:	07 c0       	rjmp	.+14     	; 0x5894 <OWNER_u8getTemperature+0x3a>
	} else if(Copy_u8TempLimit == MAX_TEMP){
    5886:	8a 89       	ldd	r24, Y+18	; 0x12
    5888:	81 30       	cpi	r24, 0x01	; 1
    588a:	21 f4       	brne	.+8      	; 0x5894 <OWNER_u8getTemperature+0x3a>
		LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN13);
    588c:	81 e0       	ldi	r24, 0x01	; 1
    588e:	6d e0       	ldi	r22, 0x0D	; 13
    5890:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
	} else{ /*.....*/ }
	LCD_enuSendInstruction(LCD_u8_DISPLAY_ON_CURRSOR_ON);
    5894:	8e e0       	ldi	r24, 0x0E	; 14
    5896:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
	for(Local_u8iterator = ZERO; Local_u8iterator < DIGIT_TWO ; Local_u8iterator++){
    589a:	1f 86       	std	Y+15, r1	; 0x0f
    589c:	97 c0       	rjmp	.+302    	; 0x59cc <OWNER_u8getTemperature+0x172>
		u8keyPressed = WAITING_PRESS_KEY;
    589e:	8f ef       	ldi	r24, 0xFF	; 255
    58a0:	80 93 ec 02 	sts	0x02EC, r24
    58a4:	04 c0       	rjmp	.+8      	; 0x58ae <OWNER_u8getTemperature+0x54>
		while((u8keyPressed == WAITING_PRESS_KEY) || (u8keyPressed == HASH_SIGN) || (u8keyPressed == ASTERISK_SIGN)){
			KEYPAD_vidGetPressedKey(&u8keyPressed);
    58a6:	8c ee       	ldi	r24, 0xEC	; 236
    58a8:	92 e0       	ldi	r25, 0x02	; 2
    58aa:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <KEYPAD_vidGetPressedKey>
		LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN13);
	} else{ /*.....*/ }
	LCD_enuSendInstruction(LCD_u8_DISPLAY_ON_CURRSOR_ON);
	for(Local_u8iterator = ZERO; Local_u8iterator < DIGIT_TWO ; Local_u8iterator++){
		u8keyPressed = WAITING_PRESS_KEY;
		while((u8keyPressed == WAITING_PRESS_KEY) || (u8keyPressed == HASH_SIGN) || (u8keyPressed == ASTERISK_SIGN)){
    58ae:	80 91 ec 02 	lds	r24, 0x02EC
    58b2:	8f 3f       	cpi	r24, 0xFF	; 255
    58b4:	c1 f3       	breq	.-16     	; 0x58a6 <OWNER_u8getTemperature+0x4c>
    58b6:	80 91 ec 02 	lds	r24, 0x02EC
    58ba:	83 32       	cpi	r24, 0x23	; 35
    58bc:	a1 f3       	breq	.-24     	; 0x58a6 <OWNER_u8getTemperature+0x4c>
    58be:	80 91 ec 02 	lds	r24, 0x02EC
    58c2:	8a 32       	cpi	r24, 0x2A	; 42
    58c4:	81 f3       	breq	.-32     	; 0x58a6 <OWNER_u8getTemperature+0x4c>
			KEYPAD_vidGetPressedKey(&u8keyPressed);
		}
		LCD_enuSendCharacter(u8keyPressed);
    58c6:	80 91 ec 02 	lds	r24, 0x02EC
    58ca:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LCD_enuSendCharacter>
    58ce:	80 e0       	ldi	r24, 0x00	; 0
    58d0:	90 e0       	ldi	r25, 0x00	; 0
    58d2:	a8 e4       	ldi	r26, 0x48	; 72
    58d4:	b2 e4       	ldi	r27, 0x42	; 66
    58d6:	8b 87       	std	Y+11, r24	; 0x0b
    58d8:	9c 87       	std	Y+12, r25	; 0x0c
    58da:	ad 87       	std	Y+13, r26	; 0x0d
    58dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    58de:	6b 85       	ldd	r22, Y+11	; 0x0b
    58e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    58e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    58e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    58e6:	20 e0       	ldi	r18, 0x00	; 0
    58e8:	30 e0       	ldi	r19, 0x00	; 0
    58ea:	4a e7       	ldi	r20, 0x7A	; 122
    58ec:	55 e4       	ldi	r21, 0x45	; 69
    58ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58f2:	dc 01       	movw	r26, r24
    58f4:	cb 01       	movw	r24, r22
    58f6:	8f 83       	std	Y+7, r24	; 0x07
    58f8:	98 87       	std	Y+8, r25	; 0x08
    58fa:	a9 87       	std	Y+9, r26	; 0x09
    58fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    58fe:	6f 81       	ldd	r22, Y+7	; 0x07
    5900:	78 85       	ldd	r23, Y+8	; 0x08
    5902:	89 85       	ldd	r24, Y+9	; 0x09
    5904:	9a 85       	ldd	r25, Y+10	; 0x0a
    5906:	20 e0       	ldi	r18, 0x00	; 0
    5908:	30 e0       	ldi	r19, 0x00	; 0
    590a:	40 e8       	ldi	r20, 0x80	; 128
    590c:	5f e3       	ldi	r21, 0x3F	; 63
    590e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5912:	88 23       	and	r24, r24
    5914:	2c f4       	brge	.+10     	; 0x5920 <OWNER_u8getTemperature+0xc6>
		__ticks = 1;
    5916:	81 e0       	ldi	r24, 0x01	; 1
    5918:	90 e0       	ldi	r25, 0x00	; 0
    591a:	9e 83       	std	Y+6, r25	; 0x06
    591c:	8d 83       	std	Y+5, r24	; 0x05
    591e:	3f c0       	rjmp	.+126    	; 0x599e <OWNER_u8getTemperature+0x144>
	else if (__tmp > 65535)
    5920:	6f 81       	ldd	r22, Y+7	; 0x07
    5922:	78 85       	ldd	r23, Y+8	; 0x08
    5924:	89 85       	ldd	r24, Y+9	; 0x09
    5926:	9a 85       	ldd	r25, Y+10	; 0x0a
    5928:	20 e0       	ldi	r18, 0x00	; 0
    592a:	3f ef       	ldi	r19, 0xFF	; 255
    592c:	4f e7       	ldi	r20, 0x7F	; 127
    592e:	57 e4       	ldi	r21, 0x47	; 71
    5930:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5934:	18 16       	cp	r1, r24
    5936:	4c f5       	brge	.+82     	; 0x598a <OWNER_u8getTemperature+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5938:	6b 85       	ldd	r22, Y+11	; 0x0b
    593a:	7c 85       	ldd	r23, Y+12	; 0x0c
    593c:	8d 85       	ldd	r24, Y+13	; 0x0d
    593e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5940:	20 e0       	ldi	r18, 0x00	; 0
    5942:	30 e0       	ldi	r19, 0x00	; 0
    5944:	40 e2       	ldi	r20, 0x20	; 32
    5946:	51 e4       	ldi	r21, 0x41	; 65
    5948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    594c:	dc 01       	movw	r26, r24
    594e:	cb 01       	movw	r24, r22
    5950:	bc 01       	movw	r22, r24
    5952:	cd 01       	movw	r24, r26
    5954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5958:	dc 01       	movw	r26, r24
    595a:	cb 01       	movw	r24, r22
    595c:	9e 83       	std	Y+6, r25	; 0x06
    595e:	8d 83       	std	Y+5, r24	; 0x05
    5960:	0f c0       	rjmp	.+30     	; 0x5980 <OWNER_u8getTemperature+0x126>
    5962:	80 e9       	ldi	r24, 0x90	; 144
    5964:	91 e0       	ldi	r25, 0x01	; 1
    5966:	9c 83       	std	Y+4, r25	; 0x04
    5968:	8b 83       	std	Y+3, r24	; 0x03
    596a:	8b 81       	ldd	r24, Y+3	; 0x03
    596c:	9c 81       	ldd	r25, Y+4	; 0x04
    596e:	01 97       	sbiw	r24, 0x01	; 1
    5970:	f1 f7       	brne	.-4      	; 0x596e <OWNER_u8getTemperature+0x114>
    5972:	9c 83       	std	Y+4, r25	; 0x04
    5974:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5976:	8d 81       	ldd	r24, Y+5	; 0x05
    5978:	9e 81       	ldd	r25, Y+6	; 0x06
    597a:	01 97       	sbiw	r24, 0x01	; 1
    597c:	9e 83       	std	Y+6, r25	; 0x06
    597e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5980:	8d 81       	ldd	r24, Y+5	; 0x05
    5982:	9e 81       	ldd	r25, Y+6	; 0x06
    5984:	00 97       	sbiw	r24, 0x00	; 0
    5986:	69 f7       	brne	.-38     	; 0x5962 <OWNER_u8getTemperature+0x108>
    5988:	14 c0       	rjmp	.+40     	; 0x59b2 <OWNER_u8getTemperature+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    598a:	6f 81       	ldd	r22, Y+7	; 0x07
    598c:	78 85       	ldd	r23, Y+8	; 0x08
    598e:	89 85       	ldd	r24, Y+9	; 0x09
    5990:	9a 85       	ldd	r25, Y+10	; 0x0a
    5992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5996:	dc 01       	movw	r26, r24
    5998:	cb 01       	movw	r24, r22
    599a:	9e 83       	std	Y+6, r25	; 0x06
    599c:	8d 83       	std	Y+5, r24	; 0x05
    599e:	8d 81       	ldd	r24, Y+5	; 0x05
    59a0:	9e 81       	ldd	r25, Y+6	; 0x06
    59a2:	9a 83       	std	Y+2, r25	; 0x02
    59a4:	89 83       	std	Y+1, r24	; 0x01
    59a6:	89 81       	ldd	r24, Y+1	; 0x01
    59a8:	9a 81       	ldd	r25, Y+2	; 0x02
    59aa:	01 97       	sbiw	r24, 0x01	; 1
    59ac:	f1 f7       	brne	.-4      	; 0x59aa <OWNER_u8getTemperature+0x150>
    59ae:	9a 83       	std	Y+2, r25	; 0x02
    59b0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		Local_u8iterator == ZERO ? (Local_u8tempTens = u8keyPressed):(Local_u8tempOnes = u8keyPressed);
    59b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    59b4:	88 23       	and	r24, r24
    59b6:	21 f4       	brne	.+8      	; 0x59c0 <OWNER_u8getTemperature+0x166>
    59b8:	80 91 ec 02 	lds	r24, 0x02EC
    59bc:	89 8b       	std	Y+17, r24	; 0x11
    59be:	03 c0       	rjmp	.+6      	; 0x59c6 <OWNER_u8getTemperature+0x16c>
    59c0:	80 91 ec 02 	lds	r24, 0x02EC
    59c4:	88 8b       	std	Y+16, r24	; 0x10
		LCD_enuGoTo(LCD_u8_ROW0, LCD_u8_COLUMN13);
	} else if(Copy_u8TempLimit == MAX_TEMP){
		LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN13);
	} else{ /*.....*/ }
	LCD_enuSendInstruction(LCD_u8_DISPLAY_ON_CURRSOR_ON);
	for(Local_u8iterator = ZERO; Local_u8iterator < DIGIT_TWO ; Local_u8iterator++){
    59c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    59c8:	8f 5f       	subi	r24, 0xFF	; 255
    59ca:	8f 87       	std	Y+15, r24	; 0x0f
    59cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    59ce:	82 30       	cpi	r24, 0x02	; 2
    59d0:	08 f4       	brcc	.+2      	; 0x59d4 <OWNER_u8getTemperature+0x17a>
    59d2:	65 cf       	rjmp	.-310    	; 0x589e <OWNER_u8getTemperature+0x44>
		}
		LCD_enuSendCharacter(u8keyPressed);
		_delay_ms(50);
		Local_u8iterator == ZERO ? (Local_u8tempTens = u8keyPressed):(Local_u8tempOnes = u8keyPressed);
	}//end of #for loop
	LCD_enuSendInstruction(LCD_u8_DISPLAY_ON_CURRSOR_OFF);
    59d4:	8c e0       	ldi	r24, 0x0C	; 12
    59d6:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
	/* calculate the equation and return its result */
	return ((Local_u8tempTens * TEN_MULTIPLICANT) + Local_u8tempOnes);
    59da:	89 89       	ldd	r24, Y+17	; 0x11
    59dc:	88 2f       	mov	r24, r24
    59de:	90 e0       	ldi	r25, 0x00	; 0
    59e0:	9c 01       	movw	r18, r24
    59e2:	22 0f       	add	r18, r18
    59e4:	33 1f       	adc	r19, r19
    59e6:	c9 01       	movw	r24, r18
    59e8:	88 0f       	add	r24, r24
    59ea:	99 1f       	adc	r25, r25
    59ec:	88 0f       	add	r24, r24
    59ee:	99 1f       	adc	r25, r25
    59f0:	82 0f       	add	r24, r18
    59f2:	93 1f       	adc	r25, r19
    59f4:	98 2f       	mov	r25, r24
    59f6:	88 89       	ldd	r24, Y+16	; 0x10
    59f8:	89 0f       	add	r24, r25
}//end of OWNER_u8getTemperature()
    59fa:	62 96       	adiw	r28, 0x12	; 18
    59fc:	0f b6       	in	r0, 0x3f	; 63
    59fe:	f8 94       	cli
    5a00:	de bf       	out	0x3e, r29	; 62
    5a02:	0f be       	out	0x3f, r0	; 63
    5a04:	cd bf       	out	0x3d, r28	; 61
    5a06:	cf 91       	pop	r28
    5a08:	df 91       	pop	r29
    5a0a:	08 95       	ret

00005a0c <TENANT_vidRoomControl>:
/* Name: TENANT_vidRoomControl
 * Description: control options available to the user assign as tenant for its room
 * Arguments: void
 * Return:	void
 */
void TENANT_vidRoomControl(void){
    5a0c:	0f 93       	push	r16
    5a0e:	1f 93       	push	r17
    5a10:	df 93       	push	r29
    5a12:	cf 93       	push	r28
    5a14:	cd b7       	in	r28, 0x3d	; 61
    5a16:	de b7       	in	r29, 0x3e	; 62
    5a18:	ca 54       	subi	r28, 0x4A	; 74
    5a1a:	d0 40       	sbci	r29, 0x00	; 0
    5a1c:	0f b6       	in	r0, 0x3f	; 63
    5a1e:	f8 94       	cli
    5a20:	de bf       	out	0x3e, r29	; 62
    5a22:	0f be       	out	0x3f, r0	; 63
    5a24:	cd bf       	out	0x3d, r28	; 61
	/* local variable */
	u8 Local_u8SPIrequest = DONT_CARE;	//create a variable to get the data send by SPI from the slave
    5a26:	fe 01       	movw	r30, r28
    5a28:	e9 5b       	subi	r30, 0xB9	; 185
    5a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a2c:	8f ef       	ldi	r24, 0xFF	; 255
    5a2e:	80 83       	st	Z, r24
	u8 Local_u8keyPressed = WAITING_PRESS_KEY;	//create a variable to store the pressed key
    5a30:	fe 01       	movw	r30, r28
    5a32:	e8 5b       	subi	r30, 0xB8	; 184
    5a34:	ff 4f       	sbci	r31, 0xFF	; 255
    5a36:	8f ef       	ldi	r24, 0xFF	; 255
    5a38:	80 83       	st	Z, r24

	/* clear the LCD screen */
	LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
    5a3a:	81 e0       	ldi	r24, 0x01	; 1
    5a3c:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
	/* send request to the slave MC to send back the room status */
	SPI_vidTransceive(GET_TENANT_DOOR_STATUS);
    5a40:	89 e0       	ldi	r24, 0x09	; 9
    5a42:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_vidTransceive>
    5a46:	fe 01       	movw	r30, r28
    5a48:	ed 5b       	subi	r30, 0xBD	; 189
    5a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a4c:	80 e0       	ldi	r24, 0x00	; 0
    5a4e:	90 e0       	ldi	r25, 0x00	; 0
    5a50:	a8 e4       	ldi	r26, 0x48	; 72
    5a52:	b2 e4       	ldi	r27, 0x42	; 66
    5a54:	80 83       	st	Z, r24
    5a56:	91 83       	std	Z+1, r25	; 0x01
    5a58:	a2 83       	std	Z+2, r26	; 0x02
    5a5a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a5c:	8e 01       	movw	r16, r28
    5a5e:	01 5c       	subi	r16, 0xC1	; 193
    5a60:	1f 4f       	sbci	r17, 0xFF	; 255
    5a62:	fe 01       	movw	r30, r28
    5a64:	ed 5b       	subi	r30, 0xBD	; 189
    5a66:	ff 4f       	sbci	r31, 0xFF	; 255
    5a68:	60 81       	ld	r22, Z
    5a6a:	71 81       	ldd	r23, Z+1	; 0x01
    5a6c:	82 81       	ldd	r24, Z+2	; 0x02
    5a6e:	93 81       	ldd	r25, Z+3	; 0x03
    5a70:	20 e0       	ldi	r18, 0x00	; 0
    5a72:	30 e0       	ldi	r19, 0x00	; 0
    5a74:	4a e7       	ldi	r20, 0x7A	; 122
    5a76:	55 e4       	ldi	r21, 0x45	; 69
    5a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a7c:	dc 01       	movw	r26, r24
    5a7e:	cb 01       	movw	r24, r22
    5a80:	f8 01       	movw	r30, r16
    5a82:	80 83       	st	Z, r24
    5a84:	91 83       	std	Z+1, r25	; 0x01
    5a86:	a2 83       	std	Z+2, r26	; 0x02
    5a88:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5a8a:	fe 01       	movw	r30, r28
    5a8c:	ff 96       	adiw	r30, 0x3f	; 63
    5a8e:	60 81       	ld	r22, Z
    5a90:	71 81       	ldd	r23, Z+1	; 0x01
    5a92:	82 81       	ldd	r24, Z+2	; 0x02
    5a94:	93 81       	ldd	r25, Z+3	; 0x03
    5a96:	20 e0       	ldi	r18, 0x00	; 0
    5a98:	30 e0       	ldi	r19, 0x00	; 0
    5a9a:	40 e8       	ldi	r20, 0x80	; 128
    5a9c:	5f e3       	ldi	r21, 0x3F	; 63
    5a9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5aa2:	88 23       	and	r24, r24
    5aa4:	2c f4       	brge	.+10     	; 0x5ab0 <TENANT_vidRoomControl+0xa4>
		__ticks = 1;
    5aa6:	81 e0       	ldi	r24, 0x01	; 1
    5aa8:	90 e0       	ldi	r25, 0x00	; 0
    5aaa:	9e af       	std	Y+62, r25	; 0x3e
    5aac:	8d af       	std	Y+61, r24	; 0x3d
    5aae:	46 c0       	rjmp	.+140    	; 0x5b3c <TENANT_vidRoomControl+0x130>
	else if (__tmp > 65535)
    5ab0:	fe 01       	movw	r30, r28
    5ab2:	ff 96       	adiw	r30, 0x3f	; 63
    5ab4:	60 81       	ld	r22, Z
    5ab6:	71 81       	ldd	r23, Z+1	; 0x01
    5ab8:	82 81       	ldd	r24, Z+2	; 0x02
    5aba:	93 81       	ldd	r25, Z+3	; 0x03
    5abc:	20 e0       	ldi	r18, 0x00	; 0
    5abe:	3f ef       	ldi	r19, 0xFF	; 255
    5ac0:	4f e7       	ldi	r20, 0x7F	; 127
    5ac2:	57 e4       	ldi	r21, 0x47	; 71
    5ac4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5ac8:	18 16       	cp	r1, r24
    5aca:	64 f5       	brge	.+88     	; 0x5b24 <TENANT_vidRoomControl+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5acc:	fe 01       	movw	r30, r28
    5ace:	ed 5b       	subi	r30, 0xBD	; 189
    5ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    5ad2:	60 81       	ld	r22, Z
    5ad4:	71 81       	ldd	r23, Z+1	; 0x01
    5ad6:	82 81       	ldd	r24, Z+2	; 0x02
    5ad8:	93 81       	ldd	r25, Z+3	; 0x03
    5ada:	20 e0       	ldi	r18, 0x00	; 0
    5adc:	30 e0       	ldi	r19, 0x00	; 0
    5ade:	40 e2       	ldi	r20, 0x20	; 32
    5ae0:	51 e4       	ldi	r21, 0x41	; 65
    5ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ae6:	dc 01       	movw	r26, r24
    5ae8:	cb 01       	movw	r24, r22
    5aea:	bc 01       	movw	r22, r24
    5aec:	cd 01       	movw	r24, r26
    5aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5af2:	dc 01       	movw	r26, r24
    5af4:	cb 01       	movw	r24, r22
    5af6:	9e af       	std	Y+62, r25	; 0x3e
    5af8:	8d af       	std	Y+61, r24	; 0x3d
    5afa:	0f c0       	rjmp	.+30     	; 0x5b1a <TENANT_vidRoomControl+0x10e>
    5afc:	80 e9       	ldi	r24, 0x90	; 144
    5afe:	91 e0       	ldi	r25, 0x01	; 1
    5b00:	9c af       	std	Y+60, r25	; 0x3c
    5b02:	8b af       	std	Y+59, r24	; 0x3b
    5b04:	8b ad       	ldd	r24, Y+59	; 0x3b
    5b06:	9c ad       	ldd	r25, Y+60	; 0x3c
    5b08:	01 97       	sbiw	r24, 0x01	; 1
    5b0a:	f1 f7       	brne	.-4      	; 0x5b08 <TENANT_vidRoomControl+0xfc>
    5b0c:	9c af       	std	Y+60, r25	; 0x3c
    5b0e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b10:	8d ad       	ldd	r24, Y+61	; 0x3d
    5b12:	9e ad       	ldd	r25, Y+62	; 0x3e
    5b14:	01 97       	sbiw	r24, 0x01	; 1
    5b16:	9e af       	std	Y+62, r25	; 0x3e
    5b18:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b1a:	8d ad       	ldd	r24, Y+61	; 0x3d
    5b1c:	9e ad       	ldd	r25, Y+62	; 0x3e
    5b1e:	00 97       	sbiw	r24, 0x00	; 0
    5b20:	69 f7       	brne	.-38     	; 0x5afc <TENANT_vidRoomControl+0xf0>
    5b22:	16 c0       	rjmp	.+44     	; 0x5b50 <TENANT_vidRoomControl+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b24:	fe 01       	movw	r30, r28
    5b26:	ff 96       	adiw	r30, 0x3f	; 63
    5b28:	60 81       	ld	r22, Z
    5b2a:	71 81       	ldd	r23, Z+1	; 0x01
    5b2c:	82 81       	ldd	r24, Z+2	; 0x02
    5b2e:	93 81       	ldd	r25, Z+3	; 0x03
    5b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b34:	dc 01       	movw	r26, r24
    5b36:	cb 01       	movw	r24, r22
    5b38:	9e af       	std	Y+62, r25	; 0x3e
    5b3a:	8d af       	std	Y+61, r24	; 0x3d
    5b3c:	8d ad       	ldd	r24, Y+61	; 0x3d
    5b3e:	9e ad       	ldd	r25, Y+62	; 0x3e
    5b40:	9a af       	std	Y+58, r25	; 0x3a
    5b42:	89 af       	std	Y+57, r24	; 0x39
    5b44:	89 ad       	ldd	r24, Y+57	; 0x39
    5b46:	9a ad       	ldd	r25, Y+58	; 0x3a
    5b48:	01 97       	sbiw	r24, 0x01	; 1
    5b4a:	f1 f7       	brne	.-4      	; 0x5b48 <TENANT_vidRoomControl+0x13c>
    5b4c:	9a af       	std	Y+58, r25	; 0x3a
    5b4e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);
	Local_u8SPIrequest = SPI_vidTransceive(DONT_CARE);
    5b50:	8f ef       	ldi	r24, 0xFF	; 255
    5b52:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_vidTransceive>
    5b56:	fe 01       	movw	r30, r28
    5b58:	e9 5b       	subi	r30, 0xB9	; 185
    5b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b5c:	80 83       	st	Z, r24
	if(Local_u8SPIrequest == TENANT_DOOR_CLOSE){
    5b5e:	fe 01       	movw	r30, r28
    5b60:	e9 5b       	subi	r30, 0xB9	; 185
    5b62:	ff 4f       	sbci	r31, 0xFF	; 255
    5b64:	80 81       	ld	r24, Z
    5b66:	8b 30       	cpi	r24, 0x0B	; 11
    5b68:	29 f4       	brne	.+10     	; 0x5b74 <TENANT_vidRoomControl+0x168>
		LCD_enuSendString("DOOR:LOCK ");
    5b6a:	83 ea       	ldi	r24, 0xA3	; 163
    5b6c:	92 e0       	ldi	r25, 0x02	; 2
    5b6e:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
    5b72:	0a c0       	rjmp	.+20     	; 0x5b88 <TENANT_vidRoomControl+0x17c>
	} else if(Local_u8SPIrequest == TENANT_DOOR_OPEN){
    5b74:	fe 01       	movw	r30, r28
    5b76:	e9 5b       	subi	r30, 0xB9	; 185
    5b78:	ff 4f       	sbci	r31, 0xFF	; 255
    5b7a:	80 81       	ld	r24, Z
    5b7c:	8a 30       	cpi	r24, 0x0A	; 10
    5b7e:	21 f4       	brne	.+8      	; 0x5b88 <TENANT_vidRoomControl+0x17c>
		 LCD_enuSendString("DOOR:OPEN ");
    5b80:	8e ea       	ldi	r24, 0xAE	; 174
    5b82:	92 e0       	ldi	r25, 0x02	; 2
    5b84:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
	} else { /*.....*/ }
	LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN0);
    5b88:	81 e0       	ldi	r24, 0x01	; 1
    5b8a:	60 e0       	ldi	r22, 0x00	; 0
    5b8c:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
	SPI_vidTransceive(GET_TENANT_LIGHT_STATUS);
    5b90:	8c e0       	ldi	r24, 0x0C	; 12
    5b92:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_vidTransceive>
    5b96:	80 e0       	ldi	r24, 0x00	; 0
    5b98:	90 e0       	ldi	r25, 0x00	; 0
    5b9a:	a8 e4       	ldi	r26, 0x48	; 72
    5b9c:	b2 e4       	ldi	r27, 0x42	; 66
    5b9e:	8d ab       	std	Y+53, r24	; 0x35
    5ba0:	9e ab       	std	Y+54, r25	; 0x36
    5ba2:	af ab       	std	Y+55, r26	; 0x37
    5ba4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ba6:	6d a9       	ldd	r22, Y+53	; 0x35
    5ba8:	7e a9       	ldd	r23, Y+54	; 0x36
    5baa:	8f a9       	ldd	r24, Y+55	; 0x37
    5bac:	98 ad       	ldd	r25, Y+56	; 0x38
    5bae:	20 e0       	ldi	r18, 0x00	; 0
    5bb0:	30 e0       	ldi	r19, 0x00	; 0
    5bb2:	4a e7       	ldi	r20, 0x7A	; 122
    5bb4:	55 e4       	ldi	r21, 0x45	; 69
    5bb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5bba:	dc 01       	movw	r26, r24
    5bbc:	cb 01       	movw	r24, r22
    5bbe:	89 ab       	std	Y+49, r24	; 0x31
    5bc0:	9a ab       	std	Y+50, r25	; 0x32
    5bc2:	ab ab       	std	Y+51, r26	; 0x33
    5bc4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5bc6:	69 a9       	ldd	r22, Y+49	; 0x31
    5bc8:	7a a9       	ldd	r23, Y+50	; 0x32
    5bca:	8b a9       	ldd	r24, Y+51	; 0x33
    5bcc:	9c a9       	ldd	r25, Y+52	; 0x34
    5bce:	20 e0       	ldi	r18, 0x00	; 0
    5bd0:	30 e0       	ldi	r19, 0x00	; 0
    5bd2:	40 e8       	ldi	r20, 0x80	; 128
    5bd4:	5f e3       	ldi	r21, 0x3F	; 63
    5bd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5bda:	88 23       	and	r24, r24
    5bdc:	2c f4       	brge	.+10     	; 0x5be8 <TENANT_vidRoomControl+0x1dc>
		__ticks = 1;
    5bde:	81 e0       	ldi	r24, 0x01	; 1
    5be0:	90 e0       	ldi	r25, 0x00	; 0
    5be2:	98 ab       	std	Y+48, r25	; 0x30
    5be4:	8f a7       	std	Y+47, r24	; 0x2f
    5be6:	3f c0       	rjmp	.+126    	; 0x5c66 <TENANT_vidRoomControl+0x25a>
	else if (__tmp > 65535)
    5be8:	69 a9       	ldd	r22, Y+49	; 0x31
    5bea:	7a a9       	ldd	r23, Y+50	; 0x32
    5bec:	8b a9       	ldd	r24, Y+51	; 0x33
    5bee:	9c a9       	ldd	r25, Y+52	; 0x34
    5bf0:	20 e0       	ldi	r18, 0x00	; 0
    5bf2:	3f ef       	ldi	r19, 0xFF	; 255
    5bf4:	4f e7       	ldi	r20, 0x7F	; 127
    5bf6:	57 e4       	ldi	r21, 0x47	; 71
    5bf8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5bfc:	18 16       	cp	r1, r24
    5bfe:	4c f5       	brge	.+82     	; 0x5c52 <TENANT_vidRoomControl+0x246>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c00:	6d a9       	ldd	r22, Y+53	; 0x35
    5c02:	7e a9       	ldd	r23, Y+54	; 0x36
    5c04:	8f a9       	ldd	r24, Y+55	; 0x37
    5c06:	98 ad       	ldd	r25, Y+56	; 0x38
    5c08:	20 e0       	ldi	r18, 0x00	; 0
    5c0a:	30 e0       	ldi	r19, 0x00	; 0
    5c0c:	40 e2       	ldi	r20, 0x20	; 32
    5c0e:	51 e4       	ldi	r21, 0x41	; 65
    5c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c14:	dc 01       	movw	r26, r24
    5c16:	cb 01       	movw	r24, r22
    5c18:	bc 01       	movw	r22, r24
    5c1a:	cd 01       	movw	r24, r26
    5c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c20:	dc 01       	movw	r26, r24
    5c22:	cb 01       	movw	r24, r22
    5c24:	98 ab       	std	Y+48, r25	; 0x30
    5c26:	8f a7       	std	Y+47, r24	; 0x2f
    5c28:	0f c0       	rjmp	.+30     	; 0x5c48 <TENANT_vidRoomControl+0x23c>
    5c2a:	80 e9       	ldi	r24, 0x90	; 144
    5c2c:	91 e0       	ldi	r25, 0x01	; 1
    5c2e:	9e a7       	std	Y+46, r25	; 0x2e
    5c30:	8d a7       	std	Y+45, r24	; 0x2d
    5c32:	8d a5       	ldd	r24, Y+45	; 0x2d
    5c34:	9e a5       	ldd	r25, Y+46	; 0x2e
    5c36:	01 97       	sbiw	r24, 0x01	; 1
    5c38:	f1 f7       	brne	.-4      	; 0x5c36 <TENANT_vidRoomControl+0x22a>
    5c3a:	9e a7       	std	Y+46, r25	; 0x2e
    5c3c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5c40:	98 a9       	ldd	r25, Y+48	; 0x30
    5c42:	01 97       	sbiw	r24, 0x01	; 1
    5c44:	98 ab       	std	Y+48, r25	; 0x30
    5c46:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c48:	8f a5       	ldd	r24, Y+47	; 0x2f
    5c4a:	98 a9       	ldd	r25, Y+48	; 0x30
    5c4c:	00 97       	sbiw	r24, 0x00	; 0
    5c4e:	69 f7       	brne	.-38     	; 0x5c2a <TENANT_vidRoomControl+0x21e>
    5c50:	14 c0       	rjmp	.+40     	; 0x5c7a <TENANT_vidRoomControl+0x26e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c52:	69 a9       	ldd	r22, Y+49	; 0x31
    5c54:	7a a9       	ldd	r23, Y+50	; 0x32
    5c56:	8b a9       	ldd	r24, Y+51	; 0x33
    5c58:	9c a9       	ldd	r25, Y+52	; 0x34
    5c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c5e:	dc 01       	movw	r26, r24
    5c60:	cb 01       	movw	r24, r22
    5c62:	98 ab       	std	Y+48, r25	; 0x30
    5c64:	8f a7       	std	Y+47, r24	; 0x2f
    5c66:	8f a5       	ldd	r24, Y+47	; 0x2f
    5c68:	98 a9       	ldd	r25, Y+48	; 0x30
    5c6a:	9c a7       	std	Y+44, r25	; 0x2c
    5c6c:	8b a7       	std	Y+43, r24	; 0x2b
    5c6e:	8b a5       	ldd	r24, Y+43	; 0x2b
    5c70:	9c a5       	ldd	r25, Y+44	; 0x2c
    5c72:	01 97       	sbiw	r24, 0x01	; 1
    5c74:	f1 f7       	brne	.-4      	; 0x5c72 <TENANT_vidRoomControl+0x266>
    5c76:	9c a7       	std	Y+44, r25	; 0x2c
    5c78:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	Local_u8SPIrequest = SPI_vidTransceive(DONT_CARE);
    5c7a:	8f ef       	ldi	r24, 0xFF	; 255
    5c7c:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_vidTransceive>
    5c80:	fe 01       	movw	r30, r28
    5c82:	e9 5b       	subi	r30, 0xB9	; 185
    5c84:	ff 4f       	sbci	r31, 0xFF	; 255
    5c86:	80 83       	st	Z, r24
	if(Local_u8SPIrequest == TENANT_LIGHT_OFF){
    5c88:	fe 01       	movw	r30, r28
    5c8a:	e9 5b       	subi	r30, 0xB9	; 185
    5c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    5c8e:	80 81       	ld	r24, Z
    5c90:	8e 30       	cpi	r24, 0x0E	; 14
    5c92:	29 f4       	brne	.+10     	; 0x5c9e <TENANT_vidRoomControl+0x292>
		LCD_enuSendString("LED:OFF");
    5c94:	89 eb       	ldi	r24, 0xB9	; 185
    5c96:	92 e0       	ldi	r25, 0x02	; 2
    5c98:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
    5c9c:	0a c0       	rjmp	.+20     	; 0x5cb2 <TENANT_vidRoomControl+0x2a6>
	} else if(Local_u8SPIrequest == TENANT_LIGHT_ON){
    5c9e:	fe 01       	movw	r30, r28
    5ca0:	e9 5b       	subi	r30, 0xB9	; 185
    5ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    5ca4:	80 81       	ld	r24, Z
    5ca6:	8d 30       	cpi	r24, 0x0D	; 13
    5ca8:	21 f4       	brne	.+8      	; 0x5cb2 <TENANT_vidRoomControl+0x2a6>
		 LCD_enuSendString("LED:ON");
    5caa:	81 ec       	ldi	r24, 0xC1	; 193
    5cac:	92 e0       	ldi	r25, 0x02	; 2
    5cae:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
    5cb2:	80 e0       	ldi	r24, 0x00	; 0
    5cb4:	90 e0       	ldi	r25, 0x00	; 0
    5cb6:	a8 ec       	ldi	r26, 0xC8	; 200
    5cb8:	b2 e4       	ldi	r27, 0x42	; 66
    5cba:	8f a3       	std	Y+39, r24	; 0x27
    5cbc:	98 a7       	std	Y+40, r25	; 0x28
    5cbe:	a9 a7       	std	Y+41, r26	; 0x29
    5cc0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5cc2:	6f a1       	ldd	r22, Y+39	; 0x27
    5cc4:	78 a5       	ldd	r23, Y+40	; 0x28
    5cc6:	89 a5       	ldd	r24, Y+41	; 0x29
    5cc8:	9a a5       	ldd	r25, Y+42	; 0x2a
    5cca:	20 e0       	ldi	r18, 0x00	; 0
    5ccc:	30 e0       	ldi	r19, 0x00	; 0
    5cce:	4a e7       	ldi	r20, 0x7A	; 122
    5cd0:	55 e4       	ldi	r21, 0x45	; 69
    5cd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cd6:	dc 01       	movw	r26, r24
    5cd8:	cb 01       	movw	r24, r22
    5cda:	8b a3       	std	Y+35, r24	; 0x23
    5cdc:	9c a3       	std	Y+36, r25	; 0x24
    5cde:	ad a3       	std	Y+37, r26	; 0x25
    5ce0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5ce2:	6b a1       	ldd	r22, Y+35	; 0x23
    5ce4:	7c a1       	ldd	r23, Y+36	; 0x24
    5ce6:	8d a1       	ldd	r24, Y+37	; 0x25
    5ce8:	9e a1       	ldd	r25, Y+38	; 0x26
    5cea:	20 e0       	ldi	r18, 0x00	; 0
    5cec:	30 e0       	ldi	r19, 0x00	; 0
    5cee:	40 e8       	ldi	r20, 0x80	; 128
    5cf0:	5f e3       	ldi	r21, 0x3F	; 63
    5cf2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5cf6:	88 23       	and	r24, r24
    5cf8:	2c f4       	brge	.+10     	; 0x5d04 <TENANT_vidRoomControl+0x2f8>
		__ticks = 1;
    5cfa:	81 e0       	ldi	r24, 0x01	; 1
    5cfc:	90 e0       	ldi	r25, 0x00	; 0
    5cfe:	9a a3       	std	Y+34, r25	; 0x22
    5d00:	89 a3       	std	Y+33, r24	; 0x21
    5d02:	3f c0       	rjmp	.+126    	; 0x5d82 <TENANT_vidRoomControl+0x376>
	else if (__tmp > 65535)
    5d04:	6b a1       	ldd	r22, Y+35	; 0x23
    5d06:	7c a1       	ldd	r23, Y+36	; 0x24
    5d08:	8d a1       	ldd	r24, Y+37	; 0x25
    5d0a:	9e a1       	ldd	r25, Y+38	; 0x26
    5d0c:	20 e0       	ldi	r18, 0x00	; 0
    5d0e:	3f ef       	ldi	r19, 0xFF	; 255
    5d10:	4f e7       	ldi	r20, 0x7F	; 127
    5d12:	57 e4       	ldi	r21, 0x47	; 71
    5d14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5d18:	18 16       	cp	r1, r24
    5d1a:	4c f5       	brge	.+82     	; 0x5d6e <TENANT_vidRoomControl+0x362>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d1c:	6f a1       	ldd	r22, Y+39	; 0x27
    5d1e:	78 a5       	ldd	r23, Y+40	; 0x28
    5d20:	89 a5       	ldd	r24, Y+41	; 0x29
    5d22:	9a a5       	ldd	r25, Y+42	; 0x2a
    5d24:	20 e0       	ldi	r18, 0x00	; 0
    5d26:	30 e0       	ldi	r19, 0x00	; 0
    5d28:	40 e2       	ldi	r20, 0x20	; 32
    5d2a:	51 e4       	ldi	r21, 0x41	; 65
    5d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d30:	dc 01       	movw	r26, r24
    5d32:	cb 01       	movw	r24, r22
    5d34:	bc 01       	movw	r22, r24
    5d36:	cd 01       	movw	r24, r26
    5d38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d3c:	dc 01       	movw	r26, r24
    5d3e:	cb 01       	movw	r24, r22
    5d40:	9a a3       	std	Y+34, r25	; 0x22
    5d42:	89 a3       	std	Y+33, r24	; 0x21
    5d44:	0f c0       	rjmp	.+30     	; 0x5d64 <TENANT_vidRoomControl+0x358>
    5d46:	80 e9       	ldi	r24, 0x90	; 144
    5d48:	91 e0       	ldi	r25, 0x01	; 1
    5d4a:	98 a3       	std	Y+32, r25	; 0x20
    5d4c:	8f 8f       	std	Y+31, r24	; 0x1f
    5d4e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5d50:	98 a1       	ldd	r25, Y+32	; 0x20
    5d52:	01 97       	sbiw	r24, 0x01	; 1
    5d54:	f1 f7       	brne	.-4      	; 0x5d52 <TENANT_vidRoomControl+0x346>
    5d56:	98 a3       	std	Y+32, r25	; 0x20
    5d58:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d5a:	89 a1       	ldd	r24, Y+33	; 0x21
    5d5c:	9a a1       	ldd	r25, Y+34	; 0x22
    5d5e:	01 97       	sbiw	r24, 0x01	; 1
    5d60:	9a a3       	std	Y+34, r25	; 0x22
    5d62:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d64:	89 a1       	ldd	r24, Y+33	; 0x21
    5d66:	9a a1       	ldd	r25, Y+34	; 0x22
    5d68:	00 97       	sbiw	r24, 0x00	; 0
    5d6a:	69 f7       	brne	.-38     	; 0x5d46 <TENANT_vidRoomControl+0x33a>
    5d6c:	14 c0       	rjmp	.+40     	; 0x5d96 <TENANT_vidRoomControl+0x38a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d6e:	6b a1       	ldd	r22, Y+35	; 0x23
    5d70:	7c a1       	ldd	r23, Y+36	; 0x24
    5d72:	8d a1       	ldd	r24, Y+37	; 0x25
    5d74:	9e a1       	ldd	r25, Y+38	; 0x26
    5d76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d7a:	dc 01       	movw	r26, r24
    5d7c:	cb 01       	movw	r24, r22
    5d7e:	9a a3       	std	Y+34, r25	; 0x22
    5d80:	89 a3       	std	Y+33, r24	; 0x21
    5d82:	89 a1       	ldd	r24, Y+33	; 0x21
    5d84:	9a a1       	ldd	r25, Y+34	; 0x22
    5d86:	9e 8f       	std	Y+30, r25	; 0x1e
    5d88:	8d 8f       	std	Y+29, r24	; 0x1d
    5d8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5d8c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5d8e:	01 97       	sbiw	r24, 0x01	; 1
    5d90:	f1 f7       	brne	.-4      	; 0x5d8e <TENANT_vidRoomControl+0x382>
    5d92:	9e 8f       	std	Y+30, r25	; 0x1e
    5d94:	8d 8f       	std	Y+29, r24	; 0x1d
	} else { /*.....*/ }
	_delay_ms(100);
	/* list the option available to the user and interact with keypad */
	LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
    5d96:	81 e0       	ldi	r24, 0x01	; 1
    5d98:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_enuSendInstruction>
	LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN0);
    5d9c:	81 e0       	ldi	r24, 0x01	; 1
    5d9e:	60 e0       	ldi	r22, 0x00	; 0
    5da0:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
	LCD_enuSendString("1:DOOR   2:LIGHT");
    5da4:	88 ec       	ldi	r24, 0xC8	; 200
    5da6:	92 e0       	ldi	r25, 0x02	; 2
    5da8:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
	LCD_enuGoTo(LCD_u8_ROW0, LCD_u8_COLUMN10);
    5dac:	80 e0       	ldi	r24, 0x00	; 0
    5dae:	6a e0       	ldi	r22, 0x0A	; 10
    5db0:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuGoTo>
	LCD_enuSendString("0:BACK");
    5db4:	89 ed       	ldi	r24, 0xD9	; 217
    5db6:	92 e0       	ldi	r25, 0x02	; 2
    5db8:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_enuSendString>
	Local_u8keyPressed = WAITING_PRESS_KEY;
    5dbc:	fe 01       	movw	r30, r28
    5dbe:	e8 5b       	subi	r30, 0xB8	; 184
    5dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    5dc2:	8f ef       	ldi	r24, 0xFF	; 255
    5dc4:	80 83       	st	Z, r24
    5dc6:	14 c1       	rjmp	.+552    	; 0x5ff0 <TENANT_vidRoomControl+0x5e4>
	while(Local_u8keyPressed == WAITING_PRESS_KEY){
		KEYPAD_vidGetPressedKey(&Local_u8keyPressed);
    5dc8:	ce 01       	movw	r24, r28
    5dca:	88 5b       	subi	r24, 0xB8	; 184
    5dcc:	9f 4f       	sbci	r25, 0xFF	; 255
    5dce:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <KEYPAD_vidGetPressedKey>
		switch(Local_u8keyPressed){
    5dd2:	fe 01       	movw	r30, r28
    5dd4:	e8 5b       	subi	r30, 0xB8	; 184
    5dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    5dd8:	80 81       	ld	r24, Z
    5dda:	28 2f       	mov	r18, r24
    5ddc:	30 e0       	ldi	r19, 0x00	; 0
    5dde:	2b 96       	adiw	r28, 0x0b	; 11
    5de0:	3f af       	std	Y+63, r19	; 0x3f
    5de2:	2e af       	std	Y+62, r18	; 0x3e
    5de4:	2b 97       	sbiw	r28, 0x0b	; 11
    5de6:	2b 96       	adiw	r28, 0x0b	; 11
    5de8:	8e ad       	ldd	r24, Y+62	; 0x3e
    5dea:	9f ad       	ldd	r25, Y+63	; 0x3f
    5dec:	2b 97       	sbiw	r28, 0x0b	; 11
    5dee:	81 33       	cpi	r24, 0x31	; 49
    5df0:	91 05       	cpc	r25, r1
    5df2:	49 f0       	breq	.+18     	; 0x5e06 <TENANT_vidRoomControl+0x3fa>
    5df4:	2b 96       	adiw	r28, 0x0b	; 11
    5df6:	ee ad       	ldd	r30, Y+62	; 0x3e
    5df8:	ff ad       	ldd	r31, Y+63	; 0x3f
    5dfa:	2b 97       	sbiw	r28, 0x0b	; 11
    5dfc:	e2 33       	cpi	r30, 0x32	; 50
    5dfe:	f1 05       	cpc	r31, r1
    5e00:	09 f4       	brne	.+2      	; 0x5e04 <TENANT_vidRoomControl+0x3f8>
    5e02:	79 c0       	rjmp	.+242    	; 0x5ef6 <TENANT_vidRoomControl+0x4ea>
    5e04:	f0 c0       	rjmp	.+480    	; 0x5fe6 <TENANT_vidRoomControl+0x5da>
			case ROOM_DOOR:
				SPI_vidTransceive(TENANT_DOOR_SWITCH_REQUEST);
    5e06:	8f e2       	ldi	r24, 0x2F	; 47
    5e08:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_vidTransceive>
    5e0c:	80 e0       	ldi	r24, 0x00	; 0
    5e0e:	90 e0       	ldi	r25, 0x00	; 0
    5e10:	a8 e4       	ldi	r26, 0x48	; 72
    5e12:	b2 e4       	ldi	r27, 0x42	; 66
    5e14:	89 8f       	std	Y+25, r24	; 0x19
    5e16:	9a 8f       	std	Y+26, r25	; 0x1a
    5e18:	ab 8f       	std	Y+27, r26	; 0x1b
    5e1a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e1c:	69 8d       	ldd	r22, Y+25	; 0x19
    5e1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5e20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5e22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5e24:	20 e0       	ldi	r18, 0x00	; 0
    5e26:	30 e0       	ldi	r19, 0x00	; 0
    5e28:	4a e7       	ldi	r20, 0x7A	; 122
    5e2a:	55 e4       	ldi	r21, 0x45	; 69
    5e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e30:	dc 01       	movw	r26, r24
    5e32:	cb 01       	movw	r24, r22
    5e34:	8d 8b       	std	Y+21, r24	; 0x15
    5e36:	9e 8b       	std	Y+22, r25	; 0x16
    5e38:	af 8b       	std	Y+23, r26	; 0x17
    5e3a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5e3c:	6d 89       	ldd	r22, Y+21	; 0x15
    5e3e:	7e 89       	ldd	r23, Y+22	; 0x16
    5e40:	8f 89       	ldd	r24, Y+23	; 0x17
    5e42:	98 8d       	ldd	r25, Y+24	; 0x18
    5e44:	20 e0       	ldi	r18, 0x00	; 0
    5e46:	30 e0       	ldi	r19, 0x00	; 0
    5e48:	40 e8       	ldi	r20, 0x80	; 128
    5e4a:	5f e3       	ldi	r21, 0x3F	; 63
    5e4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5e50:	88 23       	and	r24, r24
    5e52:	2c f4       	brge	.+10     	; 0x5e5e <TENANT_vidRoomControl+0x452>
		__ticks = 1;
    5e54:	81 e0       	ldi	r24, 0x01	; 1
    5e56:	90 e0       	ldi	r25, 0x00	; 0
    5e58:	9c 8b       	std	Y+20, r25	; 0x14
    5e5a:	8b 8b       	std	Y+19, r24	; 0x13
    5e5c:	3f c0       	rjmp	.+126    	; 0x5edc <TENANT_vidRoomControl+0x4d0>
	else if (__tmp > 65535)
    5e5e:	6d 89       	ldd	r22, Y+21	; 0x15
    5e60:	7e 89       	ldd	r23, Y+22	; 0x16
    5e62:	8f 89       	ldd	r24, Y+23	; 0x17
    5e64:	98 8d       	ldd	r25, Y+24	; 0x18
    5e66:	20 e0       	ldi	r18, 0x00	; 0
    5e68:	3f ef       	ldi	r19, 0xFF	; 255
    5e6a:	4f e7       	ldi	r20, 0x7F	; 127
    5e6c:	57 e4       	ldi	r21, 0x47	; 71
    5e6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5e72:	18 16       	cp	r1, r24
    5e74:	4c f5       	brge	.+82     	; 0x5ec8 <TENANT_vidRoomControl+0x4bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e76:	69 8d       	ldd	r22, Y+25	; 0x19
    5e78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5e7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5e7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5e7e:	20 e0       	ldi	r18, 0x00	; 0
    5e80:	30 e0       	ldi	r19, 0x00	; 0
    5e82:	40 e2       	ldi	r20, 0x20	; 32
    5e84:	51 e4       	ldi	r21, 0x41	; 65
    5e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e8a:	dc 01       	movw	r26, r24
    5e8c:	cb 01       	movw	r24, r22
    5e8e:	bc 01       	movw	r22, r24
    5e90:	cd 01       	movw	r24, r26
    5e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e96:	dc 01       	movw	r26, r24
    5e98:	cb 01       	movw	r24, r22
    5e9a:	9c 8b       	std	Y+20, r25	; 0x14
    5e9c:	8b 8b       	std	Y+19, r24	; 0x13
    5e9e:	0f c0       	rjmp	.+30     	; 0x5ebe <TENANT_vidRoomControl+0x4b2>
    5ea0:	80 e9       	ldi	r24, 0x90	; 144
    5ea2:	91 e0       	ldi	r25, 0x01	; 1
    5ea4:	9a 8b       	std	Y+18, r25	; 0x12
    5ea6:	89 8b       	std	Y+17, r24	; 0x11
    5ea8:	89 89       	ldd	r24, Y+17	; 0x11
    5eaa:	9a 89       	ldd	r25, Y+18	; 0x12
    5eac:	01 97       	sbiw	r24, 0x01	; 1
    5eae:	f1 f7       	brne	.-4      	; 0x5eac <TENANT_vidRoomControl+0x4a0>
    5eb0:	9a 8b       	std	Y+18, r25	; 0x12
    5eb2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5eb4:	8b 89       	ldd	r24, Y+19	; 0x13
    5eb6:	9c 89       	ldd	r25, Y+20	; 0x14
    5eb8:	01 97       	sbiw	r24, 0x01	; 1
    5eba:	9c 8b       	std	Y+20, r25	; 0x14
    5ebc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ebe:	8b 89       	ldd	r24, Y+19	; 0x13
    5ec0:	9c 89       	ldd	r25, Y+20	; 0x14
    5ec2:	00 97       	sbiw	r24, 0x00	; 0
    5ec4:	69 f7       	brne	.-38     	; 0x5ea0 <TENANT_vidRoomControl+0x494>
    5ec6:	14 c0       	rjmp	.+40     	; 0x5ef0 <TENANT_vidRoomControl+0x4e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ec8:	6d 89       	ldd	r22, Y+21	; 0x15
    5eca:	7e 89       	ldd	r23, Y+22	; 0x16
    5ecc:	8f 89       	ldd	r24, Y+23	; 0x17
    5ece:	98 8d       	ldd	r25, Y+24	; 0x18
    5ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ed4:	dc 01       	movw	r26, r24
    5ed6:	cb 01       	movw	r24, r22
    5ed8:	9c 8b       	std	Y+20, r25	; 0x14
    5eda:	8b 8b       	std	Y+19, r24	; 0x13
    5edc:	8b 89       	ldd	r24, Y+19	; 0x13
    5ede:	9c 89       	ldd	r25, Y+20	; 0x14
    5ee0:	98 8b       	std	Y+16, r25	; 0x10
    5ee2:	8f 87       	std	Y+15, r24	; 0x0f
    5ee4:	8f 85       	ldd	r24, Y+15	; 0x0f
    5ee6:	98 89       	ldd	r25, Y+16	; 0x10
    5ee8:	01 97       	sbiw	r24, 0x01	; 1
    5eea:	f1 f7       	brne	.-4      	; 0x5ee8 <TENANT_vidRoomControl+0x4dc>
    5eec:	98 8b       	std	Y+16, r25	; 0x10
    5eee:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(50);
				OWNER_vidMasterRoom();
    5ef0:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <OWNER_vidMasterRoom>
    5ef4:	7d c0       	rjmp	.+250    	; 0x5ff0 <TENANT_vidRoomControl+0x5e4>
				break;
			case ROOM_LIGHT:
				SPI_vidTransceive(TENANT_LIGHT_SWITCH_REQUEST);
    5ef6:	8f e3       	ldi	r24, 0x3F	; 63
    5ef8:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_vidTransceive>
    5efc:	80 e0       	ldi	r24, 0x00	; 0
    5efe:	90 e0       	ldi	r25, 0x00	; 0
    5f00:	a8 e4       	ldi	r26, 0x48	; 72
    5f02:	b2 e4       	ldi	r27, 0x42	; 66
    5f04:	8b 87       	std	Y+11, r24	; 0x0b
    5f06:	9c 87       	std	Y+12, r25	; 0x0c
    5f08:	ad 87       	std	Y+13, r26	; 0x0d
    5f0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    5f0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5f10:	8d 85       	ldd	r24, Y+13	; 0x0d
    5f12:	9e 85       	ldd	r25, Y+14	; 0x0e
    5f14:	20 e0       	ldi	r18, 0x00	; 0
    5f16:	30 e0       	ldi	r19, 0x00	; 0
    5f18:	4a e7       	ldi	r20, 0x7A	; 122
    5f1a:	55 e4       	ldi	r21, 0x45	; 69
    5f1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f20:	dc 01       	movw	r26, r24
    5f22:	cb 01       	movw	r24, r22
    5f24:	8f 83       	std	Y+7, r24	; 0x07
    5f26:	98 87       	std	Y+8, r25	; 0x08
    5f28:	a9 87       	std	Y+9, r26	; 0x09
    5f2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5f2c:	6f 81       	ldd	r22, Y+7	; 0x07
    5f2e:	78 85       	ldd	r23, Y+8	; 0x08
    5f30:	89 85       	ldd	r24, Y+9	; 0x09
    5f32:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f34:	20 e0       	ldi	r18, 0x00	; 0
    5f36:	30 e0       	ldi	r19, 0x00	; 0
    5f38:	40 e8       	ldi	r20, 0x80	; 128
    5f3a:	5f e3       	ldi	r21, 0x3F	; 63
    5f3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5f40:	88 23       	and	r24, r24
    5f42:	2c f4       	brge	.+10     	; 0x5f4e <TENANT_vidRoomControl+0x542>
		__ticks = 1;
    5f44:	81 e0       	ldi	r24, 0x01	; 1
    5f46:	90 e0       	ldi	r25, 0x00	; 0
    5f48:	9e 83       	std	Y+6, r25	; 0x06
    5f4a:	8d 83       	std	Y+5, r24	; 0x05
    5f4c:	3f c0       	rjmp	.+126    	; 0x5fcc <TENANT_vidRoomControl+0x5c0>
	else if (__tmp > 65535)
    5f4e:	6f 81       	ldd	r22, Y+7	; 0x07
    5f50:	78 85       	ldd	r23, Y+8	; 0x08
    5f52:	89 85       	ldd	r24, Y+9	; 0x09
    5f54:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f56:	20 e0       	ldi	r18, 0x00	; 0
    5f58:	3f ef       	ldi	r19, 0xFF	; 255
    5f5a:	4f e7       	ldi	r20, 0x7F	; 127
    5f5c:	57 e4       	ldi	r21, 0x47	; 71
    5f5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5f62:	18 16       	cp	r1, r24
    5f64:	4c f5       	brge	.+82     	; 0x5fb8 <TENANT_vidRoomControl+0x5ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f66:	6b 85       	ldd	r22, Y+11	; 0x0b
    5f68:	7c 85       	ldd	r23, Y+12	; 0x0c
    5f6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    5f6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    5f6e:	20 e0       	ldi	r18, 0x00	; 0
    5f70:	30 e0       	ldi	r19, 0x00	; 0
    5f72:	40 e2       	ldi	r20, 0x20	; 32
    5f74:	51 e4       	ldi	r21, 0x41	; 65
    5f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f7a:	dc 01       	movw	r26, r24
    5f7c:	cb 01       	movw	r24, r22
    5f7e:	bc 01       	movw	r22, r24
    5f80:	cd 01       	movw	r24, r26
    5f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f86:	dc 01       	movw	r26, r24
    5f88:	cb 01       	movw	r24, r22
    5f8a:	9e 83       	std	Y+6, r25	; 0x06
    5f8c:	8d 83       	std	Y+5, r24	; 0x05
    5f8e:	0f c0       	rjmp	.+30     	; 0x5fae <TENANT_vidRoomControl+0x5a2>
    5f90:	80 e9       	ldi	r24, 0x90	; 144
    5f92:	91 e0       	ldi	r25, 0x01	; 1
    5f94:	9c 83       	std	Y+4, r25	; 0x04
    5f96:	8b 83       	std	Y+3, r24	; 0x03
    5f98:	8b 81       	ldd	r24, Y+3	; 0x03
    5f9a:	9c 81       	ldd	r25, Y+4	; 0x04
    5f9c:	01 97       	sbiw	r24, 0x01	; 1
    5f9e:	f1 f7       	brne	.-4      	; 0x5f9c <TENANT_vidRoomControl+0x590>
    5fa0:	9c 83       	std	Y+4, r25	; 0x04
    5fa2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5fa4:	8d 81       	ldd	r24, Y+5	; 0x05
    5fa6:	9e 81       	ldd	r25, Y+6	; 0x06
    5fa8:	01 97       	sbiw	r24, 0x01	; 1
    5faa:	9e 83       	std	Y+6, r25	; 0x06
    5fac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5fae:	8d 81       	ldd	r24, Y+5	; 0x05
    5fb0:	9e 81       	ldd	r25, Y+6	; 0x06
    5fb2:	00 97       	sbiw	r24, 0x00	; 0
    5fb4:	69 f7       	brne	.-38     	; 0x5f90 <TENANT_vidRoomControl+0x584>
    5fb6:	14 c0       	rjmp	.+40     	; 0x5fe0 <TENANT_vidRoomControl+0x5d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5fb8:	6f 81       	ldd	r22, Y+7	; 0x07
    5fba:	78 85       	ldd	r23, Y+8	; 0x08
    5fbc:	89 85       	ldd	r24, Y+9	; 0x09
    5fbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    5fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5fc4:	dc 01       	movw	r26, r24
    5fc6:	cb 01       	movw	r24, r22
    5fc8:	9e 83       	std	Y+6, r25	; 0x06
    5fca:	8d 83       	std	Y+5, r24	; 0x05
    5fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    5fce:	9e 81       	ldd	r25, Y+6	; 0x06
    5fd0:	9a 83       	std	Y+2, r25	; 0x02
    5fd2:	89 83       	std	Y+1, r24	; 0x01
    5fd4:	89 81       	ldd	r24, Y+1	; 0x01
    5fd6:	9a 81       	ldd	r25, Y+2	; 0x02
    5fd8:	01 97       	sbiw	r24, 0x01	; 1
    5fda:	f1 f7       	brne	.-4      	; 0x5fd8 <TENANT_vidRoomControl+0x5cc>
    5fdc:	9a 83       	std	Y+2, r25	; 0x02
    5fde:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(50);
				OWNER_vidMasterRoom();
    5fe0:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <OWNER_vidMasterRoom>
    5fe4:	05 c0       	rjmp	.+10     	; 0x5ff0 <TENANT_vidRoomControl+0x5e4>
				break;
			default:
				Local_u8keyPressed = WAITING_PRESS_KEY;
    5fe6:	fe 01       	movw	r30, r28
    5fe8:	e8 5b       	subi	r30, 0xB8	; 184
    5fea:	ff 4f       	sbci	r31, 0xFF	; 255
    5fec:	8f ef       	ldi	r24, 0xFF	; 255
    5fee:	80 83       	st	Z, r24
	LCD_enuGoTo(LCD_u8_ROW1, LCD_u8_COLUMN0);
	LCD_enuSendString("1:DOOR   2:LIGHT");
	LCD_enuGoTo(LCD_u8_ROW0, LCD_u8_COLUMN10);
	LCD_enuSendString("0:BACK");
	Local_u8keyPressed = WAITING_PRESS_KEY;
	while(Local_u8keyPressed == WAITING_PRESS_KEY){
    5ff0:	fe 01       	movw	r30, r28
    5ff2:	e8 5b       	subi	r30, 0xB8	; 184
    5ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    5ff6:	80 81       	ld	r24, Z
    5ff8:	8f 3f       	cpi	r24, 0xFF	; 255
    5ffa:	09 f4       	brne	.+2      	; 0x5ffe <TENANT_vidRoomControl+0x5f2>
    5ffc:	e5 ce       	rjmp	.-566    	; 0x5dc8 <TENANT_vidRoomControl+0x3bc>
				break;
		}//end of #switch case
	}// end of #while loop


}
    5ffe:	c6 5b       	subi	r28, 0xB6	; 182
    6000:	df 4f       	sbci	r29, 0xFF	; 255
    6002:	0f b6       	in	r0, 0x3f	; 63
    6004:	f8 94       	cli
    6006:	de bf       	out	0x3e, r29	; 62
    6008:	0f be       	out	0x3f, r0	; 63
    600a:	cd bf       	out	0x3d, r28	; 61
    600c:	cf 91       	pop	r28
    600e:	df 91       	pop	r29
    6010:	1f 91       	pop	r17
    6012:	0f 91       	pop	r16
    6014:	08 95       	ret

00006016 <__udivmodqi4>:
    6016:	99 1b       	sub	r25, r25
    6018:	79 e0       	ldi	r23, 0x09	; 9
    601a:	04 c0       	rjmp	.+8      	; 0x6024 <__udivmodqi4_ep>

0000601c <__udivmodqi4_loop>:
    601c:	99 1f       	adc	r25, r25
    601e:	96 17       	cp	r25, r22
    6020:	08 f0       	brcs	.+2      	; 0x6024 <__udivmodqi4_ep>
    6022:	96 1b       	sub	r25, r22

00006024 <__udivmodqi4_ep>:
    6024:	88 1f       	adc	r24, r24
    6026:	7a 95       	dec	r23
    6028:	c9 f7       	brne	.-14     	; 0x601c <__udivmodqi4_loop>
    602a:	80 95       	com	r24
    602c:	08 95       	ret

0000602e <__prologue_saves__>:
    602e:	2f 92       	push	r2
    6030:	3f 92       	push	r3
    6032:	4f 92       	push	r4
    6034:	5f 92       	push	r5
    6036:	6f 92       	push	r6
    6038:	7f 92       	push	r7
    603a:	8f 92       	push	r8
    603c:	9f 92       	push	r9
    603e:	af 92       	push	r10
    6040:	bf 92       	push	r11
    6042:	cf 92       	push	r12
    6044:	df 92       	push	r13
    6046:	ef 92       	push	r14
    6048:	ff 92       	push	r15
    604a:	0f 93       	push	r16
    604c:	1f 93       	push	r17
    604e:	cf 93       	push	r28
    6050:	df 93       	push	r29
    6052:	cd b7       	in	r28, 0x3d	; 61
    6054:	de b7       	in	r29, 0x3e	; 62
    6056:	ca 1b       	sub	r28, r26
    6058:	db 0b       	sbc	r29, r27
    605a:	0f b6       	in	r0, 0x3f	; 63
    605c:	f8 94       	cli
    605e:	de bf       	out	0x3e, r29	; 62
    6060:	0f be       	out	0x3f, r0	; 63
    6062:	cd bf       	out	0x3d, r28	; 61
    6064:	09 94       	ijmp

00006066 <__epilogue_restores__>:
    6066:	2a 88       	ldd	r2, Y+18	; 0x12
    6068:	39 88       	ldd	r3, Y+17	; 0x11
    606a:	48 88       	ldd	r4, Y+16	; 0x10
    606c:	5f 84       	ldd	r5, Y+15	; 0x0f
    606e:	6e 84       	ldd	r6, Y+14	; 0x0e
    6070:	7d 84       	ldd	r7, Y+13	; 0x0d
    6072:	8c 84       	ldd	r8, Y+12	; 0x0c
    6074:	9b 84       	ldd	r9, Y+11	; 0x0b
    6076:	aa 84       	ldd	r10, Y+10	; 0x0a
    6078:	b9 84       	ldd	r11, Y+9	; 0x09
    607a:	c8 84       	ldd	r12, Y+8	; 0x08
    607c:	df 80       	ldd	r13, Y+7	; 0x07
    607e:	ee 80       	ldd	r14, Y+6	; 0x06
    6080:	fd 80       	ldd	r15, Y+5	; 0x05
    6082:	0c 81       	ldd	r16, Y+4	; 0x04
    6084:	1b 81       	ldd	r17, Y+3	; 0x03
    6086:	aa 81       	ldd	r26, Y+2	; 0x02
    6088:	b9 81       	ldd	r27, Y+1	; 0x01
    608a:	ce 0f       	add	r28, r30
    608c:	d1 1d       	adc	r29, r1
    608e:	0f b6       	in	r0, 0x3f	; 63
    6090:	f8 94       	cli
    6092:	de bf       	out	0x3e, r29	; 62
    6094:	0f be       	out	0x3f, r0	; 63
    6096:	cd bf       	out	0x3d, r28	; 61
    6098:	ed 01       	movw	r28, r26
    609a:	08 95       	ret

0000609c <__eewr_byte_m32>:
    609c:	26 2f       	mov	r18, r22

0000609e <__eewr_r18_m32>:
    609e:	e1 99       	sbic	0x1c, 1	; 28
    60a0:	fe cf       	rjmp	.-4      	; 0x609e <__eewr_r18_m32>
    60a2:	9f bb       	out	0x1f, r25	; 31
    60a4:	8e bb       	out	0x1e, r24	; 30
    60a6:	2d bb       	out	0x1d, r18	; 29
    60a8:	0f b6       	in	r0, 0x3f	; 63
    60aa:	f8 94       	cli
    60ac:	e2 9a       	sbi	0x1c, 2	; 28
    60ae:	e1 9a       	sbi	0x1c, 1	; 28
    60b0:	0f be       	out	0x3f, r0	; 63
    60b2:	01 96       	adiw	r24, 0x01	; 1
    60b4:	08 95       	ret

000060b6 <_exit>:
    60b6:	f8 94       	cli

000060b8 <__stop_program>:
    60b8:	ff cf       	rjmp	.-2      	; 0x60b8 <__stop_program>
