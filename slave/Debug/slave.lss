
slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003848  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000126  00800060  00003848  000038dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800186  00800186  00003a02  2**0
                  ALLOC
  3 .stab         00004860  00000000  00000000  00003a04  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002490  00000000  00000000  00008264  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000a6f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000020e  00000000  00000000  0000a8b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268b  00000000  00000000  0000aac2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014d1  00000000  00000000  0000d14d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012ab  00000000  00000000  0000e61e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000f8cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fb  00000000  00000000  0000faac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a0a  00000000  00000000  0000fda7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000107b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 ff 19 	jmp	0x33fe	; 0x33fe <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 b5 09 	jmp	0x136a	; 0x136a <__vector_4>
      14:	0c 94 e8 09 	jmp	0x13d0	; 0x13d0 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 1b 0a 	jmp	0x1436	; 0x1436 <__vector_7>
      20:	0c 94 4e 0a 	jmp	0x149c	; 0x149c <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 81 0a 	jmp	0x1502	; 0x1502 <__vector_10>
      2c:	0c 94 b4 0a 	jmp	0x1568	; 0x1568 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 39       	cpi	r26, 0x9F	; 159
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <main>
      8a:	0c 94 22 1c 	jmp	0x3844	; 0x3844 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 eb 1b 	jmp	0x37d6	; 0x37d6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 07 1c 	jmp	0x380e	; 0x380e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f7 1b 	jmp	0x37ee	; 0x37ee <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f7 1b 	jmp	0x37ee	; 0x37ee <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 eb 1b 	jmp	0x37d6	; 0x37d6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 07 1c 	jmp	0x380e	; 0x380e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f3 1b 	jmp	0x37e6	; 0x37e6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 0f 1c 	jmp	0x381e	; 0x381e <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f7 1b 	jmp	0x37ee	; 0x37ee <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f7 1b 	jmp	0x37ee	; 0x37ee <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f7 1b 	jmp	0x37ee	; 0x37ee <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__gesf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__gesf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__gesf2+0x58>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f7 1b 	jmp	0x37ee	; 0x37ee <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 f4 1b 	jmp	0x37e8	; 0x37e8 <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 37 05 	call	0xa6e	; 0xa6e <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 10 1c 	jmp	0x3820	; 0x3820 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 fb 1b 	jmp	0x37f6	; 0x37f6 <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 17 1c 	jmp	0x382e	; 0x382e <__epilogue_restores__+0x20>

00000a6e <__clzsi2>:
     a6e:	ef 92       	push	r14
     a70:	ff 92       	push	r15
     a72:	0f 93       	push	r16
     a74:	1f 93       	push	r17
     a76:	7b 01       	movw	r14, r22
     a78:	8c 01       	movw	r16, r24
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	e8 16       	cp	r14, r24
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	f8 06       	cpc	r15, r24
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	08 07       	cpc	r16, r24
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	18 07       	cpc	r17, r24
     a8a:	88 f4       	brcc	.+34     	; 0xaae <__clzsi2+0x40>
     a8c:	8f ef       	ldi	r24, 0xFF	; 255
     a8e:	e8 16       	cp	r14, r24
     a90:	f1 04       	cpc	r15, r1
     a92:	01 05       	cpc	r16, r1
     a94:	11 05       	cpc	r17, r1
     a96:	31 f0       	breq	.+12     	; 0xaa4 <__clzsi2+0x36>
     a98:	28 f0       	brcs	.+10     	; 0xaa4 <__clzsi2+0x36>
     a9a:	88 e0       	ldi	r24, 0x08	; 8
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	a0 e0       	ldi	r26, 0x00	; 0
     aa0:	b0 e0       	ldi	r27, 0x00	; 0
     aa2:	17 c0       	rjmp	.+46     	; 0xad2 <__clzsi2+0x64>
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	a0 e0       	ldi	r26, 0x00	; 0
     aaa:	b0 e0       	ldi	r27, 0x00	; 0
     aac:	12 c0       	rjmp	.+36     	; 0xad2 <__clzsi2+0x64>
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	e8 16       	cp	r14, r24
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	f8 06       	cpc	r15, r24
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	08 07       	cpc	r16, r24
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	18 07       	cpc	r17, r24
     abe:	28 f0       	brcs	.+10     	; 0xaca <__clzsi2+0x5c>
     ac0:	88 e1       	ldi	r24, 0x18	; 24
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	a0 e0       	ldi	r26, 0x00	; 0
     ac6:	b0 e0       	ldi	r27, 0x00	; 0
     ac8:	04 c0       	rjmp	.+8      	; 0xad2 <__clzsi2+0x64>
     aca:	80 e1       	ldi	r24, 0x10	; 16
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	a0 e0       	ldi	r26, 0x00	; 0
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	20 e2       	ldi	r18, 0x20	; 32
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	40 e0       	ldi	r20, 0x00	; 0
     ad8:	50 e0       	ldi	r21, 0x00	; 0
     ada:	28 1b       	sub	r18, r24
     adc:	39 0b       	sbc	r19, r25
     ade:	4a 0b       	sbc	r20, r26
     ae0:	5b 0b       	sbc	r21, r27
     ae2:	04 c0       	rjmp	.+8      	; 0xaec <__clzsi2+0x7e>
     ae4:	16 95       	lsr	r17
     ae6:	07 95       	ror	r16
     ae8:	f7 94       	ror	r15
     aea:	e7 94       	ror	r14
     aec:	8a 95       	dec	r24
     aee:	d2 f7       	brpl	.-12     	; 0xae4 <__clzsi2+0x76>
     af0:	f7 01       	movw	r30, r14
     af2:	e8 59       	subi	r30, 0x98	; 152
     af4:	ff 4f       	sbci	r31, 0xFF	; 255
     af6:	80 81       	ld	r24, Z
     af8:	28 1b       	sub	r18, r24
     afa:	31 09       	sbc	r19, r1
     afc:	41 09       	sbc	r20, r1
     afe:	51 09       	sbc	r21, r1
     b00:	c9 01       	movw	r24, r18
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	ff 90       	pop	r15
     b08:	ef 90       	pop	r14
     b0a:	08 95       	ret

00000b0c <__pack_f>:
     b0c:	df 92       	push	r13
     b0e:	ef 92       	push	r14
     b10:	ff 92       	push	r15
     b12:	0f 93       	push	r16
     b14:	1f 93       	push	r17
     b16:	fc 01       	movw	r30, r24
     b18:	e4 80       	ldd	r14, Z+4	; 0x04
     b1a:	f5 80       	ldd	r15, Z+5	; 0x05
     b1c:	06 81       	ldd	r16, Z+6	; 0x06
     b1e:	17 81       	ldd	r17, Z+7	; 0x07
     b20:	d1 80       	ldd	r13, Z+1	; 0x01
     b22:	80 81       	ld	r24, Z
     b24:	82 30       	cpi	r24, 0x02	; 2
     b26:	48 f4       	brcc	.+18     	; 0xb3a <__pack_f+0x2e>
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	a0 e1       	ldi	r26, 0x10	; 16
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	e8 2a       	or	r14, r24
     b32:	f9 2a       	or	r15, r25
     b34:	0a 2b       	or	r16, r26
     b36:	1b 2b       	or	r17, r27
     b38:	a5 c0       	rjmp	.+330    	; 0xc84 <__pack_f+0x178>
     b3a:	84 30       	cpi	r24, 0x04	; 4
     b3c:	09 f4       	brne	.+2      	; 0xb40 <__pack_f+0x34>
     b3e:	9f c0       	rjmp	.+318    	; 0xc7e <__pack_f+0x172>
     b40:	82 30       	cpi	r24, 0x02	; 2
     b42:	21 f4       	brne	.+8      	; 0xb4c <__pack_f+0x40>
     b44:	ee 24       	eor	r14, r14
     b46:	ff 24       	eor	r15, r15
     b48:	87 01       	movw	r16, r14
     b4a:	05 c0       	rjmp	.+10     	; 0xb56 <__pack_f+0x4a>
     b4c:	e1 14       	cp	r14, r1
     b4e:	f1 04       	cpc	r15, r1
     b50:	01 05       	cpc	r16, r1
     b52:	11 05       	cpc	r17, r1
     b54:	19 f4       	brne	.+6      	; 0xb5c <__pack_f+0x50>
     b56:	e0 e0       	ldi	r30, 0x00	; 0
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	96 c0       	rjmp	.+300    	; 0xc88 <__pack_f+0x17c>
     b5c:	62 81       	ldd	r22, Z+2	; 0x02
     b5e:	73 81       	ldd	r23, Z+3	; 0x03
     b60:	9f ef       	ldi	r25, 0xFF	; 255
     b62:	62 38       	cpi	r22, 0x82	; 130
     b64:	79 07       	cpc	r23, r25
     b66:	0c f0       	brlt	.+2      	; 0xb6a <__pack_f+0x5e>
     b68:	5b c0       	rjmp	.+182    	; 0xc20 <__pack_f+0x114>
     b6a:	22 e8       	ldi	r18, 0x82	; 130
     b6c:	3f ef       	ldi	r19, 0xFF	; 255
     b6e:	26 1b       	sub	r18, r22
     b70:	37 0b       	sbc	r19, r23
     b72:	2a 31       	cpi	r18, 0x1A	; 26
     b74:	31 05       	cpc	r19, r1
     b76:	2c f0       	brlt	.+10     	; 0xb82 <__pack_f+0x76>
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	40 e0       	ldi	r20, 0x00	; 0
     b7e:	50 e0       	ldi	r21, 0x00	; 0
     b80:	2a c0       	rjmp	.+84     	; 0xbd6 <__pack_f+0xca>
     b82:	b8 01       	movw	r22, r16
     b84:	a7 01       	movw	r20, r14
     b86:	02 2e       	mov	r0, r18
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0x86>
     b8a:	76 95       	lsr	r23
     b8c:	67 95       	ror	r22
     b8e:	57 95       	ror	r21
     b90:	47 95       	ror	r20
     b92:	0a 94       	dec	r0
     b94:	d2 f7       	brpl	.-12     	; 0xb8a <__pack_f+0x7e>
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	04 c0       	rjmp	.+8      	; 0xba8 <__pack_f+0x9c>
     ba0:	88 0f       	add	r24, r24
     ba2:	99 1f       	adc	r25, r25
     ba4:	aa 1f       	adc	r26, r26
     ba6:	bb 1f       	adc	r27, r27
     ba8:	2a 95       	dec	r18
     baa:	d2 f7       	brpl	.-12     	; 0xba0 <__pack_f+0x94>
     bac:	01 97       	sbiw	r24, 0x01	; 1
     bae:	a1 09       	sbc	r26, r1
     bb0:	b1 09       	sbc	r27, r1
     bb2:	8e 21       	and	r24, r14
     bb4:	9f 21       	and	r25, r15
     bb6:	a0 23       	and	r26, r16
     bb8:	b1 23       	and	r27, r17
     bba:	00 97       	sbiw	r24, 0x00	; 0
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	21 f0       	breq	.+8      	; 0xbca <__pack_f+0xbe>
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	a0 e0       	ldi	r26, 0x00	; 0
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	9a 01       	movw	r18, r20
     bcc:	ab 01       	movw	r20, r22
     bce:	28 2b       	or	r18, r24
     bd0:	39 2b       	or	r19, r25
     bd2:	4a 2b       	or	r20, r26
     bd4:	5b 2b       	or	r21, r27
     bd6:	da 01       	movw	r26, r20
     bd8:	c9 01       	movw	r24, r18
     bda:	8f 77       	andi	r24, 0x7F	; 127
     bdc:	90 70       	andi	r25, 0x00	; 0
     bde:	a0 70       	andi	r26, 0x00	; 0
     be0:	b0 70       	andi	r27, 0x00	; 0
     be2:	80 34       	cpi	r24, 0x40	; 64
     be4:	91 05       	cpc	r25, r1
     be6:	a1 05       	cpc	r26, r1
     be8:	b1 05       	cpc	r27, r1
     bea:	39 f4       	brne	.+14     	; 0xbfa <__pack_f+0xee>
     bec:	27 ff       	sbrs	r18, 7
     bee:	09 c0       	rjmp	.+18     	; 0xc02 <__pack_f+0xf6>
     bf0:	20 5c       	subi	r18, 0xC0	; 192
     bf2:	3f 4f       	sbci	r19, 0xFF	; 255
     bf4:	4f 4f       	sbci	r20, 0xFF	; 255
     bf6:	5f 4f       	sbci	r21, 0xFF	; 255
     bf8:	04 c0       	rjmp	.+8      	; 0xc02 <__pack_f+0xf6>
     bfa:	21 5c       	subi	r18, 0xC1	; 193
     bfc:	3f 4f       	sbci	r19, 0xFF	; 255
     bfe:	4f 4f       	sbci	r20, 0xFF	; 255
     c00:	5f 4f       	sbci	r21, 0xFF	; 255
     c02:	e0 e0       	ldi	r30, 0x00	; 0
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	20 30       	cpi	r18, 0x00	; 0
     c08:	a0 e0       	ldi	r26, 0x00	; 0
     c0a:	3a 07       	cpc	r19, r26
     c0c:	a0 e0       	ldi	r26, 0x00	; 0
     c0e:	4a 07       	cpc	r20, r26
     c10:	a0 e4       	ldi	r26, 0x40	; 64
     c12:	5a 07       	cpc	r21, r26
     c14:	10 f0       	brcs	.+4      	; 0xc1a <__pack_f+0x10e>
     c16:	e1 e0       	ldi	r30, 0x01	; 1
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	79 01       	movw	r14, r18
     c1c:	8a 01       	movw	r16, r20
     c1e:	27 c0       	rjmp	.+78     	; 0xc6e <__pack_f+0x162>
     c20:	60 38       	cpi	r22, 0x80	; 128
     c22:	71 05       	cpc	r23, r1
     c24:	64 f5       	brge	.+88     	; 0xc7e <__pack_f+0x172>
     c26:	fb 01       	movw	r30, r22
     c28:	e1 58       	subi	r30, 0x81	; 129
     c2a:	ff 4f       	sbci	r31, 0xFF	; 255
     c2c:	d8 01       	movw	r26, r16
     c2e:	c7 01       	movw	r24, r14
     c30:	8f 77       	andi	r24, 0x7F	; 127
     c32:	90 70       	andi	r25, 0x00	; 0
     c34:	a0 70       	andi	r26, 0x00	; 0
     c36:	b0 70       	andi	r27, 0x00	; 0
     c38:	80 34       	cpi	r24, 0x40	; 64
     c3a:	91 05       	cpc	r25, r1
     c3c:	a1 05       	cpc	r26, r1
     c3e:	b1 05       	cpc	r27, r1
     c40:	39 f4       	brne	.+14     	; 0xc50 <__pack_f+0x144>
     c42:	e7 fe       	sbrs	r14, 7
     c44:	0d c0       	rjmp	.+26     	; 0xc60 <__pack_f+0x154>
     c46:	80 e4       	ldi	r24, 0x40	; 64
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	a0 e0       	ldi	r26, 0x00	; 0
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	04 c0       	rjmp	.+8      	; 0xc58 <__pack_f+0x14c>
     c50:	8f e3       	ldi	r24, 0x3F	; 63
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	a0 e0       	ldi	r26, 0x00	; 0
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e8 0e       	add	r14, r24
     c5a:	f9 1e       	adc	r15, r25
     c5c:	0a 1f       	adc	r16, r26
     c5e:	1b 1f       	adc	r17, r27
     c60:	17 ff       	sbrs	r17, 7
     c62:	05 c0       	rjmp	.+10     	; 0xc6e <__pack_f+0x162>
     c64:	16 95       	lsr	r17
     c66:	07 95       	ror	r16
     c68:	f7 94       	ror	r15
     c6a:	e7 94       	ror	r14
     c6c:	31 96       	adiw	r30, 0x01	; 1
     c6e:	87 e0       	ldi	r24, 0x07	; 7
     c70:	16 95       	lsr	r17
     c72:	07 95       	ror	r16
     c74:	f7 94       	ror	r15
     c76:	e7 94       	ror	r14
     c78:	8a 95       	dec	r24
     c7a:	d1 f7       	brne	.-12     	; 0xc70 <__pack_f+0x164>
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__pack_f+0x17c>
     c7e:	ee 24       	eor	r14, r14
     c80:	ff 24       	eor	r15, r15
     c82:	87 01       	movw	r16, r14
     c84:	ef ef       	ldi	r30, 0xFF	; 255
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	6e 2f       	mov	r22, r30
     c8a:	67 95       	ror	r22
     c8c:	66 27       	eor	r22, r22
     c8e:	67 95       	ror	r22
     c90:	90 2f       	mov	r25, r16
     c92:	9f 77       	andi	r25, 0x7F	; 127
     c94:	d7 94       	ror	r13
     c96:	dd 24       	eor	r13, r13
     c98:	d7 94       	ror	r13
     c9a:	8e 2f       	mov	r24, r30
     c9c:	86 95       	lsr	r24
     c9e:	49 2f       	mov	r20, r25
     ca0:	46 2b       	or	r20, r22
     ca2:	58 2f       	mov	r21, r24
     ca4:	5d 29       	or	r21, r13
     ca6:	b7 01       	movw	r22, r14
     ca8:	ca 01       	movw	r24, r20
     caa:	1f 91       	pop	r17
     cac:	0f 91       	pop	r16
     cae:	ff 90       	pop	r15
     cb0:	ef 90       	pop	r14
     cb2:	df 90       	pop	r13
     cb4:	08 95       	ret

00000cb6 <__unpack_f>:
     cb6:	fc 01       	movw	r30, r24
     cb8:	db 01       	movw	r26, r22
     cba:	40 81       	ld	r20, Z
     cbc:	51 81       	ldd	r21, Z+1	; 0x01
     cbe:	22 81       	ldd	r18, Z+2	; 0x02
     cc0:	62 2f       	mov	r22, r18
     cc2:	6f 77       	andi	r22, 0x7F	; 127
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	22 1f       	adc	r18, r18
     cc8:	22 27       	eor	r18, r18
     cca:	22 1f       	adc	r18, r18
     ccc:	93 81       	ldd	r25, Z+3	; 0x03
     cce:	89 2f       	mov	r24, r25
     cd0:	88 0f       	add	r24, r24
     cd2:	82 2b       	or	r24, r18
     cd4:	28 2f       	mov	r18, r24
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	99 1f       	adc	r25, r25
     cda:	99 27       	eor	r25, r25
     cdc:	99 1f       	adc	r25, r25
     cde:	11 96       	adiw	r26, 0x01	; 1
     ce0:	9c 93       	st	X, r25
     ce2:	11 97       	sbiw	r26, 0x01	; 1
     ce4:	21 15       	cp	r18, r1
     ce6:	31 05       	cpc	r19, r1
     ce8:	a9 f5       	brne	.+106    	; 0xd54 <__unpack_f+0x9e>
     cea:	41 15       	cp	r20, r1
     cec:	51 05       	cpc	r21, r1
     cee:	61 05       	cpc	r22, r1
     cf0:	71 05       	cpc	r23, r1
     cf2:	11 f4       	brne	.+4      	; 0xcf8 <__unpack_f+0x42>
     cf4:	82 e0       	ldi	r24, 0x02	; 2
     cf6:	37 c0       	rjmp	.+110    	; 0xd66 <__unpack_f+0xb0>
     cf8:	82 e8       	ldi	r24, 0x82	; 130
     cfa:	9f ef       	ldi	r25, 0xFF	; 255
     cfc:	13 96       	adiw	r26, 0x03	; 3
     cfe:	9c 93       	st	X, r25
     d00:	8e 93       	st	-X, r24
     d02:	12 97       	sbiw	r26, 0x02	; 2
     d04:	9a 01       	movw	r18, r20
     d06:	ab 01       	movw	r20, r22
     d08:	67 e0       	ldi	r22, 0x07	; 7
     d0a:	22 0f       	add	r18, r18
     d0c:	33 1f       	adc	r19, r19
     d0e:	44 1f       	adc	r20, r20
     d10:	55 1f       	adc	r21, r21
     d12:	6a 95       	dec	r22
     d14:	d1 f7       	brne	.-12     	; 0xd0a <__unpack_f+0x54>
     d16:	83 e0       	ldi	r24, 0x03	; 3
     d18:	8c 93       	st	X, r24
     d1a:	0d c0       	rjmp	.+26     	; 0xd36 <__unpack_f+0x80>
     d1c:	22 0f       	add	r18, r18
     d1e:	33 1f       	adc	r19, r19
     d20:	44 1f       	adc	r20, r20
     d22:	55 1f       	adc	r21, r21
     d24:	12 96       	adiw	r26, 0x02	; 2
     d26:	8d 91       	ld	r24, X+
     d28:	9c 91       	ld	r25, X
     d2a:	13 97       	sbiw	r26, 0x03	; 3
     d2c:	01 97       	sbiw	r24, 0x01	; 1
     d2e:	13 96       	adiw	r26, 0x03	; 3
     d30:	9c 93       	st	X, r25
     d32:	8e 93       	st	-X, r24
     d34:	12 97       	sbiw	r26, 0x02	; 2
     d36:	20 30       	cpi	r18, 0x00	; 0
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	38 07       	cpc	r19, r24
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	48 07       	cpc	r20, r24
     d40:	80 e4       	ldi	r24, 0x40	; 64
     d42:	58 07       	cpc	r21, r24
     d44:	58 f3       	brcs	.-42     	; 0xd1c <__unpack_f+0x66>
     d46:	14 96       	adiw	r26, 0x04	; 4
     d48:	2d 93       	st	X+, r18
     d4a:	3d 93       	st	X+, r19
     d4c:	4d 93       	st	X+, r20
     d4e:	5c 93       	st	X, r21
     d50:	17 97       	sbiw	r26, 0x07	; 7
     d52:	08 95       	ret
     d54:	2f 3f       	cpi	r18, 0xFF	; 255
     d56:	31 05       	cpc	r19, r1
     d58:	79 f4       	brne	.+30     	; 0xd78 <__unpack_f+0xc2>
     d5a:	41 15       	cp	r20, r1
     d5c:	51 05       	cpc	r21, r1
     d5e:	61 05       	cpc	r22, r1
     d60:	71 05       	cpc	r23, r1
     d62:	19 f4       	brne	.+6      	; 0xd6a <__unpack_f+0xb4>
     d64:	84 e0       	ldi	r24, 0x04	; 4
     d66:	8c 93       	st	X, r24
     d68:	08 95       	ret
     d6a:	64 ff       	sbrs	r22, 4
     d6c:	03 c0       	rjmp	.+6      	; 0xd74 <__unpack_f+0xbe>
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	8c 93       	st	X, r24
     d72:	12 c0       	rjmp	.+36     	; 0xd98 <__unpack_f+0xe2>
     d74:	1c 92       	st	X, r1
     d76:	10 c0       	rjmp	.+32     	; 0xd98 <__unpack_f+0xe2>
     d78:	2f 57       	subi	r18, 0x7F	; 127
     d7a:	30 40       	sbci	r19, 0x00	; 0
     d7c:	13 96       	adiw	r26, 0x03	; 3
     d7e:	3c 93       	st	X, r19
     d80:	2e 93       	st	-X, r18
     d82:	12 97       	sbiw	r26, 0x02	; 2
     d84:	83 e0       	ldi	r24, 0x03	; 3
     d86:	8c 93       	st	X, r24
     d88:	87 e0       	ldi	r24, 0x07	; 7
     d8a:	44 0f       	add	r20, r20
     d8c:	55 1f       	adc	r21, r21
     d8e:	66 1f       	adc	r22, r22
     d90:	77 1f       	adc	r23, r23
     d92:	8a 95       	dec	r24
     d94:	d1 f7       	brne	.-12     	; 0xd8a <__unpack_f+0xd4>
     d96:	70 64       	ori	r23, 0x40	; 64
     d98:	14 96       	adiw	r26, 0x04	; 4
     d9a:	4d 93       	st	X+, r20
     d9c:	5d 93       	st	X+, r21
     d9e:	6d 93       	st	X+, r22
     da0:	7c 93       	st	X, r23
     da2:	17 97       	sbiw	r26, 0x07	; 7
     da4:	08 95       	ret

00000da6 <__fpcmp_parts_f>:
     da6:	1f 93       	push	r17
     da8:	dc 01       	movw	r26, r24
     daa:	fb 01       	movw	r30, r22
     dac:	9c 91       	ld	r25, X
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	08 f4       	brcc	.+2      	; 0xdb4 <__fpcmp_parts_f+0xe>
     db2:	47 c0       	rjmp	.+142    	; 0xe42 <__fpcmp_parts_f+0x9c>
     db4:	80 81       	ld	r24, Z
     db6:	82 30       	cpi	r24, 0x02	; 2
     db8:	08 f4       	brcc	.+2      	; 0xdbc <__fpcmp_parts_f+0x16>
     dba:	43 c0       	rjmp	.+134    	; 0xe42 <__fpcmp_parts_f+0x9c>
     dbc:	94 30       	cpi	r25, 0x04	; 4
     dbe:	51 f4       	brne	.+20     	; 0xdd4 <__fpcmp_parts_f+0x2e>
     dc0:	11 96       	adiw	r26, 0x01	; 1
     dc2:	1c 91       	ld	r17, X
     dc4:	84 30       	cpi	r24, 0x04	; 4
     dc6:	99 f5       	brne	.+102    	; 0xe2e <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	68 2f       	mov	r22, r24
     dcc:	70 e0       	ldi	r23, 0x00	; 0
     dce:	61 1b       	sub	r22, r17
     dd0:	71 09       	sbc	r23, r1
     dd2:	3f c0       	rjmp	.+126    	; 0xe52 <__fpcmp_parts_f+0xac>
     dd4:	84 30       	cpi	r24, 0x04	; 4
     dd6:	21 f0       	breq	.+8      	; 0xde0 <__fpcmp_parts_f+0x3a>
     dd8:	92 30       	cpi	r25, 0x02	; 2
     dda:	31 f4       	brne	.+12     	; 0xde8 <__fpcmp_parts_f+0x42>
     ddc:	82 30       	cpi	r24, 0x02	; 2
     dde:	b9 f1       	breq	.+110    	; 0xe4e <__fpcmp_parts_f+0xa8>
     de0:	81 81       	ldd	r24, Z+1	; 0x01
     de2:	88 23       	and	r24, r24
     de4:	89 f1       	breq	.+98     	; 0xe48 <__fpcmp_parts_f+0xa2>
     de6:	2d c0       	rjmp	.+90     	; 0xe42 <__fpcmp_parts_f+0x9c>
     de8:	11 96       	adiw	r26, 0x01	; 1
     dea:	1c 91       	ld	r17, X
     dec:	11 97       	sbiw	r26, 0x01	; 1
     dee:	82 30       	cpi	r24, 0x02	; 2
     df0:	f1 f0       	breq	.+60     	; 0xe2e <__fpcmp_parts_f+0x88>
     df2:	81 81       	ldd	r24, Z+1	; 0x01
     df4:	18 17       	cp	r17, r24
     df6:	d9 f4       	brne	.+54     	; 0xe2e <__fpcmp_parts_f+0x88>
     df8:	12 96       	adiw	r26, 0x02	; 2
     dfa:	2d 91       	ld	r18, X+
     dfc:	3c 91       	ld	r19, X
     dfe:	13 97       	sbiw	r26, 0x03	; 3
     e00:	82 81       	ldd	r24, Z+2	; 0x02
     e02:	93 81       	ldd	r25, Z+3	; 0x03
     e04:	82 17       	cp	r24, r18
     e06:	93 07       	cpc	r25, r19
     e08:	94 f0       	brlt	.+36     	; 0xe2e <__fpcmp_parts_f+0x88>
     e0a:	28 17       	cp	r18, r24
     e0c:	39 07       	cpc	r19, r25
     e0e:	bc f0       	brlt	.+46     	; 0xe3e <__fpcmp_parts_f+0x98>
     e10:	14 96       	adiw	r26, 0x04	; 4
     e12:	8d 91       	ld	r24, X+
     e14:	9d 91       	ld	r25, X+
     e16:	0d 90       	ld	r0, X+
     e18:	bc 91       	ld	r27, X
     e1a:	a0 2d       	mov	r26, r0
     e1c:	24 81       	ldd	r18, Z+4	; 0x04
     e1e:	35 81       	ldd	r19, Z+5	; 0x05
     e20:	46 81       	ldd	r20, Z+6	; 0x06
     e22:	57 81       	ldd	r21, Z+7	; 0x07
     e24:	28 17       	cp	r18, r24
     e26:	39 07       	cpc	r19, r25
     e28:	4a 07       	cpc	r20, r26
     e2a:	5b 07       	cpc	r21, r27
     e2c:	18 f4       	brcc	.+6      	; 0xe34 <__fpcmp_parts_f+0x8e>
     e2e:	11 23       	and	r17, r17
     e30:	41 f0       	breq	.+16     	; 0xe42 <__fpcmp_parts_f+0x9c>
     e32:	0a c0       	rjmp	.+20     	; 0xe48 <__fpcmp_parts_f+0xa2>
     e34:	82 17       	cp	r24, r18
     e36:	93 07       	cpc	r25, r19
     e38:	a4 07       	cpc	r26, r20
     e3a:	b5 07       	cpc	r27, r21
     e3c:	40 f4       	brcc	.+16     	; 0xe4e <__fpcmp_parts_f+0xa8>
     e3e:	11 23       	and	r17, r17
     e40:	19 f0       	breq	.+6      	; 0xe48 <__fpcmp_parts_f+0xa2>
     e42:	61 e0       	ldi	r22, 0x01	; 1
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	05 c0       	rjmp	.+10     	; 0xe52 <__fpcmp_parts_f+0xac>
     e48:	6f ef       	ldi	r22, 0xFF	; 255
     e4a:	7f ef       	ldi	r23, 0xFF	; 255
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <__fpcmp_parts_f+0xac>
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	cb 01       	movw	r24, r22
     e54:	1f 91       	pop	r17
     e56:	08 95       	ret

00000e58 <SPI_vidSPIInitMaster>:
#include "../DIO/DIO_int.h"
#include <avr/io.h>


void SPI_vidSPIInitMaster (void)
{
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
	DDRB |= (SPI_u8_MOSI)|(SPI_u8_SS)|(SPI_u8_SCK);
     e60:	a7 e3       	ldi	r26, 0x37	; 55
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e7 e3       	ldi	r30, 0x37	; 55
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	80 6b       	ori	r24, 0xB0	; 176
     e6c:	8c 93       	st	X, r24
	/*set node as master*/
	SPI_u8_SPCR_REG = SPI_u8_ASSIGN_NODE_AS_MASTER;
     e6e:	ed e2       	ldi	r30, 0x2D	; 45
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 e1       	ldi	r24, 0x10	; 16
     e74:	80 83       	st	Z, r24
	/*set the leading edge according to confg. file*/
//	SPI_u8_SPCR_REG |= SPI_u8_CLOCK_POLARITY;
	/*set the phase at the leading edge according to config. file*/
//	SPI_u8_SPCR_REG |= SPI_u8_CLOCK_PHASE;
	/*set clock prescaler according to config. file*/
	SPI_u8_SPCR_REG |= SPI_u8_CLOCK_RATE;
     e76:	ad e2       	ldi	r26, 0x2D	; 45
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	ed e2       	ldi	r30, 0x2D	; 45
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	81 60       	ori	r24, 0x01	; 1
     e82:	8c 93       	st	X, r24
	/*enable SPI*/
	SPI_u8_SPCR_REG |= SPI_u8_ENABLE;
     e84:	ad e2       	ldi	r26, 0x2D	; 45
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	ed e2       	ldi	r30, 0x2D	; 45
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	80 64       	ori	r24, 0x40	; 64
     e90:	8c 93       	st	X, r24
}
     e92:	cf 91       	pop	r28
     e94:	df 91       	pop	r29
     e96:	08 95       	ret

00000e98 <SPI_vidSPIInitSlave>:

void SPI_vidSPIInitSlave (void)
{
     e98:	df 93       	push	r29
     e9a:	cf 93       	push	r28
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
	SPI_u8_DDRB_REG |= (SPI_u8_MISO);
     ea0:	a7 e3       	ldi	r26, 0x37	; 55
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e7 e3       	ldi	r30, 0x37	; 55
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	80 64       	ori	r24, 0x40	; 64
     eac:	8c 93       	st	X, r24
	/*set node as master*/
	SPI_u8_SPCR_REG = SPI_u8_ASSIGN_NODE_AS_SLAVE;
     eae:	ed e2       	ldi	r30, 0x2D	; 45
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	10 82       	st	Z, r1
	/*set the leading edge according to confg. file*/
//	SPI_u8_SPCR_REG |= SPI_u8_CLOCK_POLARITY;
	/*set the phase at the leading edge according to config. file*/
//	SPI_u8_SPCR_REG |= SPI_u8_CLOCK_PHASE;
	/*enable SPI*/
	SPI_u8_SPCR_REG |= SPI_u8_ENABLE;
     eb4:	ad e2       	ldi	r26, 0x2D	; 45
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	ed e2       	ldi	r30, 0x2D	; 45
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	80 64       	ori	r24, 0x40	; 64
     ec0:	8c 93       	st	X, r24
}
     ec2:	cf 91       	pop	r28
     ec4:	df 91       	pop	r29
     ec6:	08 95       	ret

00000ec8 <SPI_vidTransceive>:


u8 SPI_vidTransceive(u8 Copy_u8Data){
     ec8:	df 93       	push	r29
     eca:	cf 93       	push	r28
     ecc:	00 d0       	rcall	.+0      	; 0xece <SPI_vidTransceive+0x6>
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
     ed2:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8Temp;
	/*set the data in SPDR in order to transmit it*/
	SPI_u8_SPDR_REG = Copy_u8Data;
     ed4:	ef e2       	ldi	r30, 0x2F	; 47
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	8a 81       	ldd	r24, Y+2	; 0x02
     eda:	80 83       	st	Z, r24
	while(!((SPI_u8_SPSR_REG & SPI_u8_INTERRUPT_FLAG) >> SPI_u8_INTERRUPT_FLAG_BIT));
     edc:	ee e2       	ldi	r30, 0x2E	; 46
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	88 1f       	adc	r24, r24
     ee4:	88 27       	eor	r24, r24
     ee6:	88 1f       	adc	r24, r24
     ee8:	88 2f       	mov	r24, r24
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	90 70       	andi	r25, 0x00	; 0
     eee:	00 97       	sbiw	r24, 0x00	; 0
     ef0:	a9 f3       	breq	.-22     	; 0xedc <SPI_vidTransceive+0x14>
	local_u8Temp = SPI_u8_SPSR_REG;
     ef2:	ee e2       	ldi	r30, 0x2E	; 46
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	89 83       	std	Y+1, r24	; 0x01
	return SPI_u8_SPDR_REG;
     efa:	ef e2       	ldi	r30, 0x2F	; 47
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
}
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	cf 91       	pop	r28
     f06:	df 91       	pop	r29
     f08:	08 95       	ret

00000f0a <SPI_vidStopConnection>:


void SPI_vidStopConnection(void){
     f0a:	df 93       	push	r29
     f0c:	cf 93       	push	r28
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
	/*disable SPI*/
	SPI_u8_SPCR_REG &= (SPI_u8_DISABLE);
     f12:	ad e2       	ldi	r26, 0x2D	; 45
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	ed e2       	ldi	r30, 0x2D	; 45
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	8f 7b       	andi	r24, 0xBF	; 191
     f1e:	8c 93       	st	X, r24
}
     f20:	cf 91       	pop	r28
     f22:	df 91       	pop	r29
     f24:	08 95       	ret

00000f26 <PWM_vidInit>:
										10- PWM_u8_WAVE_FORM_PWM_PASE_AND_FREQUENCY_CORRECT_OCR1A_TOP
										11- PWM_u8_WAVE_FORM_PWM_PASE_CORRECT_ICR1_TOP
										12- PWM_u8_WAVE_FORM_PWM_PASE_CORRECT_OCR1A_TOP)
 * Return:	void
 */
void PWM_vidInit(u8 Copy_u8Timer, u8 Copy_u8Mode){
     f26:	df 93       	push	r29
     f28:	cf 93       	push	r28
     f2a:	00 d0       	rcall	.+0      	; 0xf2c <PWM_vidInit+0x6>
     f2c:	00 d0       	rcall	.+0      	; 0xf2e <PWM_vidInit+0x8>
     f2e:	0f 92       	push	r0
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
     f34:	8a 83       	std	Y+2, r24	; 0x02
     f36:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_WGM_BIT = 0;
     f38:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Timer){
     f3a:	8a 81       	ldd	r24, Y+2	; 0x02
     f3c:	28 2f       	mov	r18, r24
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	3d 83       	std	Y+5, r19	; 0x05
     f42:	2c 83       	std	Y+4, r18	; 0x04
     f44:	8c 81       	ldd	r24, Y+4	; 0x04
     f46:	9d 81       	ldd	r25, Y+5	; 0x05
     f48:	81 30       	cpi	r24, 0x01	; 1
     f4a:	91 05       	cpc	r25, r1
     f4c:	91 f0       	breq	.+36     	; 0xf72 <PWM_vidInit+0x4c>
     f4e:	2c 81       	ldd	r18, Y+4	; 0x04
     f50:	3d 81       	ldd	r19, Y+5	; 0x05
     f52:	22 30       	cpi	r18, 0x02	; 2
     f54:	31 05       	cpc	r19, r1
     f56:	d1 f1       	breq	.+116    	; 0xfcc <PWM_vidInit+0xa6>
     f58:	8c 81       	ldd	r24, Y+4	; 0x04
     f5a:	9d 81       	ldd	r25, Y+5	; 0x05
     f5c:	00 97       	sbiw	r24, 0x00	; 0
     f5e:	e9 f5       	brne	.+122    	; 0xfda <PWM_vidInit+0xb4>
		case PWM_u8_TIMER0:
			PWM_u8_TCCR0_REG |= Copy_u8Mode;
     f60:	a3 e5       	ldi	r26, 0x53	; 83
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e3 e5       	ldi	r30, 0x53	; 83
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	90 81       	ld	r25, Z
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	89 2b       	or	r24, r25
     f6e:	8c 93       	st	X, r24
     f70:	34 c0       	rjmp	.+104    	; 0xfda <PWM_vidInit+0xb4>
			break;
		case PWM_u8_TIMER1:
			Local_u8_WGM_BIT = (Copy_u8Mode) & (PWM_u8_WGM10);
     f72:	8b 81       	ldd	r24, Y+3	; 0x03
     f74:	81 70       	andi	r24, 0x01	; 1
     f76:	89 83       	std	Y+1, r24	; 0x01
			PWM_u8_TCCR1A |= Local_u8_WGM_BIT;
     f78:	af e4       	ldi	r26, 0x4F	; 79
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	ef e4       	ldi	r30, 0x4F	; 79
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	90 81       	ld	r25, Z
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	89 2b       	or	r24, r25
     f86:	8c 93       	st	X, r24
			Local_u8_WGM_BIT = (Copy_u8Mode) & (PWM_u8_WGM11);
     f88:	8b 81       	ldd	r24, Y+3	; 0x03
     f8a:	82 70       	andi	r24, 0x02	; 2
     f8c:	89 83       	std	Y+1, r24	; 0x01
			PWM_u8_TCCR1A |= Local_u8_WGM_BIT;
     f8e:	af e4       	ldi	r26, 0x4F	; 79
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	ef e4       	ldi	r30, 0x4F	; 79
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	90 81       	ld	r25, Z
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	89 2b       	or	r24, r25
     f9c:	8c 93       	st	X, r24
			Local_u8_WGM_BIT = (Copy_u8Mode) & (PWM_u8_WGM12);
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	88 70       	andi	r24, 0x08	; 8
     fa2:	89 83       	std	Y+1, r24	; 0x01
			PWM_u8_TCCR1B |= Local_u8_WGM_BIT;
     fa4:	ae e4       	ldi	r26, 0x4E	; 78
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	ee e4       	ldi	r30, 0x4E	; 78
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	90 81       	ld	r25, Z
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	89 2b       	or	r24, r25
     fb2:	8c 93       	st	X, r24
			Local_u8_WGM_BIT = (Copy_u8Mode) & (PWM_u8_WGM13);
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	80 71       	andi	r24, 0x10	; 16
     fb8:	89 83       	std	Y+1, r24	; 0x01
			PWM_u8_TCCR1B |= Local_u8_WGM_BIT;
     fba:	ae e4       	ldi	r26, 0x4E	; 78
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	ee e4       	ldi	r30, 0x4E	; 78
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	90 81       	ld	r25, Z
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	89 2b       	or	r24, r25
     fc8:	8c 93       	st	X, r24
     fca:	07 c0       	rjmp	.+14     	; 0xfda <PWM_vidInit+0xb4>
			break;
		 case PWM_u8_TIMER2:
			 PWM_u8_TCCR2_REG  |=0X48;
     fcc:	a5 e4       	ldi	r26, 0x45	; 69
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e5 e4       	ldi	r30, 0x45	; 69
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	88 64       	ori	r24, 0x48	; 72
     fd8:	8c 93       	st	X, r24
			 break;
	}
}
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	cf 91       	pop	r28
     fe6:	df 91       	pop	r29
     fe8:	08 95       	ret

00000fea <PWM_vidStartTimer1>:
												6- PWM_u8_INVERTING_MODE_OC1B)
 *						Last argument: to choose OC1A or OC1B   options(PWM_u8_OC1A, PWM_u8_OC1B)
 * Return:	void
 */
void PWM_vidStartTimer1(u8 Copy_u8Prescaler, u16 Copy_u16CompareValue, u16 Copy_u16TopValue,
						u8 Copy_u8CompareOutputMode, u8 Copy_u8DesiredPin){
     fea:	0f 93       	push	r16
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
     ff4:	27 97       	sbiw	r28, 0x07	; 7
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	de bf       	out	0x3e, r29	; 62
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	cd bf       	out	0x3d, r28	; 61
    1000:	89 83       	std	Y+1, r24	; 0x01
    1002:	7b 83       	std	Y+3, r23	; 0x03
    1004:	6a 83       	std	Y+2, r22	; 0x02
    1006:	5d 83       	std	Y+5, r21	; 0x05
    1008:	4c 83       	std	Y+4, r20	; 0x04
    100a:	2e 83       	std	Y+6, r18	; 0x06
    100c:	0f 83       	std	Y+7, r16	; 0x07
	// set compare output mode
	PWM_u8_TCCR1A  |= Copy_u8CompareOutputMode;
    100e:	af e4       	ldi	r26, 0x4F	; 79
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	ef e4       	ldi	r30, 0x4F	; 79
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	90 81       	ld	r25, Z
    1018:	8e 81       	ldd	r24, Y+6	; 0x06
    101a:	89 2b       	or	r24, r25
    101c:	8c 93       	st	X, r24
	// check OC used pin and set the compare value in the conceder register
	if(Copy_u8DesiredPin == PWM_u8_OC1A){
    101e:	8f 81       	ldd	r24, Y+7	; 0x07
    1020:	81 30       	cpi	r24, 0x01	; 1
    1022:	71 f4       	brne	.+28     	; 0x1040 <PWM_vidStartTimer1+0x56>
		 PWM_u16_OCR1AL |= Copy_u16CompareValue;
    1024:	aa e4       	ldi	r26, 0x4A	; 74
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	ea e4       	ldi	r30, 0x4A	; 74
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	20 81       	ld	r18, Z
    102e:	31 81       	ldd	r19, Z+1	; 0x01
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	9b 81       	ldd	r25, Y+3	; 0x03
    1034:	82 2b       	or	r24, r18
    1036:	93 2b       	or	r25, r19
    1038:	11 96       	adiw	r26, 0x01	; 1
    103a:	9c 93       	st	X, r25
    103c:	8e 93       	st	-X, r24
    103e:	10 c0       	rjmp	.+32     	; 0x1060 <PWM_vidStartTimer1+0x76>
	} else if (Copy_u8DesiredPin==PWM_u8_OC1B){
    1040:	8f 81       	ldd	r24, Y+7	; 0x07
    1042:	82 30       	cpi	r24, 0x02	; 2
    1044:	69 f4       	brne	.+26     	; 0x1060 <PWM_vidStartTimer1+0x76>
		PWM_u16_OCR1BL |= Copy_u16CompareValue;
    1046:	a8 e4       	ldi	r26, 0x48	; 72
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	e8 e4       	ldi	r30, 0x48	; 72
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	20 81       	ld	r18, Z
    1050:	31 81       	ldd	r19, Z+1	; 0x01
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	9b 81       	ldd	r25, Y+3	; 0x03
    1056:	82 2b       	or	r24, r18
    1058:	93 2b       	or	r25, r19
    105a:	11 96       	adiw	r26, 0x01	; 1
    105c:	9c 93       	st	X, r25
    105e:	8e 93       	st	-X, r24
	} else{ /*.....*/ }
	// top value to set frequency
	PWM_u16_ICR1L  |= Copy_u16TopValue;
    1060:	a6 e4       	ldi	r26, 0x46	; 70
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e6 e4       	ldi	r30, 0x46	; 70
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	20 81       	ld	r18, Z
    106a:	31 81       	ldd	r19, Z+1	; 0x01
    106c:	8c 81       	ldd	r24, Y+4	; 0x04
    106e:	9d 81       	ldd	r25, Y+5	; 0x05
    1070:	82 2b       	or	r24, r18
    1072:	93 2b       	or	r25, r19
    1074:	11 96       	adiw	r26, 0x01	; 1
    1076:	9c 93       	st	X, r25
    1078:	8e 93       	st	-X, r24
	// set prescaler
	PWM_u8_TCCR1B  |=Copy_u8Prescaler;
    107a:	ae e4       	ldi	r26, 0x4E	; 78
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	ee e4       	ldi	r30, 0x4E	; 78
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	90 81       	ld	r25, Z
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	89 2b       	or	r24, r25
    1088:	8c 93       	st	X, r24
}
    108a:	27 96       	adiw	r28, 0x07	; 7
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	de bf       	out	0x3e, r29	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	cd bf       	out	0x3d, r28	; 61
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	0f 91       	pop	r16
    109c:	08 95       	ret

0000109e <PWM_vidStop>:
/* Name: PWM_vidStop
 * Description: stop PWM signal
 * Arguments:            Copy_u8Timer: The desired Timer  options(PWM_u8_TIMER0, PWM_u8_TIMER1, PWM_u8_TIMER2)
 * Return:	void
 */
void PWM_vidStop(u8 Copy_u8Timer){
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	00 d0       	rcall	.+0      	; 0x10a4 <PWM_vidStop+0x6>
    10a4:	0f 92       	push	r0
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
    10aa:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8Timer){
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	3b 83       	std	Y+3, r19	; 0x03
    10b4:	2a 83       	std	Y+2, r18	; 0x02
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	9b 81       	ldd	r25, Y+3	; 0x03
    10ba:	81 30       	cpi	r24, 0x01	; 1
    10bc:	91 05       	cpc	r25, r1
    10be:	01 f1       	breq	.+64     	; 0x1100 <PWM_vidStop+0x62>
    10c0:	2a 81       	ldd	r18, Y+2	; 0x02
    10c2:	3b 81       	ldd	r19, Y+3	; 0x03
    10c4:	22 30       	cpi	r18, 0x02	; 2
    10c6:	31 05       	cpc	r19, r1
    10c8:	89 f1       	breq	.+98     	; 0x112c <PWM_vidStop+0x8e>
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	9b 81       	ldd	r25, Y+3	; 0x03
    10ce:	00 97       	sbiw	r24, 0x00	; 0
    10d0:	09 f0       	breq	.+2      	; 0x10d4 <PWM_vidStop+0x36>
    10d2:	41 c0       	rjmp	.+130    	; 0x1156 <PWM_vidStop+0xb8>
		case PWM_u8_TIMER0:
			(PWM_u8_TCCR0_REG) &= (~PWM_u8_CS0);
    10d4:	a3 e5       	ldi	r26, 0x53	; 83
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e3 e5       	ldi	r30, 0x53	; 83
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	8e 7f       	andi	r24, 0xFE	; 254
    10e0:	8c 93       	st	X, r24
			(PWM_u8_TCCR0_REG) &= (~PWM_u8_CS1);
    10e2:	a3 e5       	ldi	r26, 0x53	; 83
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e3 e5       	ldi	r30, 0x53	; 83
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	8d 7f       	andi	r24, 0xFD	; 253
    10ee:	8c 93       	st	X, r24
			(PWM_u8_TCCR0_REG) &= (~PWM_u8_CS2);
    10f0:	a3 e5       	ldi	r26, 0x53	; 83
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e3 e5       	ldi	r30, 0x53	; 83
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	8b 7f       	andi	r24, 0xFB	; 251
    10fc:	8c 93       	st	X, r24
    10fe:	2b c0       	rjmp	.+86     	; 0x1156 <PWM_vidStop+0xb8>
			break;
		case PWM_u8_TIMER1:
			(PWM_u8_TCCR1B) &= (~PWM_u8_CS0);
    1100:	ae e4       	ldi	r26, 0x4E	; 78
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	ee e4       	ldi	r30, 0x4E	; 78
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	8e 7f       	andi	r24, 0xFE	; 254
    110c:	8c 93       	st	X, r24
			(PWM_u8_TCCR1B) &= (~PWM_u8_CS1);
    110e:	ae e4       	ldi	r26, 0x4E	; 78
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	ee e4       	ldi	r30, 0x4E	; 78
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	8d 7f       	andi	r24, 0xFD	; 253
    111a:	8c 93       	st	X, r24
			(PWM_u8_TCCR1B) &= (~PWM_u8_CS2);
    111c:	ae e4       	ldi	r26, 0x4E	; 78
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	ee e4       	ldi	r30, 0x4E	; 78
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	8b 7f       	andi	r24, 0xFB	; 251
    1128:	8c 93       	st	X, r24
    112a:	15 c0       	rjmp	.+42     	; 0x1156 <PWM_vidStop+0xb8>
			break;
		case PWM_u8_TIMER2:
			(PWM_u8_TCCR2_REG) &= (~PWM_u8_CS0);
    112c:	a5 e4       	ldi	r26, 0x45	; 69
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e5 e4       	ldi	r30, 0x45	; 69
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	8e 7f       	andi	r24, 0xFE	; 254
    1138:	8c 93       	st	X, r24
			(PWM_u8_TCCR2_REG) &= (~PWM_u8_CS1);
    113a:	a5 e4       	ldi	r26, 0x45	; 69
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e5 e4       	ldi	r30, 0x45	; 69
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	8d 7f       	andi	r24, 0xFD	; 253
    1146:	8c 93       	st	X, r24
			(PWM_u8_TCCR2_REG) &= (~PWM_u8_CS2);
    1148:	a5 e4       	ldi	r26, 0x45	; 69
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e5 e4       	ldi	r30, 0x45	; 69
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	8b 7f       	andi	r24, 0xFB	; 251
    1154:	8c 93       	st	X, r24
			break;
	}
}
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	08 95       	ret

00001162 <GPT_VoidConfigure>:
func_ptr GPT_TIMER0_COMP;
func_ptr GPT_TIMER0_OVF;
}TIMER;
u8 GPT_u8NumberOfOVF = 0;
void GPT_VoidConfigure(u8 Copy_u8timer)
{
    1162:	df 93       	push	r29
    1164:	cf 93       	push	r28
    1166:	0f 92       	push	r0
    1168:	cd b7       	in	r28, 0x3d	; 61
    116a:	de b7       	in	r29, 0x3e	; 62
    116c:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8timer)
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	88 2f       	mov	r24, r24
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	8a 30       	cpi	r24, 0x0A	; 10
    1176:	91 05       	cpc	r25, r1
    1178:	69 f4       	brne	.+26     	; 0x1194 <GPT_VoidConfigure+0x32>
	{
	case  GPT_u8_TIMER0 :
		TCCR0_REG|=GPT_u8_64_PRESCALING;
    117a:	a3 e5       	ldi	r26, 0x53	; 83
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	e3 e5       	ldi	r30, 0x53	; 83
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	83 60       	ori	r24, 0x03	; 3
    1186:	8c 93       	st	X, r24
		TCCR0_REG|=GPT_u8_NORMAL_OPERATION_TIMER0;
    1188:	a3 e5       	ldi	r26, 0x53	; 83
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e3 e5       	ldi	r30, 0x53	; 83
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	8c 93       	st	X, r24
			break;


	}

}
    1194:	0f 90       	pop	r0
    1196:	cf 91       	pop	r28
    1198:	df 91       	pop	r29
    119a:	08 95       	ret

0000119c <GPT_VoidStartTimer>:

void GPT_VoidStartTimer(u8 Copy_u8timer)
{
    119c:	df 93       	push	r29
    119e:	cf 93       	push	r28
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <GPT_VoidStartTimer+0x6>
    11a2:	0f 92       	push	r0
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
    11a8:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8timer)
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	3b 83       	std	Y+3, r19	; 0x03
    11b2:	2a 83       	std	Y+2, r18	; 0x02
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	9b 81       	ldd	r25, Y+3	; 0x03
    11b8:	8a 30       	cpi	r24, 0x0A	; 10
    11ba:	91 05       	cpc	r25, r1
    11bc:	81 f0       	breq	.+32     	; 0x11de <GPT_VoidStartTimer+0x42>
    11be:	2a 81       	ldd	r18, Y+2	; 0x02
    11c0:	3b 81       	ldd	r19, Y+3	; 0x03
    11c2:	2a 30       	cpi	r18, 0x0A	; 10
    11c4:	31 05       	cpc	r19, r1
    11c6:	14 f1       	brlt	.+68     	; 0x120c <GPT_VoidStartTimer+0x70>
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	9b 81       	ldd	r25, Y+3	; 0x03
    11cc:	8b 30       	cpi	r24, 0x0B	; 11
    11ce:	91 05       	cpc	r25, r1
    11d0:	71 f0       	breq	.+28     	; 0x11ee <GPT_VoidStartTimer+0x52>
    11d2:	2a 81       	ldd	r18, Y+2	; 0x02
    11d4:	3b 81       	ldd	r19, Y+3	; 0x03
    11d6:	2c 30       	cpi	r18, 0x0C	; 12
    11d8:	31 05       	cpc	r19, r1
    11da:	89 f0       	breq	.+34     	; 0x11fe <GPT_VoidStartTimer+0x62>
    11dc:	17 c0       	rjmp	.+46     	; 0x120c <GPT_VoidStartTimer+0x70>
	{
	case  GPT_u8_TIMER0 :

		TIMSK_REG|=GPT_u8_TOIE0_PIN ;
    11de:	a9 e5       	ldi	r26, 0x59	; 89
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e9 e5       	ldi	r30, 0x59	; 89
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	81 60       	ori	r24, 0x01	; 1
    11ea:	8c 93       	st	X, r24
    11ec:	0f c0       	rjmp	.+30     	; 0x120c <GPT_VoidStartTimer+0x70>
		//TIMSK_REG|=GPT_u8_OCIE0_PIN;
		//GPT_u8NumberOfOVF =Copy_u8OVF;
		break;
	case  GPT_u8_TIMER1 :
		TIMSK_REG|=GPT_u8_TOIE0_PIN ;
    11ee:	a9 e5       	ldi	r26, 0x59	; 89
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	e9 e5       	ldi	r30, 0x59	; 89
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	81 60       	ori	r24, 0x01	; 1
    11fa:	8c 93       	st	X, r24
    11fc:	07 c0       	rjmp	.+14     	; 0x120c <GPT_VoidStartTimer+0x70>
			break;
	case  GPT_u8_TIMER2 :
		TIMSK_REG|=GPT_u8_TOIE0_PIN ;
    11fe:	a9 e5       	ldi	r26, 0x59	; 89
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e9 e5       	ldi	r30, 0x59	; 89
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	81 60       	ori	r24, 0x01	; 1
    120a:	8c 93       	st	X, r24
			break;


	}

}
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	cf 91       	pop	r28
    1214:	df 91       	pop	r29
    1216:	08 95       	ret

00001218 <GPT_VoidEnableCBF>:

void GPT_VoidEnableCBF(u8 Copy_u8Timer,u8 Copy_u8TimerMode,func_ptr Add_pCBF )
{
    1218:	df 93       	push	r29
    121a:	cf 93       	push	r28
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	2c 97       	sbiw	r28, 0x0c	; 12
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	f8 94       	cli
    1226:	de bf       	out	0x3e, r29	; 62
    1228:	0f be       	out	0x3f, r0	; 63
    122a:	cd bf       	out	0x3d, r28	; 61
    122c:	89 83       	std	Y+1, r24	; 0x01
    122e:	6a 83       	std	Y+2, r22	; 0x02
    1230:	5c 83       	std	Y+4, r21	; 0x04
    1232:	4b 83       	std	Y+3, r20	; 0x03
	//implementation
switch(Copy_u8Timer)
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	3c 87       	std	Y+12, r19	; 0x0c
    123c:	2b 87       	std	Y+11, r18	; 0x0b
    123e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1240:	9c 85       	ldd	r25, Y+12	; 0x0c
    1242:	8a 30       	cpi	r24, 0x0A	; 10
    1244:	91 05       	cpc	r25, r1
    1246:	91 f0       	breq	.+36     	; 0x126c <GPT_VoidEnableCBF+0x54>
    1248:	2b 85       	ldd	r18, Y+11	; 0x0b
    124a:	3c 85       	ldd	r19, Y+12	; 0x0c
    124c:	2a 30       	cpi	r18, 0x0A	; 10
    124e:	31 05       	cpc	r19, r1
    1250:	0c f4       	brge	.+2      	; 0x1254 <GPT_VoidEnableCBF+0x3c>
    1252:	82 c0       	rjmp	.+260    	; 0x1358 <GPT_VoidEnableCBF+0x140>
    1254:	8b 85       	ldd	r24, Y+11	; 0x0b
    1256:	9c 85       	ldd	r25, Y+12	; 0x0c
    1258:	8b 30       	cpi	r24, 0x0B	; 11
    125a:	91 05       	cpc	r25, r1
    125c:	29 f1       	breq	.+74     	; 0x12a8 <GPT_VoidEnableCBF+0x90>
    125e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1260:	3c 85       	ldd	r19, Y+12	; 0x0c
    1262:	2c 30       	cpi	r18, 0x0C	; 12
    1264:	31 05       	cpc	r19, r1
    1266:	09 f4       	brne	.+2      	; 0x126a <GPT_VoidEnableCBF+0x52>
    1268:	5b c0       	rjmp	.+182    	; 0x1320 <GPT_VoidEnableCBF+0x108>
    126a:	76 c0       	rjmp	.+236    	; 0x1358 <GPT_VoidEnableCBF+0x140>
{
case  GPT_u8_TIMER0  :
	switch(Copy_u8TimerMode)
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	3a 87       	std	Y+10, r19	; 0x0a
    1274:	29 87       	std	Y+9, r18	; 0x09
    1276:	89 85       	ldd	r24, Y+9	; 0x09
    1278:	9a 85       	ldd	r25, Y+10	; 0x0a
    127a:	87 30       	cpi	r24, 0x07	; 7
    127c:	91 05       	cpc	r25, r1
    127e:	31 f0       	breq	.+12     	; 0x128c <GPT_VoidEnableCBF+0x74>
    1280:	29 85       	ldd	r18, Y+9	; 0x09
    1282:	3a 85       	ldd	r19, Y+10	; 0x0a
    1284:	28 30       	cpi	r18, 0x08	; 8
    1286:	31 05       	cpc	r19, r1
    1288:	41 f0       	breq	.+16     	; 0x129a <GPT_VoidEnableCBF+0x82>
    128a:	66 c0       	rjmp	.+204    	; 0x1358 <GPT_VoidEnableCBF+0x140>
	{
	case  GPT_u8_TIMER0_COMP  :
		TIMER.GPT_TIMER0_COMP=Add_pCBF;
    128c:	8b 81       	ldd	r24, Y+3	; 0x03
    128e:	9c 81       	ldd	r25, Y+4	; 0x04
    1290:	90 93 95 01 	sts	0x0195, r25
    1294:	80 93 94 01 	sts	0x0194, r24
    1298:	5f c0       	rjmp	.+190    	; 0x1358 <GPT_VoidEnableCBF+0x140>
		break;
	case  GPT_u8_TIMER0_OVF  :
		TIMER.GPT_TIMER0_OVF=Add_pCBF;
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	9c 81       	ldd	r25, Y+4	; 0x04
    129e:	90 93 97 01 	sts	0x0197, r25
    12a2:	80 93 96 01 	sts	0x0196, r24
    12a6:	58 c0       	rjmp	.+176    	; 0x1358 <GPT_VoidEnableCBF+0x140>
	break;



case  GPT_u8_TIMER1  :
	switch(Copy_u8TimerMode)
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	38 87       	std	Y+8, r19	; 0x08
    12b0:	2f 83       	std	Y+7, r18	; 0x07
    12b2:	8f 81       	ldd	r24, Y+7	; 0x07
    12b4:	98 85       	ldd	r25, Y+8	; 0x08
    12b6:	84 30       	cpi	r24, 0x04	; 4
    12b8:	91 05       	cpc	r25, r1
    12ba:	e9 f0       	breq	.+58     	; 0x12f6 <GPT_VoidEnableCBF+0xde>
    12bc:	2f 81       	ldd	r18, Y+7	; 0x07
    12be:	38 85       	ldd	r19, Y+8	; 0x08
    12c0:	25 30       	cpi	r18, 0x05	; 5
    12c2:	31 05       	cpc	r19, r1
    12c4:	34 f4       	brge	.+12     	; 0x12d2 <GPT_VoidEnableCBF+0xba>
    12c6:	8f 81       	ldd	r24, Y+7	; 0x07
    12c8:	98 85       	ldd	r25, Y+8	; 0x08
    12ca:	83 30       	cpi	r24, 0x03	; 3
    12cc:	91 05       	cpc	r25, r1
    12ce:	61 f0       	breq	.+24     	; 0x12e8 <GPT_VoidEnableCBF+0xd0>
    12d0:	43 c0       	rjmp	.+134    	; 0x1358 <GPT_VoidEnableCBF+0x140>
    12d2:	2f 81       	ldd	r18, Y+7	; 0x07
    12d4:	38 85       	ldd	r19, Y+8	; 0x08
    12d6:	25 30       	cpi	r18, 0x05	; 5
    12d8:	31 05       	cpc	r19, r1
    12da:	a1 f0       	breq	.+40     	; 0x1304 <GPT_VoidEnableCBF+0xec>
    12dc:	8f 81       	ldd	r24, Y+7	; 0x07
    12de:	98 85       	ldd	r25, Y+8	; 0x08
    12e0:	86 30       	cpi	r24, 0x06	; 6
    12e2:	91 05       	cpc	r25, r1
    12e4:	b1 f0       	breq	.+44     	; 0x1312 <GPT_VoidEnableCBF+0xfa>
    12e6:	38 c0       	rjmp	.+112    	; 0x1358 <GPT_VoidEnableCBF+0x140>
		{
		case  GPT_u8_TIMER1_CAPT  :
			TIMER.GPT_TIMER1_CAPT=Add_pCBF;
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	9c 81       	ldd	r25, Y+4	; 0x04
    12ec:	90 93 8d 01 	sts	0x018D, r25
    12f0:	80 93 8c 01 	sts	0x018C, r24
    12f4:	31 c0       	rjmp	.+98     	; 0x1358 <GPT_VoidEnableCBF+0x140>
			break;
		case  GPT_u8_TIMER1_COMPA  :
			TIMER.GPT_TIMER1_COMPA=Add_pCBF;
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	9c 81       	ldd	r25, Y+4	; 0x04
    12fa:	90 93 8f 01 	sts	0x018F, r25
    12fe:	80 93 8e 01 	sts	0x018E, r24
    1302:	2a c0       	rjmp	.+84     	; 0x1358 <GPT_VoidEnableCBF+0x140>
			break;
		case  GPT_u8_TIMER1_COMPB  :
			TIMER.GPT_TIMER1_COMPB=Add_pCBF;
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	9c 81       	ldd	r25, Y+4	; 0x04
    1308:	90 93 91 01 	sts	0x0191, r25
    130c:	80 93 90 01 	sts	0x0190, r24
    1310:	23 c0       	rjmp	.+70     	; 0x1358 <GPT_VoidEnableCBF+0x140>
			break;
		case  GPT_u8_TIMER1_OVF  :
			TIMER.GPT_TIMER0_OVF=Add_pCBF;
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	9c 81       	ldd	r25, Y+4	; 0x04
    1316:	90 93 97 01 	sts	0x0197, r25
    131a:	80 93 96 01 	sts	0x0196, r24
    131e:	1c c0       	rjmp	.+56     	; 0x1358 <GPT_VoidEnableCBF+0x140>
			break;
		}
	break;

case  GPT_u8_TIMER2 :
	switch(Copy_u8TimerMode)
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	3e 83       	std	Y+6, r19	; 0x06
    1328:	2d 83       	std	Y+5, r18	; 0x05
    132a:	8d 81       	ldd	r24, Y+5	; 0x05
    132c:	9e 81       	ldd	r25, Y+6	; 0x06
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	31 f0       	breq	.+12     	; 0x133e <GPT_VoidEnableCBF+0x126>
    1332:	2d 81       	ldd	r18, Y+5	; 0x05
    1334:	3e 81       	ldd	r19, Y+6	; 0x06
    1336:	21 30       	cpi	r18, 0x01	; 1
    1338:	31 05       	cpc	r19, r1
    133a:	41 f0       	breq	.+16     	; 0x134c <GPT_VoidEnableCBF+0x134>
    133c:	0d c0       	rjmp	.+26     	; 0x1358 <GPT_VoidEnableCBF+0x140>
	{
	case  GPT_u8_TIMER2_COMP  :
		TIMER.GPT_TIMER2_COMP=Add_pCBF;
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	9c 81       	ldd	r25, Y+4	; 0x04
    1342:	90 93 89 01 	sts	0x0189, r25
    1346:	80 93 88 01 	sts	0x0188, r24
    134a:	06 c0       	rjmp	.+12     	; 0x1358 <GPT_VoidEnableCBF+0x140>
		break;
	case  GPT_u8_TIMER2_OVF  :
		TIMER.GPT_TIMER2_OVF=Add_pCBF;
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	9c 81       	ldd	r25, Y+4	; 0x04
    1350:	90 93 8b 01 	sts	0x018B, r25
    1354:	80 93 8a 01 	sts	0x018A, r24
		break;
	}
	break;

}
}
    1358:	2c 96       	adiw	r28, 0x0c	; 12
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	de bf       	out	0x3e, r29	; 62
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	cd bf       	out	0x3d, r28	; 61
    1364:	cf 91       	pop	r28
    1366:	df 91       	pop	r29
    1368:	08 95       	ret

0000136a <__vector_4>:

//Timer/Counter2 Compare Match
void __vector_4(void)     __attribute__((signal,used));
void __vector_4(void)
{
    136a:	1f 92       	push	r1
    136c:	0f 92       	push	r0
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	0f 92       	push	r0
    1372:	11 24       	eor	r1, r1
    1374:	2f 93       	push	r18
    1376:	3f 93       	push	r19
    1378:	4f 93       	push	r20
    137a:	5f 93       	push	r21
    137c:	6f 93       	push	r22
    137e:	7f 93       	push	r23
    1380:	8f 93       	push	r24
    1382:	9f 93       	push	r25
    1384:	af 93       	push	r26
    1386:	bf 93       	push	r27
    1388:	ef 93       	push	r30
    138a:	ff 93       	push	r31
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
	//implementation
	if(TIMER.GPT_TIMER2_COMP!=NULL)
    1394:	80 91 88 01 	lds	r24, 0x0188
    1398:	90 91 89 01 	lds	r25, 0x0189
    139c:	00 97       	sbiw	r24, 0x00	; 0
    139e:	29 f0       	breq	.+10     	; 0x13aa <__vector_4+0x40>
		{
		TIMER.GPT_TIMER2_COMP();
    13a0:	e0 91 88 01 	lds	r30, 0x0188
    13a4:	f0 91 89 01 	lds	r31, 0x0189
    13a8:	09 95       	icall
		}

}
    13aa:	cf 91       	pop	r28
    13ac:	df 91       	pop	r29
    13ae:	ff 91       	pop	r31
    13b0:	ef 91       	pop	r30
    13b2:	bf 91       	pop	r27
    13b4:	af 91       	pop	r26
    13b6:	9f 91       	pop	r25
    13b8:	8f 91       	pop	r24
    13ba:	7f 91       	pop	r23
    13bc:	6f 91       	pop	r22
    13be:	5f 91       	pop	r21
    13c0:	4f 91       	pop	r20
    13c2:	3f 91       	pop	r19
    13c4:	2f 91       	pop	r18
    13c6:	0f 90       	pop	r0
    13c8:	0f be       	out	0x3f, r0	; 63
    13ca:	0f 90       	pop	r0
    13cc:	1f 90       	pop	r1
    13ce:	18 95       	reti

000013d0 <__vector_5>:

//Timer/Counter2 Overflow
void __vector_5(void)     __attribute__((signal,used));
void __vector_5(void)
{
    13d0:	1f 92       	push	r1
    13d2:	0f 92       	push	r0
    13d4:	0f b6       	in	r0, 0x3f	; 63
    13d6:	0f 92       	push	r0
    13d8:	11 24       	eor	r1, r1
    13da:	2f 93       	push	r18
    13dc:	3f 93       	push	r19
    13de:	4f 93       	push	r20
    13e0:	5f 93       	push	r21
    13e2:	6f 93       	push	r22
    13e4:	7f 93       	push	r23
    13e6:	8f 93       	push	r24
    13e8:	9f 93       	push	r25
    13ea:	af 93       	push	r26
    13ec:	bf 93       	push	r27
    13ee:	ef 93       	push	r30
    13f0:	ff 93       	push	r31
    13f2:	df 93       	push	r29
    13f4:	cf 93       	push	r28
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
	//implementation

	if(TIMER.GPT_TIMER2_OVF!=NULL)
    13fa:	80 91 8a 01 	lds	r24, 0x018A
    13fe:	90 91 8b 01 	lds	r25, 0x018B
    1402:	00 97       	sbiw	r24, 0x00	; 0
    1404:	29 f0       	breq	.+10     	; 0x1410 <__vector_5+0x40>
		{
		TIMER.GPT_TIMER2_OVF();
    1406:	e0 91 8a 01 	lds	r30, 0x018A
    140a:	f0 91 8b 01 	lds	r31, 0x018B
    140e:	09 95       	icall
		}

}
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	ff 91       	pop	r31
    1416:	ef 91       	pop	r30
    1418:	bf 91       	pop	r27
    141a:	af 91       	pop	r26
    141c:	9f 91       	pop	r25
    141e:	8f 91       	pop	r24
    1420:	7f 91       	pop	r23
    1422:	6f 91       	pop	r22
    1424:	5f 91       	pop	r21
    1426:	4f 91       	pop	r20
    1428:	3f 91       	pop	r19
    142a:	2f 91       	pop	r18
    142c:	0f 90       	pop	r0
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	0f 90       	pop	r0
    1432:	1f 90       	pop	r1
    1434:	18 95       	reti

00001436 <__vector_7>:
}*/

//Timer/Counter1 Compare Match A
void __vector_7(void)     __attribute__((signal,used));
void __vector_7(void)
{
    1436:	1f 92       	push	r1
    1438:	0f 92       	push	r0
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	0f 92       	push	r0
    143e:	11 24       	eor	r1, r1
    1440:	2f 93       	push	r18
    1442:	3f 93       	push	r19
    1444:	4f 93       	push	r20
    1446:	5f 93       	push	r21
    1448:	6f 93       	push	r22
    144a:	7f 93       	push	r23
    144c:	8f 93       	push	r24
    144e:	9f 93       	push	r25
    1450:	af 93       	push	r26
    1452:	bf 93       	push	r27
    1454:	ef 93       	push	r30
    1456:	ff 93       	push	r31
    1458:	df 93       	push	r29
    145a:	cf 93       	push	r28
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
	//implementation
	if(TIMER.GPT_TIMER1_COMPA!=NULL)
    1460:	80 91 8e 01 	lds	r24, 0x018E
    1464:	90 91 8f 01 	lds	r25, 0x018F
    1468:	00 97       	sbiw	r24, 0x00	; 0
    146a:	29 f0       	breq	.+10     	; 0x1476 <__vector_7+0x40>
				{
				TIMER.GPT_TIMER1_COMPA();
    146c:	e0 91 8e 01 	lds	r30, 0x018E
    1470:	f0 91 8f 01 	lds	r31, 0x018F
    1474:	09 95       	icall
				}

}
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	ff 91       	pop	r31
    147c:	ef 91       	pop	r30
    147e:	bf 91       	pop	r27
    1480:	af 91       	pop	r26
    1482:	9f 91       	pop	r25
    1484:	8f 91       	pop	r24
    1486:	7f 91       	pop	r23
    1488:	6f 91       	pop	r22
    148a:	5f 91       	pop	r21
    148c:	4f 91       	pop	r20
    148e:	3f 91       	pop	r19
    1490:	2f 91       	pop	r18
    1492:	0f 90       	pop	r0
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	0f 90       	pop	r0
    1498:	1f 90       	pop	r1
    149a:	18 95       	reti

0000149c <__vector_8>:

//Timer/Counter1 Compare Match B
void __vector_8(void)     __attribute__((signal,used));
void __vector_8(void)
{
    149c:	1f 92       	push	r1
    149e:	0f 92       	push	r0
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	0f 92       	push	r0
    14a4:	11 24       	eor	r1, r1
    14a6:	2f 93       	push	r18
    14a8:	3f 93       	push	r19
    14aa:	4f 93       	push	r20
    14ac:	5f 93       	push	r21
    14ae:	6f 93       	push	r22
    14b0:	7f 93       	push	r23
    14b2:	8f 93       	push	r24
    14b4:	9f 93       	push	r25
    14b6:	af 93       	push	r26
    14b8:	bf 93       	push	r27
    14ba:	ef 93       	push	r30
    14bc:	ff 93       	push	r31
    14be:	df 93       	push	r29
    14c0:	cf 93       	push	r28
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
	//implementation
	if(TIMER.GPT_TIMER1_COMPB!=NULL)
    14c6:	80 91 90 01 	lds	r24, 0x0190
    14ca:	90 91 91 01 	lds	r25, 0x0191
    14ce:	00 97       	sbiw	r24, 0x00	; 0
    14d0:	29 f0       	breq	.+10     	; 0x14dc <__vector_8+0x40>
				{
				TIMER.GPT_TIMER1_COMPB();
    14d2:	e0 91 90 01 	lds	r30, 0x0190
    14d6:	f0 91 91 01 	lds	r31, 0x0191
    14da:	09 95       	icall
				}

}
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	ff 91       	pop	r31
    14e2:	ef 91       	pop	r30
    14e4:	bf 91       	pop	r27
    14e6:	af 91       	pop	r26
    14e8:	9f 91       	pop	r25
    14ea:	8f 91       	pop	r24
    14ec:	7f 91       	pop	r23
    14ee:	6f 91       	pop	r22
    14f0:	5f 91       	pop	r21
    14f2:	4f 91       	pop	r20
    14f4:	3f 91       	pop	r19
    14f6:	2f 91       	pop	r18
    14f8:	0f 90       	pop	r0
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	0f 90       	pop	r0
    14fe:	1f 90       	pop	r1
    1500:	18 95       	reti

00001502 <__vector_10>:

}*/
// Timer/Counter0 Compare Match
void __vector_10(void)     __attribute__((signal,used));
void __vector_10(void)
{
    1502:	1f 92       	push	r1
    1504:	0f 92       	push	r0
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	0f 92       	push	r0
    150a:	11 24       	eor	r1, r1
    150c:	2f 93       	push	r18
    150e:	3f 93       	push	r19
    1510:	4f 93       	push	r20
    1512:	5f 93       	push	r21
    1514:	6f 93       	push	r22
    1516:	7f 93       	push	r23
    1518:	8f 93       	push	r24
    151a:	9f 93       	push	r25
    151c:	af 93       	push	r26
    151e:	bf 93       	push	r27
    1520:	ef 93       	push	r30
    1522:	ff 93       	push	r31
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
	//implementation
	if(TIMER.GPT_TIMER0_COMP!=NULL)
    152c:	80 91 94 01 	lds	r24, 0x0194
    1530:	90 91 95 01 	lds	r25, 0x0195
    1534:	00 97       	sbiw	r24, 0x00	; 0
    1536:	29 f0       	breq	.+10     	; 0x1542 <__vector_10+0x40>
			{
			TIMER.GPT_TIMER0_COMP();
    1538:	e0 91 94 01 	lds	r30, 0x0194
    153c:	f0 91 95 01 	lds	r31, 0x0195
    1540:	09 95       	icall
			}

}
    1542:	cf 91       	pop	r28
    1544:	df 91       	pop	r29
    1546:	ff 91       	pop	r31
    1548:	ef 91       	pop	r30
    154a:	bf 91       	pop	r27
    154c:	af 91       	pop	r26
    154e:	9f 91       	pop	r25
    1550:	8f 91       	pop	r24
    1552:	7f 91       	pop	r23
    1554:	6f 91       	pop	r22
    1556:	5f 91       	pop	r21
    1558:	4f 91       	pop	r20
    155a:	3f 91       	pop	r19
    155c:	2f 91       	pop	r18
    155e:	0f 90       	pop	r0
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	0f 90       	pop	r0
    1564:	1f 90       	pop	r1
    1566:	18 95       	reti

00001568 <__vector_11>:

// Timer/Counter0 Overflow
void __vector_11(void)     __attribute__((signal,used));
void __vector_11(void)
{
    1568:	1f 92       	push	r1
    156a:	0f 92       	push	r0
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	0f 92       	push	r0
    1570:	11 24       	eor	r1, r1
    1572:	2f 93       	push	r18
    1574:	3f 93       	push	r19
    1576:	4f 93       	push	r20
    1578:	5f 93       	push	r21
    157a:	6f 93       	push	r22
    157c:	7f 93       	push	r23
    157e:	8f 93       	push	r24
    1580:	9f 93       	push	r25
    1582:	af 93       	push	r26
    1584:	bf 93       	push	r27
    1586:	ef 93       	push	r30
    1588:	ff 93       	push	r31
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
	//implementation
	if(TIMER.GPT_TIMER0_OVF!=NULL)
    1592:	80 91 96 01 	lds	r24, 0x0196
    1596:	90 91 97 01 	lds	r25, 0x0197
    159a:	00 97       	sbiw	r24, 0x00	; 0
    159c:	29 f0       	breq	.+10     	; 0x15a8 <__vector_11+0x40>
			{
			TIMER.GPT_TIMER0_OVF();
    159e:	e0 91 96 01 	lds	r30, 0x0196
    15a2:	f0 91 97 01 	lds	r31, 0x0197
    15a6:	09 95       	icall
			}

}
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	ff 91       	pop	r31
    15ae:	ef 91       	pop	r30
    15b0:	bf 91       	pop	r27
    15b2:	af 91       	pop	r26
    15b4:	9f 91       	pop	r25
    15b6:	8f 91       	pop	r24
    15b8:	7f 91       	pop	r23
    15ba:	6f 91       	pop	r22
    15bc:	5f 91       	pop	r21
    15be:	4f 91       	pop	r20
    15c0:	3f 91       	pop	r19
    15c2:	2f 91       	pop	r18
    15c4:	0f 90       	pop	r0
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	0f 90       	pop	r0
    15ca:	1f 90       	pop	r1
    15cc:	18 95       	reti

000015ce <GINT_vidEnable>:
/* Name: GINT_vidEnable
 * Description: set bit 7 in the SREG
 * Arguments: void
 * Return:	void
 */
void GINT_vidEnable(void){
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
	EXTI_u8_SREG = SREG_BIT_I;
    15d6:	ef e5       	ldi	r30, 0x5F	; 95
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 e8       	ldi	r24, 0x80	; 128
    15dc:	80 83       	st	Z, r24
}
    15de:	cf 91       	pop	r28
    15e0:	df 91       	pop	r29
    15e2:	08 95       	ret

000015e4 <GINT_vidDisable>:
/* Name: GINT_vidDisable
 * Description: clear bit 7 in the SREG
 * Arguments: void
 * Return:	void
 */
void GINT_vidDisable(void){
    15e4:	df 93       	push	r29
    15e6:	cf 93       	push	r28
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(EXTI_u8_SREG, SREG_BIT_I);
    15ec:	af e5       	ldi	r26, 0x5F	; 95
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	ef e5       	ldi	r30, 0x5F	; 95
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	8f 77       	andi	r24, 0x7F	; 127
    15f8:	8c 93       	st	X, r24
}
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <EXTI_vidEnable>:
 * 				first Argument: Copy_u8ExtIntPin, 			options (INT0, INT1, INT2)
 * 				second Argument: Copy_u8SenseControl, 		options (EXTI_u8_LOW_LEVEL, EXTI_u8_LOGICAL_CHANGE,
																	EXTI_u8_FALLING_EDGE, EXTI_u8_RISING_EDGE)
 * Return:	void
 */
EXTI_tenuErrorStatus EXTI_vidEnable(u8 Copy_u8ExtIntPin, u8 Copy_u8SenseControl){
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	00 d0       	rcall	.+0      	; 0x1606 <EXTI_vidEnable+0x6>
    1606:	00 d0       	rcall	.+0      	; 0x1608 <EXTI_vidEnable+0x8>
    1608:	0f 92       	push	r0
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
    160e:	8a 83       	std	Y+2, r24	; 0x02
    1610:	6b 83       	std	Y+3, r22	; 0x03
	EXTI_tenuErrorStatus Local_enuErrorStatus = EXTI_OK;
    1612:	19 82       	std	Y+1, r1	; 0x01
	/*check arguments*/
	if(Copy_u8ExtIntPin > 2 || Copy_u8SenseControl > 3){
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	83 30       	cpi	r24, 0x03	; 3
    1618:	18 f4       	brcc	.+6      	; 0x1620 <EXTI_vidEnable+0x20>
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	84 30       	cpi	r24, 0x04	; 4
    161e:	18 f0       	brcs	.+6      	; 0x1626 <EXTI_vidEnable+0x26>
		Local_enuErrorStatus = EXTI_NOK;
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	89 83       	std	Y+1, r24	; 0x01
    1624:	96 c0       	rjmp	.+300    	; 0x1752 <EXTI_vidEnable+0x152>
	} else{
		switch (Copy_u8ExtIntPin){
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	3d 83       	std	Y+5, r19	; 0x05
    162e:	2c 83       	std	Y+4, r18	; 0x04
    1630:	8c 81       	ldd	r24, Y+4	; 0x04
    1632:	9d 81       	ldd	r25, Y+5	; 0x05
    1634:	81 30       	cpi	r24, 0x01	; 1
    1636:	91 05       	cpc	r25, r1
    1638:	e9 f1       	breq	.+122    	; 0x16b4 <EXTI_vidEnable+0xb4>
    163a:	2c 81       	ldd	r18, Y+4	; 0x04
    163c:	3d 81       	ldd	r19, Y+5	; 0x05
    163e:	22 30       	cpi	r18, 0x02	; 2
    1640:	31 05       	cpc	r19, r1
    1642:	09 f4       	brne	.+2      	; 0x1646 <EXTI_vidEnable+0x46>
    1644:	69 c0       	rjmp	.+210    	; 0x1718 <EXTI_vidEnable+0x118>
    1646:	8c 81       	ldd	r24, Y+4	; 0x04
    1648:	9d 81       	ldd	r25, Y+5	; 0x05
    164a:	00 97       	sbiw	r24, 0x00	; 0
    164c:	09 f0       	breq	.+2      	; 0x1650 <EXTI_vidEnable+0x50>
    164e:	7f c0       	rjmp	.+254    	; 0x174e <EXTI_vidEnable+0x14e>
			case EXTI_u8_INT0:
				if(Copy_u8SenseControl == EXTI_u8_LOW_LEVEL){
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	88 23       	and	r24, r24
    1654:	39 f4       	brne	.+14     	; 0x1664 <EXTI_vidEnable+0x64>
					SET_BIT(EXTI_u8_MCUCR_REG, EXTI_INT0_LOW_LEVEL);
    1656:	e5 e5       	ldi	r30, 0x55	; 85
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	a5 e5       	ldi	r26, 0x55	; 85
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	8c 91       	ld	r24, X
    1660:	80 83       	st	Z, r24
    1662:	20 c0       	rjmp	.+64     	; 0x16a4 <EXTI_vidEnable+0xa4>
				} else if(Copy_u8SenseControl == EXTI_u8_LOGICAL_CHANGE){
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	41 f4       	brne	.+16     	; 0x167a <EXTI_vidEnable+0x7a>
					SET_BIT(EXTI_u8_MCUCR_REG, EXTI_INT0_LOGIC_CHANGE);
    166a:	a5 e5       	ldi	r26, 0x55	; 85
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	e5 e5       	ldi	r30, 0x55	; 85
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	81 60       	ori	r24, 0x01	; 1
    1676:	8c 93       	st	X, r24
    1678:	15 c0       	rjmp	.+42     	; 0x16a4 <EXTI_vidEnable+0xa4>
				} else if(Copy_u8SenseControl == EXTI_u8_FALLING_EDGE){
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	82 30       	cpi	r24, 0x02	; 2
    167e:	41 f4       	brne	.+16     	; 0x1690 <EXTI_vidEnable+0x90>
					SET_BIT(EXTI_u8_MCUCR_REG, EXTI_INT0_FALLING_EDGE);
    1680:	a5 e5       	ldi	r26, 0x55	; 85
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	e5 e5       	ldi	r30, 0x55	; 85
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	82 60       	ori	r24, 0x02	; 2
    168c:	8c 93       	st	X, r24
    168e:	0a c0       	rjmp	.+20     	; 0x16a4 <EXTI_vidEnable+0xa4>
				} else if(Copy_u8SenseControl == EXTI_u8_RISING_EDGE){
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	83 30       	cpi	r24, 0x03	; 3
    1694:	39 f4       	brne	.+14     	; 0x16a4 <EXTI_vidEnable+0xa4>
					SET_BIT(EXTI_u8_MCUCR_REG, EXTI_INT0_RISING_EDGE);
    1696:	a5 e5       	ldi	r26, 0x55	; 85
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e5 e5       	ldi	r30, 0x55	; 85
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	83 60       	ori	r24, 0x03	; 3
    16a2:	8c 93       	st	X, r24
				} else { /*....*/ }
				SET_BIT(EXTI_u8_GICR_REG, EXTI_INABLE_INT0_INTERRUPT);
    16a4:	ab e5       	ldi	r26, 0x5B	; 91
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	eb e5       	ldi	r30, 0x5B	; 91
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	80 64       	ori	r24, 0x40	; 64
    16b0:	8c 93       	st	X, r24
    16b2:	4d c0       	rjmp	.+154    	; 0x174e <EXTI_vidEnable+0x14e>
				break;
			case EXTI_u8_INT1:
				if(Copy_u8SenseControl == EXTI_u8_LOW_LEVEL){
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	88 23       	and	r24, r24
    16b8:	39 f4       	brne	.+14     	; 0x16c8 <EXTI_vidEnable+0xc8>
					SET_BIT(EXTI_u8_MCUCR_REG, EXTI_INT1_LOW_LEVEL);
    16ba:	e5 e5       	ldi	r30, 0x55	; 85
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	a5 e5       	ldi	r26, 0x55	; 85
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	8c 91       	ld	r24, X
    16c4:	80 83       	st	Z, r24
    16c6:	20 c0       	rjmp	.+64     	; 0x1708 <EXTI_vidEnable+0x108>
				} else if(Copy_u8SenseControl == EXTI_u8_LOGICAL_CHANGE){
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	81 30       	cpi	r24, 0x01	; 1
    16cc:	41 f4       	brne	.+16     	; 0x16de <EXTI_vidEnable+0xde>
					SET_BIT(EXTI_u8_MCUCR_REG, EXTI_INT1_LOGIC_CHANGE);
    16ce:	a5 e5       	ldi	r26, 0x55	; 85
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	e5 e5       	ldi	r30, 0x55	; 85
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	84 60       	ori	r24, 0x04	; 4
    16da:	8c 93       	st	X, r24
    16dc:	15 c0       	rjmp	.+42     	; 0x1708 <EXTI_vidEnable+0x108>
				} else if(Copy_u8SenseControl == EXTI_u8_FALLING_EDGE){
    16de:	8b 81       	ldd	r24, Y+3	; 0x03
    16e0:	82 30       	cpi	r24, 0x02	; 2
    16e2:	41 f4       	brne	.+16     	; 0x16f4 <EXTI_vidEnable+0xf4>
					SET_BIT(EXTI_u8_MCUCR_REG, EXTI_INT1_FALLING_EDGE);
    16e4:	a5 e5       	ldi	r26, 0x55	; 85
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e5 e5       	ldi	r30, 0x55	; 85
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	88 60       	ori	r24, 0x08	; 8
    16f0:	8c 93       	st	X, r24
    16f2:	0a c0       	rjmp	.+20     	; 0x1708 <EXTI_vidEnable+0x108>
				} else if(Copy_u8SenseControl == EXTI_u8_RISING_EDGE){
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	83 30       	cpi	r24, 0x03	; 3
    16f8:	39 f4       	brne	.+14     	; 0x1708 <EXTI_vidEnable+0x108>
					SET_BIT(EXTI_u8_MCUCR_REG, EXTI_INT1_RISING_EDGE);
    16fa:	a5 e5       	ldi	r26, 0x55	; 85
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	e5 e5       	ldi	r30, 0x55	; 85
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	8c 60       	ori	r24, 0x0C	; 12
    1706:	8c 93       	st	X, r24
				} else { /*....*/ }
				SET_BIT(EXTI_u8_GICR_REG, EXTI_INABLE_INT1_INTERRUPT);
    1708:	ab e5       	ldi	r26, 0x5B	; 91
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	eb e5       	ldi	r30, 0x5B	; 91
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	80 68       	ori	r24, 0x80	; 128
    1714:	8c 93       	st	X, r24
    1716:	1b c0       	rjmp	.+54     	; 0x174e <EXTI_vidEnable+0x14e>
				break;
			case EXTI_u8_INT2:
				if(Copy_u8SenseControl == EXTI_u8_FALLING_EDGE){
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	82 30       	cpi	r24, 0x02	; 2
    171c:	39 f4       	brne	.+14     	; 0x172c <EXTI_vidEnable+0x12c>
					SET_BIT(EXTI_u8_MCUCR_REG, EXTI_INT2_FALLING_EDGE);
    171e:	e5 e5       	ldi	r30, 0x55	; 85
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	a5 e5       	ldi	r26, 0x55	; 85
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	8c 91       	ld	r24, X
    1728:	80 83       	st	Z, r24
    172a:	0a c0       	rjmp	.+20     	; 0x1740 <EXTI_vidEnable+0x140>
				} else if(Copy_u8SenseControl == EXTI_u8_RISING_EDGE){
    172c:	8b 81       	ldd	r24, Y+3	; 0x03
    172e:	83 30       	cpi	r24, 0x03	; 3
    1730:	39 f4       	brne	.+14     	; 0x1740 <EXTI_vidEnable+0x140>
					SET_BIT(EXTI_u8_MCUCR_REG, EXTI_INT2_RISING_EDGE);
    1732:	a5 e5       	ldi	r26, 0x55	; 85
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	e5 e5       	ldi	r30, 0x55	; 85
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	80 64       	ori	r24, 0x40	; 64
    173e:	8c 93       	st	X, r24
				} else { /*....*/ }
				SET_BIT(EXTI_u8_GICR_REG, EXTI_INABLE_INT2_INTERRUPT);
    1740:	ab e5       	ldi	r26, 0x5B	; 91
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	eb e5       	ldi	r30, 0x5B	; 91
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	80 62       	ori	r24, 0x20	; 32
    174c:	8c 93       	st	X, r24
				break;
			default:
				break;
		}
		GINT_vidEnable();
    174e:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <GINT_vidEnable>
	}
	return Local_enuErrorStatus;
    1752:	89 81       	ldd	r24, Y+1	; 0x01
}
    1754:	0f 90       	pop	r0
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	0f 90       	pop	r0
    175e:	cf 91       	pop	r28
    1760:	df 91       	pop	r29
    1762:	08 95       	ret

00001764 <EXTI_vidDisable>:
 * Arguments: Arguments:
 * 				first Argument: Copy_u8ExtIntPin, 			options (INT0, INT1, INT2)																	EXTI_u8_FALLING_EDGE, EXTI_u8_RISING_EDGE)
 * Return:	void
 */

EXTI_tenuErrorStatus EXTI_vidDisable(u8 Copy_u8ExtIntPin){
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	00 d0       	rcall	.+0      	; 0x176a <EXTI_vidDisable+0x6>
    176a:	00 d0       	rcall	.+0      	; 0x176c <EXTI_vidDisable+0x8>
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
    1770:	8a 83       	std	Y+2, r24	; 0x02
	EXTI_tenuErrorStatus Local_enuErrorStatus = EXTI_OK;
    1772:	19 82       	std	Y+1, r1	; 0x01

	/*check arguments*/
	if(Copy_u8ExtIntPin > 2){
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	83 30       	cpi	r24, 0x03	; 3
    1778:	18 f0       	brcs	.+6      	; 0x1780 <EXTI_vidDisable+0x1c>
		Local_enuErrorStatus = EXTI_NOK;
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	89 83       	std	Y+1, r24	; 0x01
    177e:	2a c0       	rjmp	.+84     	; 0x17d4 <EXTI_vidDisable+0x70>
	} else{
		switch(Copy_u8ExtIntPin){
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	3c 83       	std	Y+4, r19	; 0x04
    1788:	2b 83       	std	Y+3, r18	; 0x03
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
    178c:	9c 81       	ldd	r25, Y+4	; 0x04
    178e:	81 30       	cpi	r24, 0x01	; 1
    1790:	91 05       	cpc	r25, r1
    1792:	89 f0       	breq	.+34     	; 0x17b6 <EXTI_vidDisable+0x52>
    1794:	2b 81       	ldd	r18, Y+3	; 0x03
    1796:	3c 81       	ldd	r19, Y+4	; 0x04
    1798:	22 30       	cpi	r18, 0x02	; 2
    179a:	31 05       	cpc	r19, r1
    179c:	a1 f0       	breq	.+40     	; 0x17c6 <EXTI_vidDisable+0x62>
    179e:	8b 81       	ldd	r24, Y+3	; 0x03
    17a0:	9c 81       	ldd	r25, Y+4	; 0x04
    17a2:	00 97       	sbiw	r24, 0x00	; 0
    17a4:	b9 f4       	brne	.+46     	; 0x17d4 <EXTI_vidDisable+0x70>
			case EXTI_u8_INT0:
				CLEAR_BIT(EXTI_u8_GICR_REG, EXTI_INABLE_INT0_INTERRUPT);
    17a6:	ab e5       	ldi	r26, 0x5B	; 91
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	eb e5       	ldi	r30, 0x5B	; 91
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	8f 7b       	andi	r24, 0xBF	; 191
    17b2:	8c 93       	st	X, r24
    17b4:	0f c0       	rjmp	.+30     	; 0x17d4 <EXTI_vidDisable+0x70>
				break;
			case EXTI_u8_INT1:
				CLEAR_BIT(EXTI_u8_GICR_REG, EXTI_INABLE_INT1_INTERRUPT);
    17b6:	ab e5       	ldi	r26, 0x5B	; 91
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	eb e5       	ldi	r30, 0x5B	; 91
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	8f 77       	andi	r24, 0x7F	; 127
    17c2:	8c 93       	st	X, r24
    17c4:	07 c0       	rjmp	.+14     	; 0x17d4 <EXTI_vidDisable+0x70>
				break;
			case EXTI_u8_INT2:
				CLEAR_BIT(EXTI_u8_GICR_REG, EXTI_INABLE_INT2_INTERRUPT);
    17c6:	ab e5       	ldi	r26, 0x5B	; 91
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	eb e5       	ldi	r30, 0x5B	; 91
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	8f 7d       	andi	r24, 0xDF	; 223
    17d2:	8c 93       	st	X, r24
				break;
		}
	}

	return Local_enuErrorStatus;
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	0f 90       	pop	r0
    17dc:	0f 90       	pop	r0
    17de:	cf 91       	pop	r28
    17e0:	df 91       	pop	r29
    17e2:	08 95       	ret

000017e4 <EEPROM_vidwriteByte>:
																			EEPROM space. The EEPROM data bytes are addressed
																			linearly between 0 and 1023)
 * 				second Argument: Copy_u8EEPROM_Data, 				options (any 8-bit data)
 * Return:	void
 */
void EEPROM_vidwriteByte(u16 Copy_u16EEPROM_Address, u8 Copy_u8EEPROM_Data){
    17e4:	df 93       	push	r29
    17e6:	cf 93       	push	r28
    17e8:	00 d0       	rcall	.+0      	; 0x17ea <EEPROM_vidwriteByte+0x6>
    17ea:	0f 92       	push	r0
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	9a 83       	std	Y+2, r25	; 0x02
    17f2:	89 83       	std	Y+1, r24	; 0x01
    17f4:	6b 83       	std	Y+3, r22	; 0x03
	/* wait for completion of previous write */
	while(EEPROM_u8_EECR_REG & EEPROM_u8_EEWE);
    17f6:	ec e3       	ldi	r30, 0x3C	; 60
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	88 2f       	mov	r24, r24
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	82 70       	andi	r24, 0x02	; 2
    1802:	90 70       	andi	r25, 0x00	; 0
    1804:	00 97       	sbiw	r24, 0x00	; 0
    1806:	b9 f7       	brne	.-18     	; 0x17f6 <EEPROM_vidwriteByte+0x12>
	/* set up address and data registers */
	EEPROM_u16_EEAR_REG = Copy_u16EEPROM_Address;
    1808:	ee e3       	ldi	r30, 0x3E	; 62
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	89 81       	ldd	r24, Y+1	; 0x01
    180e:	9a 81       	ldd	r25, Y+2	; 0x02
    1810:	91 83       	std	Z+1, r25	; 0x01
    1812:	80 83       	st	Z, r24
	EEPROM_u8_EEDR_REG = Copy_u8EEPROM_Data;
    1814:	ed e3       	ldi	r30, 0x3D	; 61
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	8b 81       	ldd	r24, Y+3	; 0x03
    181a:	80 83       	st	Z, r24
	/* write logical one to EEMWE */
	EEPROM_u8_EECR_REG |= EEPROM_u8_EEMWE;
    181c:	ac e3       	ldi	r26, 0x3C	; 60
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	ec e3       	ldi	r30, 0x3C	; 60
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	84 60       	ori	r24, 0x04	; 4
    1828:	8c 93       	st	X, r24
	/* start EEPROM write by setting EEWE */
	EEPROM_u8_EECR_REG |= EEPROM_u8_EEWE;
    182a:	ac e3       	ldi	r26, 0x3C	; 60
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	ec e3       	ldi	r30, 0x3C	; 60
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	82 60       	ori	r24, 0x02	; 2
    1836:	8c 93       	st	X, r24
}
    1838:	0f 90       	pop	r0
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	08 95       	ret

00001844 <EEPROM_u8readByte>:
 * Arguments:	first Argument: Copy_u16EEPROM_Address, 			options (specify the EEPROM address in the 1024bytes
																			EEPROM space. The EEPROM data bytes are addressed
																			linearly between 0 and 1023)
 * Return:	u8 -----> return the data stored in the EEDR
 */
u8 EEPROM_u8readByte(u16 Copy_u16EEPROM_Address){
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	00 d0       	rcall	.+0      	; 0x184a <EEPROM_u8readByte+0x6>
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
    184e:	9a 83       	std	Y+2, r25	; 0x02
    1850:	89 83       	std	Y+1, r24	; 0x01
	/* wait for completion of previous write */
	while(EEPROM_u8_EECR_REG & EEPROM_u8_EEWE);
    1852:	ec e3       	ldi	r30, 0x3C	; 60
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	88 2f       	mov	r24, r24
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	82 70       	andi	r24, 0x02	; 2
    185e:	90 70       	andi	r25, 0x00	; 0
    1860:	00 97       	sbiw	r24, 0x00	; 0
    1862:	b9 f7       	brne	.-18     	; 0x1852 <EEPROM_u8readByte+0xe>
	/* set up address register */
	EEPROM_u16_EEAR_REG = Copy_u16EEPROM_Address;
    1864:	ee e3       	ldi	r30, 0x3E	; 62
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	89 81       	ldd	r24, Y+1	; 0x01
    186a:	9a 81       	ldd	r25, Y+2	; 0x02
    186c:	91 83       	std	Z+1, r25	; 0x01
    186e:	80 83       	st	Z, r24
	/* start EEPROM read by setting EERE */
	EEPROM_u8_EECR_REG |= EEPROM_u8_EERE;
    1870:	ac e3       	ldi	r26, 0x3C	; 60
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	ec e3       	ldi	r30, 0x3C	; 60
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	81 60       	ori	r24, 0x01	; 1
    187c:	8c 93       	st	X, r24
	/* return data from EEDR */
	return EEPROM_u8_EEDR_REG;
    187e:	ed e3       	ldi	r30, 0x3D	; 61
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
}
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	08 95       	ret

0000188e <DIO_vidInit>:
/* Name: DIO_vidInit
 * Description: initialize all the MC pins according to "DIO_cfg.h"
 * Arguments: void
 * Return:	void
 */
void DIO_vidInit(void){
    188e:	df 93       	push	r29
    1890:	cf 93       	push	r28
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
	 SETTING DDR OPTIONS:
	 * INPUT  ---> 0
	 * OUTPUT ---> 1
	*/
	// Set DDR values
	DIO_u8_DDRA_REG = CONC(DIO_u8_PORTA_PIN7, DIO_u8_PORTA_PIN6, DIO_u8_PORTA_PIN5
    1896:	ea e3       	ldi	r30, 0x3A	; 58
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	8e ef       	ldi	r24, 0xFE	; 254
    189c:	80 83       	st	Z, r24
								, DIO_u8_PORTA_PIN4 , DIO_u8_PORTA_PIN3, DIO_u8_PORTA_PIN2
								, DIO_u8_PORTA_PIN1, DIO_u8_PORTA_PIN0);

	DIO_u8_DDRB_REG = CONC(DIO_u8_PORTB_PIN7, DIO_u8_PORTB_PIN6, DIO_u8_PORTB_PIN5
    189e:	e7 e3       	ldi	r30, 0x37	; 55
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	8f ef       	ldi	r24, 0xFF	; 255
    18a4:	80 83       	st	Z, r24
							, DIO_u8_PORTB_PIN4 , DIO_u8_PORTB_PIN3, DIO_u8_PORTB_PIN2
							, DIO_u8_PORTB_PIN1, DIO_u8_PORTB_PIN0);

	DIO_u8_DDRC_REG = CONC(DIO_u8_PORTC_PIN7, DIO_u8_PORTC_PIN6, DIO_u8_PORTC_PIN5
    18a6:	e4 e3       	ldi	r30, 0x34	; 52
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	8f ef       	ldi	r24, 0xFF	; 255
    18ac:	80 83       	st	Z, r24
							, DIO_u8_PORTC_PIN4 , DIO_u8_PORTC_PIN3, DIO_u8_PORTC_PIN2
							, DIO_u8_PORTC_PIN1, DIO_u8_PORTC_PIN0);

	DIO_u8_DDRD_REG = CONC(DIO_u8_PORTD_PIN7, DIO_u8_PORTD_PIN6, DIO_u8_PORTD_PIN5
    18ae:	e1 e3       	ldi	r30, 0x31	; 49
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	86 ef       	ldi	r24, 0xF6	; 246
    18b4:	80 83       	st	Z, r24
	#define DIO_u8_OUTPUT_LOW				0
	#define DIO_u8_OUTPUT_HIGH				1
	#define DIO_u8_INPUT_FLOATING			0
	#define DIO_u8_INPUT_PULLUP				1
	// Set PORT values
	DIO_u8_PORTA_REG = CONC(DIO_u8_PORTA_PIN7, DIO_u8_PORTA_PIN6, DIO_u8_PORTA_PIN5
    18b6:	eb e3       	ldi	r30, 0x3B	; 59
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	80 83       	st	Z, r24
								, DIO_u8_PORTA_PIN4 , DIO_u8_PORTA_PIN3, DIO_u8_PORTA_PIN2
								, DIO_u8_PORTA_PIN1, DIO_u8_PORTA_PIN0);

	DIO_u8_PORTB_REG = CONC(DIO_u8_PORTB_PIN7, DIO_u8_PORTB_PIN6, DIO_u8_PORTB_PIN5
    18be:	e8 e3       	ldi	r30, 0x38	; 56
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	10 82       	st	Z, r1
							, DIO_u8_PORTB_PIN4 , DIO_u8_PORTB_PIN3, DIO_u8_PORTB_PIN2
							, DIO_u8_PORTB_PIN1, DIO_u8_PORTB_PIN0);

	DIO_u8_PORTC_REG = CONC(DIO_u8_PORTC_PIN7, DIO_u8_PORTC_PIN6, DIO_u8_PORTC_PIN5
    18c4:	e5 e3       	ldi	r30, 0x35	; 53
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	8f ef       	ldi	r24, 0xFF	; 255
    18ca:	80 83       	st	Z, r24
							, DIO_u8_PORTC_PIN4 , DIO_u8_PORTC_PIN3, DIO_u8_PORTC_PIN2
							, DIO_u8_PORTC_PIN1, DIO_u8_PORTC_PIN0);

	DIO_u8_PORTD_REG = CONC(DIO_u8_PORTD_PIN7, DIO_u8_PORTD_PIN6, DIO_u8_PORTD_PIN5
    18cc:	e2 e3       	ldi	r30, 0x32	; 50
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	88 e0       	ldi	r24, 0x08	; 8
    18d2:	80 83       	st	Z, r24
	#define DIO_u8_OUTPUT_LOW				1
	#define DIO_u8_OUTPUT_HIGH				1
	#define DIO_u8_INPUT_FLOATING			0
	#define DIO_u8_INPUT_PULLUP				0

}
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	08 95       	ret

000018da <DIO_enuSetPinValue>:
 * 				first Argument: Copy_u8Port, 			options (DIO_u8_PORTA, DIO_u8_PORTB, DIO_u8_PORTC, DIO_u8_PORTD)
 * 				second Argument: Copy_u8Pin, 			options (from DIO_u8_PIN0 to DIO_u8_PIN7)
 * 				third Argument: Copy_u8Value, 			options (DIO_u8_HIGH, DIO_u8_LOW)
 * Return:	Error Status -----> DIO_OK , DIO_NOK
 */
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value){
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	cd b7       	in	r28, 0x3d	; 61
    18e0:	de b7       	in	r29, 0x3e	; 62
    18e2:	2e 97       	sbiw	r28, 0x0e	; 14
    18e4:	0f b6       	in	r0, 0x3f	; 63
    18e6:	f8 94       	cli
    18e8:	de bf       	out	0x3e, r29	; 62
    18ea:	0f be       	out	0x3f, r0	; 63
    18ec:	cd bf       	out	0x3d, r28	; 61
    18ee:	8a 83       	std	Y+2, r24	; 0x02
    18f0:	6b 83       	std	Y+3, r22	; 0x03
    18f2:	4c 83       	std	Y+4, r20	; 0x04
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
    18f4:	19 82       	std	Y+1, r1	; 0x01
	/*check arguments*/
	if((Copy_u8Port > DIO_u8_PORTD) || (Copy_u8Pin > DIO_u8_PIN7) || (Copy_u8Value > DIO_u8_HIGH)){
    18f6:	8a 81       	ldd	r24, Y+2	; 0x02
    18f8:	84 30       	cpi	r24, 0x04	; 4
    18fa:	30 f4       	brcc	.+12     	; 0x1908 <DIO_enuSetPinValue+0x2e>
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	88 30       	cpi	r24, 0x08	; 8
    1900:	18 f4       	brcc	.+6      	; 0x1908 <DIO_enuSetPinValue+0x2e>
    1902:	8c 81       	ldd	r24, Y+4	; 0x04
    1904:	82 30       	cpi	r24, 0x02	; 2
    1906:	18 f0       	brcs	.+6      	; 0x190e <DIO_enuSetPinValue+0x34>
		Local_enuErrorStatus = DIO_NOK;
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	89 83       	std	Y+1, r24	; 0x01
    190c:	d7 c0       	rjmp	.+430    	; 0x1abc <DIO_enuSetPinValue+0x1e2>
	}
	else {
	/*set pin value*/
		switch (Copy_u8Port){
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
    1910:	28 2f       	mov	r18, r24
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	3e 87       	std	Y+14, r19	; 0x0e
    1916:	2d 87       	std	Y+13, r18	; 0x0d
    1918:	8d 85       	ldd	r24, Y+13	; 0x0d
    191a:	9e 85       	ldd	r25, Y+14	; 0x0e
    191c:	81 30       	cpi	r24, 0x01	; 1
    191e:	91 05       	cpc	r25, r1
    1920:	09 f4       	brne	.+2      	; 0x1924 <DIO_enuSetPinValue+0x4a>
    1922:	44 c0       	rjmp	.+136    	; 0x19ac <DIO_enuSetPinValue+0xd2>
    1924:	2d 85       	ldd	r18, Y+13	; 0x0d
    1926:	3e 85       	ldd	r19, Y+14	; 0x0e
    1928:	22 30       	cpi	r18, 0x02	; 2
    192a:	31 05       	cpc	r19, r1
    192c:	2c f4       	brge	.+10     	; 0x1938 <DIO_enuSetPinValue+0x5e>
    192e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1930:	9e 85       	ldd	r25, Y+14	; 0x0e
    1932:	00 97       	sbiw	r24, 0x00	; 0
    1934:	71 f0       	breq	.+28     	; 0x1952 <DIO_enuSetPinValue+0x78>
    1936:	c2 c0       	rjmp	.+388    	; 0x1abc <DIO_enuSetPinValue+0x1e2>
    1938:	2d 85       	ldd	r18, Y+13	; 0x0d
    193a:	3e 85       	ldd	r19, Y+14	; 0x0e
    193c:	22 30       	cpi	r18, 0x02	; 2
    193e:	31 05       	cpc	r19, r1
    1940:	09 f4       	brne	.+2      	; 0x1944 <DIO_enuSetPinValue+0x6a>
    1942:	62 c0       	rjmp	.+196    	; 0x1a08 <DIO_enuSetPinValue+0x12e>
    1944:	8d 85       	ldd	r24, Y+13	; 0x0d
    1946:	9e 85       	ldd	r25, Y+14	; 0x0e
    1948:	83 30       	cpi	r24, 0x03	; 3
    194a:	91 05       	cpc	r25, r1
    194c:	09 f4       	brne	.+2      	; 0x1950 <DIO_enuSetPinValue+0x76>
    194e:	89 c0       	rjmp	.+274    	; 0x1a62 <DIO_enuSetPinValue+0x188>
    1950:	b5 c0       	rjmp	.+362    	; 0x1abc <DIO_enuSetPinValue+0x1e2>
			case DIO_u8_PORTA:
				(Copy_u8Value == DIO_u8_HIGH) ? (DIO_u8_PORTA_REG |= (DIO_u8_SET << Copy_u8Pin)) : (DIO_u8_PORTA_REG &= ~(DIO_u8_SET << Copy_u8Pin));
    1952:	8c 81       	ldd	r24, Y+4	; 0x04
    1954:	81 30       	cpi	r24, 0x01	; 1
    1956:	a9 f4       	brne	.+42     	; 0x1982 <DIO_enuSetPinValue+0xa8>
    1958:	ab e3       	ldi	r26, 0x3B	; 59
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	eb e3       	ldi	r30, 0x3B	; 59
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	48 2f       	mov	r20, r24
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	28 2f       	mov	r18, r24
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	02 2e       	mov	r0, r18
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <DIO_enuSetPinValue+0x9c>
    1972:	88 0f       	add	r24, r24
    1974:	99 1f       	adc	r25, r25
    1976:	0a 94       	dec	r0
    1978:	e2 f7       	brpl	.-8      	; 0x1972 <DIO_enuSetPinValue+0x98>
    197a:	84 2b       	or	r24, r20
    197c:	8c 93       	st	X, r24
    197e:	9c 91       	ld	r25, X
    1980:	9d c0       	rjmp	.+314    	; 0x1abc <DIO_enuSetPinValue+0x1e2>
    1982:	ab e3       	ldi	r26, 0x3B	; 59
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	eb e3       	ldi	r30, 0x3B	; 59
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	48 2f       	mov	r20, r24
    198e:	8b 81       	ldd	r24, Y+3	; 0x03
    1990:	28 2f       	mov	r18, r24
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	02 c0       	rjmp	.+4      	; 0x199e <DIO_enuSetPinValue+0xc4>
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	2a 95       	dec	r18
    19a0:	e2 f7       	brpl	.-8      	; 0x199a <DIO_enuSetPinValue+0xc0>
    19a2:	80 95       	com	r24
    19a4:	84 23       	and	r24, r20
    19a6:	8c 93       	st	X, r24
    19a8:	2c 91       	ld	r18, X
    19aa:	88 c0       	rjmp	.+272    	; 0x1abc <DIO_enuSetPinValue+0x1e2>
				break;
			case DIO_u8_PORTB:
				(Copy_u8Value == DIO_u8_HIGH) ? (DIO_u8_PORTB_REG |= (DIO_u8_SET << Copy_u8Pin)) : (DIO_u8_PORTB_REG &= ~(DIO_u8_SET << Copy_u8Pin));
    19ac:	8c 81       	ldd	r24, Y+4	; 0x04
    19ae:	81 30       	cpi	r24, 0x01	; 1
    19b0:	a9 f4       	brne	.+42     	; 0x19dc <DIO_enuSetPinValue+0x102>
    19b2:	a8 e3       	ldi	r26, 0x38	; 56
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	e8 e3       	ldi	r30, 0x38	; 56
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	48 2f       	mov	r20, r24
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	02 2e       	mov	r0, r18
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <DIO_enuSetPinValue+0xf6>
    19cc:	88 0f       	add	r24, r24
    19ce:	99 1f       	adc	r25, r25
    19d0:	0a 94       	dec	r0
    19d2:	e2 f7       	brpl	.-8      	; 0x19cc <DIO_enuSetPinValue+0xf2>
    19d4:	84 2b       	or	r24, r20
    19d6:	8c 93       	st	X, r24
    19d8:	3c 91       	ld	r19, X
    19da:	70 c0       	rjmp	.+224    	; 0x1abc <DIO_enuSetPinValue+0x1e2>
    19dc:	a8 e3       	ldi	r26, 0x38	; 56
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	e8 e3       	ldi	r30, 0x38	; 56
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	48 2f       	mov	r20, r24
    19e8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ea:	28 2f       	mov	r18, r24
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	02 2e       	mov	r0, r18
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <DIO_enuSetPinValue+0x120>
    19f6:	88 0f       	add	r24, r24
    19f8:	99 1f       	adc	r25, r25
    19fa:	0a 94       	dec	r0
    19fc:	e2 f7       	brpl	.-8      	; 0x19f6 <DIO_enuSetPinValue+0x11c>
    19fe:	80 95       	com	r24
    1a00:	84 23       	and	r24, r20
    1a02:	8c 93       	st	X, r24
    1a04:	8c 91       	ld	r24, X
    1a06:	5a c0       	rjmp	.+180    	; 0x1abc <DIO_enuSetPinValue+0x1e2>
				break;
			case DIO_u8_PORTC:
				(Copy_u8Value == DIO_u8_HIGH) ? (DIO_u8_PORTC_REG |= (DIO_u8_SET << Copy_u8Pin)) : (DIO_u8_PORTC_REG &= ~(DIO_u8_SET << Copy_u8Pin));
    1a08:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0a:	81 30       	cpi	r24, 0x01	; 1
    1a0c:	a9 f4       	brne	.+42     	; 0x1a38 <DIO_enuSetPinValue+0x15e>
    1a0e:	a5 e3       	ldi	r26, 0x35	; 53
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	e5 e3       	ldi	r30, 0x35	; 53
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	48 2f       	mov	r20, r24
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	28 2f       	mov	r18, r24
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	02 2e       	mov	r0, r18
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <DIO_enuSetPinValue+0x152>
    1a28:	88 0f       	add	r24, r24
    1a2a:	99 1f       	adc	r25, r25
    1a2c:	0a 94       	dec	r0
    1a2e:	e2 f7       	brpl	.-8      	; 0x1a28 <DIO_enuSetPinValue+0x14e>
    1a30:	84 2b       	or	r24, r20
    1a32:	8c 93       	st	X, r24
    1a34:	9c 91       	ld	r25, X
    1a36:	42 c0       	rjmp	.+132    	; 0x1abc <DIO_enuSetPinValue+0x1e2>
    1a38:	a5 e3       	ldi	r26, 0x35	; 53
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	e5 e3       	ldi	r30, 0x35	; 53
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	48 2f       	mov	r20, r24
    1a44:	8b 81       	ldd	r24, Y+3	; 0x03
    1a46:	28 2f       	mov	r18, r24
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	02 c0       	rjmp	.+4      	; 0x1a54 <DIO_enuSetPinValue+0x17a>
    1a50:	88 0f       	add	r24, r24
    1a52:	99 1f       	adc	r25, r25
    1a54:	2a 95       	dec	r18
    1a56:	e2 f7       	brpl	.-8      	; 0x1a50 <DIO_enuSetPinValue+0x176>
    1a58:	80 95       	com	r24
    1a5a:	84 23       	and	r24, r20
    1a5c:	8c 93       	st	X, r24
    1a5e:	2c 91       	ld	r18, X
    1a60:	2d c0       	rjmp	.+90     	; 0x1abc <DIO_enuSetPinValue+0x1e2>
				break;
			case DIO_u8_PORTD:
				(Copy_u8Value == DIO_u8_HIGH) ? (DIO_u8_PORTD_REG |= (DIO_u8_SET << Copy_u8Pin)) : (DIO_u8_PORTD_REG &= ~(DIO_u8_SET << Copy_u8Pin));
    1a62:	8c 81       	ldd	r24, Y+4	; 0x04
    1a64:	81 30       	cpi	r24, 0x01	; 1
    1a66:	a9 f4       	brne	.+42     	; 0x1a92 <DIO_enuSetPinValue+0x1b8>
    1a68:	a2 e3       	ldi	r26, 0x32	; 50
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e2 e3       	ldi	r30, 0x32	; 50
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	48 2f       	mov	r20, r24
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	02 2e       	mov	r0, r18
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <DIO_enuSetPinValue+0x1ac>
    1a82:	88 0f       	add	r24, r24
    1a84:	99 1f       	adc	r25, r25
    1a86:	0a 94       	dec	r0
    1a88:	e2 f7       	brpl	.-8      	; 0x1a82 <DIO_enuSetPinValue+0x1a8>
    1a8a:	84 2b       	or	r24, r20
    1a8c:	8c 93       	st	X, r24
    1a8e:	3c 91       	ld	r19, X
    1a90:	15 c0       	rjmp	.+42     	; 0x1abc <DIO_enuSetPinValue+0x1e2>
    1a92:	a2 e3       	ldi	r26, 0x32	; 50
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	e2 e3       	ldi	r30, 0x32	; 50
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	48 2f       	mov	r20, r24
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	02 2e       	mov	r0, r18
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <DIO_enuSetPinValue+0x1d6>
    1aac:	88 0f       	add	r24, r24
    1aae:	99 1f       	adc	r25, r25
    1ab0:	0a 94       	dec	r0
    1ab2:	e2 f7       	brpl	.-8      	; 0x1aac <DIO_enuSetPinValue+0x1d2>
    1ab4:	80 95       	com	r24
    1ab6:	84 23       	and	r24, r20
    1ab8:	8c 93       	st	X, r24
    1aba:	8c 91       	ld	r24, X
				break;
		}
	}


	return Local_enuErrorStatus;
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1abe:	2e 96       	adiw	r28, 0x0e	; 14
    1ac0:	0f b6       	in	r0, 0x3f	; 63
    1ac2:	f8 94       	cli
    1ac4:	de bf       	out	0x3e, r29	; 62
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	cd bf       	out	0x3d, r28	; 61
    1aca:	cf 91       	pop	r28
    1acc:	df 91       	pop	r29
    1ace:	08 95       	ret

00001ad0 <DIO_enuSetPortValue>:
 * Arguments:
 * 				first Argument: Copy_u8Port, 			options (DIO_u8_PORTA, DIO_u8_PORTB, DIO_u8_PORTC, DIO_u8_PORTD)
 * 				second Argument: Copy_u8Value, 			options (any macro refer to hixa_number)
 * Return:	Error Status -----> DIO_OK , DIO_NOK
 */
DIO_tenuErrorStatus DIO_enuSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value){
    1ad0:	df 93       	push	r29
    1ad2:	cf 93       	push	r28
    1ad4:	00 d0       	rcall	.+0      	; 0x1ad6 <DIO_enuSetPortValue+0x6>
    1ad6:	00 d0       	rcall	.+0      	; 0x1ad8 <DIO_enuSetPortValue+0x8>
    1ad8:	0f 92       	push	r0
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
    1ade:	8a 83       	std	Y+2, r24	; 0x02
    1ae0:	6b 83       	std	Y+3, r22	; 0x03
	DIO_tenuErrorStatus Local_enumErrorStatus = DIO_OK;
    1ae2:	19 82       	std	Y+1, r1	; 0x01
	/*check arguments*/
	/*if((Copy_u8Port > DIO_u8_PORTD) || (Copy_u8Value > DIO_u8_HIGH)){
		Local_enumErrorStatus = DIO_NOK;
	}
	else{*/
		switch (Copy_u8Port){
    1ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	3d 83       	std	Y+5, r19	; 0x05
    1aec:	2c 83       	std	Y+4, r18	; 0x04
    1aee:	8c 81       	ldd	r24, Y+4	; 0x04
    1af0:	9d 81       	ldd	r25, Y+5	; 0x05
    1af2:	81 30       	cpi	r24, 0x01	; 1
    1af4:	91 05       	cpc	r25, r1
    1af6:	d1 f0       	breq	.+52     	; 0x1b2c <DIO_enuSetPortValue+0x5c>
    1af8:	2c 81       	ldd	r18, Y+4	; 0x04
    1afa:	3d 81       	ldd	r19, Y+5	; 0x05
    1afc:	22 30       	cpi	r18, 0x02	; 2
    1afe:	31 05       	cpc	r19, r1
    1b00:	2c f4       	brge	.+10     	; 0x1b0c <DIO_enuSetPortValue+0x3c>
    1b02:	8c 81       	ldd	r24, Y+4	; 0x04
    1b04:	9d 81       	ldd	r25, Y+5	; 0x05
    1b06:	00 97       	sbiw	r24, 0x00	; 0
    1b08:	61 f0       	breq	.+24     	; 0x1b22 <DIO_enuSetPortValue+0x52>
    1b0a:	1e c0       	rjmp	.+60     	; 0x1b48 <DIO_enuSetPortValue+0x78>
    1b0c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b0e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b10:	22 30       	cpi	r18, 0x02	; 2
    1b12:	31 05       	cpc	r19, r1
    1b14:	81 f0       	breq	.+32     	; 0x1b36 <DIO_enuSetPortValue+0x66>
    1b16:	8c 81       	ldd	r24, Y+4	; 0x04
    1b18:	9d 81       	ldd	r25, Y+5	; 0x05
    1b1a:	83 30       	cpi	r24, 0x03	; 3
    1b1c:	91 05       	cpc	r25, r1
    1b1e:	81 f0       	breq	.+32     	; 0x1b40 <DIO_enuSetPortValue+0x70>
    1b20:	13 c0       	rjmp	.+38     	; 0x1b48 <DIO_enuSetPortValue+0x78>
			case DIO_u8_PORTA:		DIO_u8_PORTA_REG = Copy_u8Value;		break;
    1b22:	eb e3       	ldi	r30, 0x3B	; 59
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	80 83       	st	Z, r24
    1b2a:	0e c0       	rjmp	.+28     	; 0x1b48 <DIO_enuSetPortValue+0x78>
			case DIO_u8_PORTB:		DIO_u8_PORTB_REG = Copy_u8Value;		break;
    1b2c:	e8 e3       	ldi	r30, 0x38	; 56
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	80 83       	st	Z, r24
    1b34:	09 c0       	rjmp	.+18     	; 0x1b48 <DIO_enuSetPortValue+0x78>
			case DIO_u8_PORTC:		DIO_u8_PORTC_REG = Copy_u8Value;		break;
    1b36:	e5 e3       	ldi	r30, 0x35	; 53
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3c:	80 83       	st	Z, r24
    1b3e:	04 c0       	rjmp	.+8      	; 0x1b48 <DIO_enuSetPortValue+0x78>
			case DIO_u8_PORTD:		DIO_u8_PORTD_REG = Copy_u8Value;		break;
    1b40:	e2 e3       	ldi	r30, 0x32	; 50
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	80 83       	st	Z, r24
		}
	//}
	return Local_enumErrorStatus;
    1b48:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b4a:	0f 90       	pop	r0
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	cf 91       	pop	r28
    1b56:	df 91       	pop	r29
    1b58:	08 95       	ret

00001b5a <DIO_enuGetPinValue>:
 * 				first Argument: Copy_u8Port, 			options (DIO_u8_PORTA, DIO_u8_PORTB, DIO_u8_PORTC, DIO_u8_PORTD)
 * 				second Argument: Copy_u8Pin,			options (from DIO_u8_PIN0 to DIO_u8_PIN7)
 * 				third Argument: variable address to store PIN value
 * Return:	Error Status -----> DIO_OK , DIO_NOK
 */
DIO_tenuErrorStatus DIO_enuGetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Add_pu8PinValue) {
    1b5a:	df 93       	push	r29
    1b5c:	cf 93       	push	r28
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
    1b62:	27 97       	sbiw	r28, 0x07	; 7
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	f8 94       	cli
    1b68:	de bf       	out	0x3e, r29	; 62
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	cd bf       	out	0x3d, r28	; 61
    1b6e:	8a 83       	std	Y+2, r24	; 0x02
    1b70:	6b 83       	std	Y+3, r22	; 0x03
    1b72:	5d 83       	std	Y+5, r21	; 0x05
    1b74:	4c 83       	std	Y+4, r20	; 0x04
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
    1b76:	19 82       	std	Y+1, r1	; 0x01

	/* check arguments */
	if((Copy_u8Port > DIO_u8_PORTD) || (Copy_u8Pin > DIO_u8_PIN7) || (Add_pu8PinValue  == NULL)) {
    1b78:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7a:	84 30       	cpi	r24, 0x04	; 4
    1b7c:	38 f4       	brcc	.+14     	; 0x1b8c <DIO_enuGetPinValue+0x32>
    1b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b80:	88 30       	cpi	r24, 0x08	; 8
    1b82:	20 f4       	brcc	.+8      	; 0x1b8c <DIO_enuGetPinValue+0x32>
    1b84:	8c 81       	ldd	r24, Y+4	; 0x04
    1b86:	9d 81       	ldd	r25, Y+5	; 0x05
    1b88:	00 97       	sbiw	r24, 0x00	; 0
    1b8a:	19 f4       	brne	.+6      	; 0x1b92 <DIO_enuGetPinValue+0x38>
		Local_enuErrorStatus = DIO_NOK;
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	89 83       	std	Y+1, r24	; 0x01
    1b90:	70 c0       	rjmp	.+224    	; 0x1c72 <DIO_enuGetPinValue+0x118>
	} else {
		/*implementation */
		switch(Copy_u8Port)
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	28 2f       	mov	r18, r24
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	3f 83       	std	Y+7, r19	; 0x07
    1b9a:	2e 83       	std	Y+6, r18	; 0x06
    1b9c:	4e 81       	ldd	r20, Y+6	; 0x06
    1b9e:	5f 81       	ldd	r21, Y+7	; 0x07
    1ba0:	41 30       	cpi	r20, 0x01	; 1
    1ba2:	51 05       	cpc	r21, r1
    1ba4:	59 f1       	breq	.+86     	; 0x1bfc <DIO_enuGetPinValue+0xa2>
    1ba6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba8:	9f 81       	ldd	r25, Y+7	; 0x07
    1baa:	82 30       	cpi	r24, 0x02	; 2
    1bac:	91 05       	cpc	r25, r1
    1bae:	34 f4       	brge	.+12     	; 0x1bbc <DIO_enuGetPinValue+0x62>
    1bb0:	2e 81       	ldd	r18, Y+6	; 0x06
    1bb2:	3f 81       	ldd	r19, Y+7	; 0x07
    1bb4:	21 15       	cp	r18, r1
    1bb6:	31 05       	cpc	r19, r1
    1bb8:	69 f0       	breq	.+26     	; 0x1bd4 <DIO_enuGetPinValue+0x7a>
    1bba:	5b c0       	rjmp	.+182    	; 0x1c72 <DIO_enuGetPinValue+0x118>
    1bbc:	4e 81       	ldd	r20, Y+6	; 0x06
    1bbe:	5f 81       	ldd	r21, Y+7	; 0x07
    1bc0:	42 30       	cpi	r20, 0x02	; 2
    1bc2:	51 05       	cpc	r21, r1
    1bc4:	79 f1       	breq	.+94     	; 0x1c24 <DIO_enuGetPinValue+0xca>
    1bc6:	8e 81       	ldd	r24, Y+6	; 0x06
    1bc8:	9f 81       	ldd	r25, Y+7	; 0x07
    1bca:	83 30       	cpi	r24, 0x03	; 3
    1bcc:	91 05       	cpc	r25, r1
    1bce:	09 f4       	brne	.+2      	; 0x1bd2 <DIO_enuGetPinValue+0x78>
    1bd0:	3d c0       	rjmp	.+122    	; 0x1c4c <DIO_enuGetPinValue+0xf2>
    1bd2:	4f c0       	rjmp	.+158    	; 0x1c72 <DIO_enuGetPinValue+0x118>
		{
			case DIO_u8_PORTA:
				*Add_pu8PinValue = (DIO_u8_PINA_REG >> Copy_u8Pin) & 0x01;
    1bd4:	e9 e3       	ldi	r30, 0x39	; 57
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	80 81       	ld	r24, Z
    1bda:	28 2f       	mov	r18, r24
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	88 2f       	mov	r24, r24
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	a9 01       	movw	r20, r18
    1be6:	02 c0       	rjmp	.+4      	; 0x1bec <DIO_enuGetPinValue+0x92>
    1be8:	55 95       	asr	r21
    1bea:	47 95       	ror	r20
    1bec:	8a 95       	dec	r24
    1bee:	e2 f7       	brpl	.-8      	; 0x1be8 <DIO_enuGetPinValue+0x8e>
    1bf0:	ca 01       	movw	r24, r20
    1bf2:	81 70       	andi	r24, 0x01	; 1
    1bf4:	ec 81       	ldd	r30, Y+4	; 0x04
    1bf6:	fd 81       	ldd	r31, Y+5	; 0x05
    1bf8:	80 83       	st	Z, r24
    1bfa:	3b c0       	rjmp	.+118    	; 0x1c72 <DIO_enuGetPinValue+0x118>
				break;

			case DIO_u8_PORTB:
				*Add_pu8PinValue = (DIO_u8_PINB_REG >> Copy_u8Pin) & 0x01;
    1bfc:	e6 e3       	ldi	r30, 0x36	; 54
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	28 2f       	mov	r18, r24
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	8b 81       	ldd	r24, Y+3	; 0x03
    1c08:	88 2f       	mov	r24, r24
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	a9 01       	movw	r20, r18
    1c0e:	02 c0       	rjmp	.+4      	; 0x1c14 <DIO_enuGetPinValue+0xba>
    1c10:	55 95       	asr	r21
    1c12:	47 95       	ror	r20
    1c14:	8a 95       	dec	r24
    1c16:	e2 f7       	brpl	.-8      	; 0x1c10 <DIO_enuGetPinValue+0xb6>
    1c18:	ca 01       	movw	r24, r20
    1c1a:	81 70       	andi	r24, 0x01	; 1
    1c1c:	ec 81       	ldd	r30, Y+4	; 0x04
    1c1e:	fd 81       	ldd	r31, Y+5	; 0x05
    1c20:	80 83       	st	Z, r24
    1c22:	27 c0       	rjmp	.+78     	; 0x1c72 <DIO_enuGetPinValue+0x118>
				break;

			case DIO_u8_PORTC:
				*Add_pu8PinValue = (DIO_u8_PINC_REG >> Copy_u8Pin) & 0x01;
    1c24:	e3 e3       	ldi	r30, 0x33	; 51
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	28 2f       	mov	r18, r24
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c30:	88 2f       	mov	r24, r24
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	a9 01       	movw	r20, r18
    1c36:	02 c0       	rjmp	.+4      	; 0x1c3c <DIO_enuGetPinValue+0xe2>
    1c38:	55 95       	asr	r21
    1c3a:	47 95       	ror	r20
    1c3c:	8a 95       	dec	r24
    1c3e:	e2 f7       	brpl	.-8      	; 0x1c38 <DIO_enuGetPinValue+0xde>
    1c40:	ca 01       	movw	r24, r20
    1c42:	81 70       	andi	r24, 0x01	; 1
    1c44:	ec 81       	ldd	r30, Y+4	; 0x04
    1c46:	fd 81       	ldd	r31, Y+5	; 0x05
    1c48:	80 83       	st	Z, r24
    1c4a:	13 c0       	rjmp	.+38     	; 0x1c72 <DIO_enuGetPinValue+0x118>
				break;

			case DIO_u8_PORTD:
				*Add_pu8PinValue = (DIO_u8_PIND_REG >> Copy_u8Pin) & 0x01;
    1c4c:	e0 e3       	ldi	r30, 0x30	; 48
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	28 2f       	mov	r18, r24
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	88 2f       	mov	r24, r24
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	a9 01       	movw	r20, r18
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <DIO_enuGetPinValue+0x10a>
    1c60:	55 95       	asr	r21
    1c62:	47 95       	ror	r20
    1c64:	8a 95       	dec	r24
    1c66:	e2 f7       	brpl	.-8      	; 0x1c60 <DIO_enuGetPinValue+0x106>
    1c68:	ca 01       	movw	r24, r20
    1c6a:	81 70       	andi	r24, 0x01	; 1
    1c6c:	ec 81       	ldd	r30, Y+4	; 0x04
    1c6e:	fd 81       	ldd	r31, Y+5	; 0x05
    1c70:	80 83       	st	Z, r24
				break;
		}
	}
	return Local_enuErrorStatus;
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c74:	27 96       	adiw	r28, 0x07	; 7
    1c76:	0f b6       	in	r0, 0x3f	; 63
    1c78:	f8 94       	cli
    1c7a:	de bf       	out	0x3e, r29	; 62
    1c7c:	0f be       	out	0x3f, r0	; 63
    1c7e:	cd bf       	out	0x3d, r28	; 61
    1c80:	cf 91       	pop	r28
    1c82:	df 91       	pop	r29
    1c84:	08 95       	ret

00001c86 <DIO_enuGetPortValue>:
 * Arguments:
 * 				first Argument: Copy_u8Port, 			options (DIO_u8_PORTA, DIO_u8_PORTB, DIO_u8_PORTC, DIO_u8_PORTD)
 * 				second Argument: variable address to store PORT value
 * Return:	Error Status -----> DIO_OK , DIO_NOK
 */
DIO_tenuErrorStatus DIO_enuGetPortValue(u8 Copy_u8Port, u8 *Add_pu8PortValue){
    1c86:	df 93       	push	r29
    1c88:	cf 93       	push	r28
    1c8a:	00 d0       	rcall	.+0      	; 0x1c8c <DIO_enuGetPortValue+0x6>
    1c8c:	00 d0       	rcall	.+0      	; 0x1c8e <DIO_enuGetPortValue+0x8>
    1c8e:	00 d0       	rcall	.+0      	; 0x1c90 <DIO_enuGetPortValue+0xa>
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
    1c94:	8a 83       	std	Y+2, r24	; 0x02
    1c96:	7c 83       	std	Y+4, r23	; 0x04
    1c98:	6b 83       	std	Y+3, r22	; 0x03
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
    1c9a:	19 82       	std	Y+1, r1	; 0x01
			switch(Copy_u8Port) {
    1c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9e:	28 2f       	mov	r18, r24
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	3e 83       	std	Y+6, r19	; 0x06
    1ca4:	2d 83       	std	Y+5, r18	; 0x05
    1ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca8:	9e 81       	ldd	r25, Y+6	; 0x06
    1caa:	81 30       	cpi	r24, 0x01	; 1
    1cac:	91 05       	cpc	r25, r1
    1cae:	e1 f0       	breq	.+56     	; 0x1ce8 <DIO_enuGetPortValue+0x62>
    1cb0:	2d 81       	ldd	r18, Y+5	; 0x05
    1cb2:	3e 81       	ldd	r19, Y+6	; 0x06
    1cb4:	22 30       	cpi	r18, 0x02	; 2
    1cb6:	31 05       	cpc	r19, r1
    1cb8:	2c f4       	brge	.+10     	; 0x1cc4 <DIO_enuGetPortValue+0x3e>
    1cba:	8d 81       	ldd	r24, Y+5	; 0x05
    1cbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cbe:	00 97       	sbiw	r24, 0x00	; 0
    1cc0:	61 f0       	breq	.+24     	; 0x1cda <DIO_enuGetPortValue+0x54>
    1cc2:	26 c0       	rjmp	.+76     	; 0x1d10 <DIO_enuGetPortValue+0x8a>
    1cc4:	2d 81       	ldd	r18, Y+5	; 0x05
    1cc6:	3e 81       	ldd	r19, Y+6	; 0x06
    1cc8:	22 30       	cpi	r18, 0x02	; 2
    1cca:	31 05       	cpc	r19, r1
    1ccc:	a1 f0       	breq	.+40     	; 0x1cf6 <DIO_enuGetPortValue+0x70>
    1cce:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd2:	83 30       	cpi	r24, 0x03	; 3
    1cd4:	91 05       	cpc	r25, r1
    1cd6:	b1 f0       	breq	.+44     	; 0x1d04 <DIO_enuGetPortValue+0x7e>
    1cd8:	1b c0       	rjmp	.+54     	; 0x1d10 <DIO_enuGetPortValue+0x8a>
				case DIO_u8_PORTA:
					*Add_pu8PortValue = DIO_u8_PINA_REG;
    1cda:	e9 e3       	ldi	r30, 0x39	; 57
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ce2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ce4:	80 83       	st	Z, r24
    1ce6:	14 c0       	rjmp	.+40     	; 0x1d10 <DIO_enuGetPortValue+0x8a>
					break;

				case DIO_u8_PORTB:
					*Add_pu8PortValue = DIO_u8_PINB_REG;
    1ce8:	e6 e3       	ldi	r30, 0x36	; 54
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
    1cee:	eb 81       	ldd	r30, Y+3	; 0x03
    1cf0:	fc 81       	ldd	r31, Y+4	; 0x04
    1cf2:	80 83       	st	Z, r24
    1cf4:	0d c0       	rjmp	.+26     	; 0x1d10 <DIO_enuGetPortValue+0x8a>
					break;

				case DIO_u8_PORTC:
					*Add_pu8PortValue = DIO_u8_PINC_REG;
    1cf6:	e3 e3       	ldi	r30, 0x33	; 51
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	eb 81       	ldd	r30, Y+3	; 0x03
    1cfe:	fc 81       	ldd	r31, Y+4	; 0x04
    1d00:	80 83       	st	Z, r24
    1d02:	06 c0       	rjmp	.+12     	; 0x1d10 <DIO_enuGetPortValue+0x8a>
					break;

				case DIO_u8_PORTD:
					*Add_pu8PortValue = DIO_u8_PIND_REG;
    1d04:	e0 e3       	ldi	r30, 0x30	; 48
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d0c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d0e:	80 83       	st	Z, r24
					break;
			}
	return Local_enuErrorStatus;
    1d10:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d12:	26 96       	adiw	r28, 0x06	; 6
    1d14:	0f b6       	in	r0, 0x3f	; 63
    1d16:	f8 94       	cli
    1d18:	de bf       	out	0x3e, r29	; 62
    1d1a:	0f be       	out	0x3f, r0	; 63
    1d1c:	cd bf       	out	0x3d, r28	; 61
    1d1e:	cf 91       	pop	r28
    1d20:	df 91       	pop	r29
    1d22:	08 95       	ret

00001d24 <ADC_vidConfigure>:
 * 																			ADC_u8_PRESCALER_8, ADC_u8_PRESCALER_16,
 * 																			ADC_u8_PRESCALER_32, ADC_u8_PRESCALER_64,
 * 																			ADC_u8_PRESCALER_128)
 * Return:	void
 */
void ADC_vidConfigure (u8 Copy_u8voltageReference, u8 Copy_u8adjustResult, u8 Copy_u8channel, u8 Copy_u8prescaler){
    1d24:	df 93       	push	r29
    1d26:	cf 93       	push	r28
    1d28:	00 d0       	rcall	.+0      	; 0x1d2a <ADC_vidConfigure+0x6>
    1d2a:	00 d0       	rcall	.+0      	; 0x1d2c <ADC_vidConfigure+0x8>
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    1d30:	89 83       	std	Y+1, r24	; 0x01
    1d32:	6a 83       	std	Y+2, r22	; 0x02
    1d34:	4b 83       	std	Y+3, r20	; 0x03
    1d36:	2c 83       	std	Y+4, r18	; 0x04
	/* configure voltage reference */
	ADC_u8_ADMUX_REG |= Copy_u8voltageReference;
    1d38:	a7 e2       	ldi	r26, 0x27	; 39
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	e7 e2       	ldi	r30, 0x27	; 39
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	90 81       	ld	r25, Z
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
    1d44:	89 2b       	or	r24, r25
    1d46:	8c 93       	st	X, r24
	/* configure ADC channel */
	ADC_u8_ADMUX_REG |= Copy_u8channel;
    1d48:	a7 e2       	ldi	r26, 0x27	; 39
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	e7 e2       	ldi	r30, 0x27	; 39
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	90 81       	ld	r25, Z
    1d52:	8b 81       	ldd	r24, Y+3	; 0x03
    1d54:	89 2b       	or	r24, r25
    1d56:	8c 93       	st	X, r24
	/* enable ADC */
	ADC_u8_ADCSRA_REG |= ADC_u8_ADC_Enable;
    1d58:	a6 e2       	ldi	r26, 0x26	; 38
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	e6 e2       	ldi	r30, 0x26	; 38
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	80 68       	ori	r24, 0x80	; 128
    1d64:	8c 93       	st	X, r24
	/* configure adjust result */
	if(Copy_u8adjustResult == ADC_u8_LEFT_ADJUST_RESULT){
    1d66:	8a 81       	ldd	r24, Y+2	; 0x02
    1d68:	80 32       	cpi	r24, 0x20	; 32
    1d6a:	39 f4       	brne	.+14     	; 0x1d7a <ADC_vidConfigure+0x56>
		ADC_u8_ADMUX_REG |= ADC_u8_LEFT_ADJUST_RESULT;
    1d6c:	a7 e2       	ldi	r26, 0x27	; 39
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	e7 e2       	ldi	r30, 0x27	; 39
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	80 62       	ori	r24, 0x20	; 32
    1d78:	8c 93       	st	X, r24
	}
	/* enable interrupt */
//	ADC_u8_ADCSRA_REG |= ADC_u8_INTERRUPT_ENABLE;
//	GINT_vidEnable();
	/* configure ADC clock */
	ADC_u8_ADCSRA_REG |= Copy_u8prescaler;
    1d7a:	a6 e2       	ldi	r26, 0x26	; 38
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	e6 e2       	ldi	r30, 0x26	; 38
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	90 81       	ld	r25, Z
    1d84:	8c 81       	ldd	r24, Y+4	; 0x04
    1d86:	89 2b       	or	r24, r25
    1d88:	8c 93       	st	X, r24
}
    1d8a:	0f 90       	pop	r0
    1d8c:	0f 90       	pop	r0
    1d8e:	0f 90       	pop	r0
    1d90:	0f 90       	pop	r0
    1d92:	cf 91       	pop	r28
    1d94:	df 91       	pop	r29
    1d96:	08 95       	ret

00001d98 <ADC_enuConversionResult>:
 * Description: read the conversion result and store it in a address
 * Arguments: Arguments:
 * 				first Argument: u16 *Add_pu16conversionValue , 			options (variable address to store PORT value)
 * Return:	void
 */
void ADC_enuConversionResult (u16 *Add_pu16conversionValue){
    1d98:	df 93       	push	r29
    1d9a:	cf 93       	push	r28
    1d9c:	00 d0       	rcall	.+0      	; 0x1d9e <ADC_enuConversionResult+0x6>
    1d9e:	cd b7       	in	r28, 0x3d	; 61
    1da0:	de b7       	in	r29, 0x3e	; 62
    1da2:	9a 83       	std	Y+2, r25	; 0x02
    1da4:	89 83       	std	Y+1, r24	; 0x01
	ADC_u8_ADCSRA_REG |= ADC_u8_START_CONVERSION;
    1da6:	a6 e2       	ldi	r26, 0x26	; 38
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	e6 e2       	ldi	r30, 0x26	; 38
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	80 64       	ori	r24, 0x40	; 64
    1db2:	8c 93       	st	X, r24
	while(ADC_u8_ADC_FLAG == 1);
    1db4:	e6 e2       	ldi	r30, 0x26	; 38
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	88 2f       	mov	r24, r24
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	80 71       	andi	r24, 0x10	; 16
    1dc0:	90 70       	andi	r25, 0x00	; 0
    1dc2:	95 95       	asr	r25
    1dc4:	87 95       	ror	r24
    1dc6:	95 95       	asr	r25
    1dc8:	87 95       	ror	r24
    1dca:	95 95       	asr	r25
    1dcc:	87 95       	ror	r24
    1dce:	95 95       	asr	r25
    1dd0:	87 95       	ror	r24
    1dd2:	81 30       	cpi	r24, 0x01	; 1
    1dd4:	91 05       	cpc	r25, r1
    1dd6:	71 f3       	breq	.-36     	; 0x1db4 <ADC_enuConversionResult+0x1c>
	ADC_u8_ADCSRA_REG |= ADC_u8_ADIF;
    1dd8:	a6 e2       	ldi	r26, 0x26	; 38
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	e6 e2       	ldi	r30, 0x26	; 38
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	80 61       	ori	r24, 0x10	; 16
    1de4:	8c 93       	st	X, r24
//	*Add_pu16conversionValue = (u16)((ADC_u8_ADCL_REG) | (ADC_u8_ADCH_REG << 8));
	*Add_pu16conversionValue = ADC_u8_ADCL_REG;
    1de6:	e4 e2       	ldi	r30, 0x24	; 36
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	88 2f       	mov	r24, r24
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	e9 81       	ldd	r30, Y+1	; 0x01
    1df2:	fa 81       	ldd	r31, Y+2	; 0x02
    1df4:	91 83       	std	Z+1, r25	; 0x01
    1df6:	80 83       	st	Z, r24
	*Add_pu16conversionValue |= (ADC_u8_ADCH_REG << 8);
    1df8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dfa:	fa 81       	ldd	r31, Y+2	; 0x02
    1dfc:	20 81       	ld	r18, Z
    1dfe:	31 81       	ldd	r19, Z+1	; 0x01
    1e00:	e5 e2       	ldi	r30, 0x25	; 37
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	88 2f       	mov	r24, r24
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	98 2f       	mov	r25, r24
    1e0c:	88 27       	eor	r24, r24
    1e0e:	82 2b       	or	r24, r18
    1e10:	93 2b       	or	r25, r19
    1e12:	e9 81       	ldd	r30, Y+1	; 0x01
    1e14:	fa 81       	ldd	r31, Y+2	; 0x02
    1e16:	91 83       	std	Z+1, r25	; 0x01
    1e18:	80 83       	st	Z, r24
}
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	cf 91       	pop	r28
    1e20:	df 91       	pop	r29
    1e22:	08 95       	ret

00001e24 <STEPPER_vidInit>:
 * Name: STEPPER_vidInit
 * Description: initialize the stepper motor pins
 * Arguments: void
 * Return:	void
 */
void STEPPER_vidInit(void){
    1e24:	df 93       	push	r29
    1e26:	cf 93       	push	r28
    1e28:	cd b7       	in	r28, 0x3d	; 61
    1e2a:	de b7       	in	r29, 0x3e	; 62
	DIO_vidInit();
    1e2c:	0e 94 47 0c 	call	0x188e	; 0x188e <DIO_vidInit>
}
    1e30:	cf 91       	pop	r28
    1e32:	df 91       	pop	r29
    1e34:	08 95       	ret

00001e36 <STEPPER_enuFullStep>:
 * */


STEPPER_tenuErrorStatus STEPPER_enuFullStep(f32 Copy_f32Angle, u8 Copy_u8Direction,
											u8 Copy_u8BluePort, u8 Copy_u8BluePin, u8 Copy_u8PinkPort, u8 Copy_u8PinkPin,
											u8 Copy_u8YellowPort, u8 Copy_u8YellowPin, u8 Copy_u8OrangePort, u8 Copy_u8OrangePin){
    1e36:	8f 92       	push	r8
    1e38:	af 92       	push	r10
    1e3a:	cf 92       	push	r12
    1e3c:	ef 92       	push	r14
    1e3e:	0f 93       	push	r16
    1e40:	df 93       	push	r29
    1e42:	cf 93       	push	r28
    1e44:	cd b7       	in	r28, 0x3d	; 61
    1e46:	de b7       	in	r29, 0x3e	; 62
    1e48:	aa 97       	sbiw	r28, 0x2a	; 42
    1e4a:	0f b6       	in	r0, 0x3f	; 63
    1e4c:	f8 94       	cli
    1e4e:	de bf       	out	0x3e, r29	; 62
    1e50:	0f be       	out	0x3f, r0	; 63
    1e52:	cd bf       	out	0x3d, r28	; 61
    1e54:	6e 8f       	std	Y+30, r22	; 0x1e
    1e56:	7f 8f       	std	Y+31, r23	; 0x1f
    1e58:	88 a3       	std	Y+32, r24	; 0x20
    1e5a:	99 a3       	std	Y+33, r25	; 0x21
    1e5c:	4a a3       	std	Y+34, r20	; 0x22
    1e5e:	2b a3       	std	Y+35, r18	; 0x23
    1e60:	0c a3       	std	Y+36, r16	; 0x24
    1e62:	ed a2       	std	Y+37, r14	; 0x25
    1e64:	ce a2       	std	Y+38, r12	; 0x26
    1e66:	af a2       	std	Y+39, r10	; 0x27
    1e68:	88 a6       	std	Y+40, r8	; 0x28

	STEPPER_tenuErrorStatus Local_enuErrorStatus = STEPPER_OK;
    1e6a:	1d 8e       	std	Y+29, r1	; 0x1d

	switch(Copy_u8Direction){
    1e6c:	8a a1       	ldd	r24, Y+34	; 0x22
    1e6e:	28 2f       	mov	r18, r24
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	3a a7       	std	Y+42, r19	; 0x2a
    1e74:	29 a7       	std	Y+41, r18	; 0x29
    1e76:	89 a5       	ldd	r24, Y+41	; 0x29
    1e78:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e7a:	00 97       	sbiw	r24, 0x00	; 0
    1e7c:	39 f0       	breq	.+14     	; 0x1e8c <STEPPER_enuFullStep+0x56>
    1e7e:	29 a5       	ldd	r18, Y+41	; 0x29
    1e80:	3a a5       	ldd	r19, Y+42	; 0x2a
    1e82:	21 30       	cpi	r18, 0x01	; 1
    1e84:	31 05       	cpc	r19, r1
    1e86:	09 f4       	brne	.+2      	; 0x1e8a <STEPPER_enuFullStep+0x54>
    1e88:	eb c0       	rjmp	.+470    	; 0x2060 <STEPPER_enuFullStep+0x22a>
    1e8a:	d3 c1       	rjmp	.+934    	; 0x2232 <STEPPER_enuFullStep+0x3fc>
		case STEPPER_u8_CLOCKWISE:
			if(Copy_f32Angle == STEPPER_f32_0DEGREE){
    1e8c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1e8e:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1e90:	88 a1       	ldd	r24, Y+32	; 0x20
    1e92:	99 a1       	ldd	r25, Y+33	; 0x21
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	40 e0       	ldi	r20, 0x00	; 0
    1e9a:	50 e0       	ldi	r21, 0x00	; 0
    1e9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    1ea0:	88 23       	and	r24, r24
    1ea2:	a9 f4       	brne	.+42     	; 0x1ece <STEPPER_enuFullStep+0x98>
				DIO_enuSetPinValue(Copy_u8BluePort, Copy_u8BluePin, DIO_u8_LOW);
    1ea4:	8b a1       	ldd	r24, Y+35	; 0x23
    1ea6:	6c a1       	ldd	r22, Y+36	; 0x24
    1ea8:	40 e0       	ldi	r20, 0x00	; 0
    1eaa:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
				DIO_enuSetPinValue(Copy_u8PinkPort, Copy_u8PinkPin, DIO_u8_HIGH);
    1eae:	8d a1       	ldd	r24, Y+37	; 0x25
    1eb0:	6e a1       	ldd	r22, Y+38	; 0x26
    1eb2:	41 e0       	ldi	r20, 0x01	; 1
    1eb4:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
				DIO_enuSetPinValue(Copy_u8YellowPort, Copy_u8YellowPin, DIO_u8_HIGH);
    1eb8:	8f a1       	ldd	r24, Y+39	; 0x27
    1eba:	68 a5       	ldd	r22, Y+40	; 0x28
    1ebc:	41 e0       	ldi	r20, 0x01	; 1
    1ebe:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
				DIO_enuSetPinValue(Copy_u8OrangePort, Copy_u8OrangePin, DIO_u8_LOW);
    1ec2:	8c a9       	ldd	r24, Y+52	; 0x34
    1ec4:	6d a9       	ldd	r22, Y+53	; 0x35
    1ec6:	40 e0       	ldi	r20, 0x00	; 0
    1ec8:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
    1ecc:	b2 c1       	rjmp	.+868    	; 0x2232 <STEPPER_enuFullStep+0x3fc>
			} else if(Copy_f32Angle == STEPPER_f32_90DEGREE){
    1ece:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1ed0:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1ed2:	88 a1       	ldd	r24, Y+32	; 0x20
    1ed4:	99 a1       	ldd	r25, Y+33	; 0x21
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	44 eb       	ldi	r20, 0xB4	; 180
    1edc:	52 e4       	ldi	r21, 0x42	; 66
    1ede:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    1ee2:	88 23       	and	r24, r24
    1ee4:	a9 f4       	brne	.+42     	; 0x1f10 <STEPPER_enuFullStep+0xda>
				DIO_enuSetPinValue(Copy_u8BluePort, Copy_u8BluePin, DIO_u8_LOW);
    1ee6:	8b a1       	ldd	r24, Y+35	; 0x23
    1ee8:	6c a1       	ldd	r22, Y+36	; 0x24
    1eea:	40 e0       	ldi	r20, 0x00	; 0
    1eec:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
				DIO_enuSetPinValue(Copy_u8PinkPort, Copy_u8PinkPin, DIO_u8_LOW);
    1ef0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ef2:	6e a1       	ldd	r22, Y+38	; 0x26
    1ef4:	40 e0       	ldi	r20, 0x00	; 0
    1ef6:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
				DIO_enuSetPinValue(Copy_u8YellowPort, Copy_u8YellowPin, DIO_u8_HIGH);
    1efa:	8f a1       	ldd	r24, Y+39	; 0x27
    1efc:	68 a5       	ldd	r22, Y+40	; 0x28
    1efe:	41 e0       	ldi	r20, 0x01	; 1
    1f00:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
				DIO_enuSetPinValue(Copy_u8OrangePort, Copy_u8OrangePin, DIO_u8_HIGH);
    1f04:	8c a9       	ldd	r24, Y+52	; 0x34
    1f06:	6d a9       	ldd	r22, Y+53	; 0x35
    1f08:	41 e0       	ldi	r20, 0x01	; 1
    1f0a:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
    1f0e:	91 c1       	rjmp	.+802    	; 0x2232 <STEPPER_enuFullStep+0x3fc>
			} else if(Copy_f32Angle == STEPPER_f32_180DEGREE){
    1f10:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1f12:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1f14:	88 a1       	ldd	r24, Y+32	; 0x20
    1f16:	99 a1       	ldd	r25, Y+33	; 0x21
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	44 e3       	ldi	r20, 0x34	; 52
    1f1e:	53 e4       	ldi	r21, 0x43	; 67
    1f20:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    1f24:	88 23       	and	r24, r24
    1f26:	09 f0       	breq	.+2      	; 0x1f2a <STEPPER_enuFullStep+0xf4>
    1f28:	84 c1       	rjmp	.+776    	; 0x2232 <STEPPER_enuFullStep+0x3fc>
				DIO_enuSetPinValue(Copy_u8BluePort, Copy_u8BluePin, DIO_u8_LOW);
    1f2a:	8b a1       	ldd	r24, Y+35	; 0x23
    1f2c:	6c a1       	ldd	r22, Y+36	; 0x24
    1f2e:	40 e0       	ldi	r20, 0x00	; 0
    1f30:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
				DIO_enuSetPinValue(Copy_u8PinkPort, Copy_u8PinkPin, DIO_u8_LOW);
    1f34:	8d a1       	ldd	r24, Y+37	; 0x25
    1f36:	6e a1       	ldd	r22, Y+38	; 0x26
    1f38:	40 e0       	ldi	r20, 0x00	; 0
    1f3a:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
				DIO_enuSetPinValue(Copy_u8YellowPort, Copy_u8YellowPin, DIO_u8_HIGH);
    1f3e:	8f a1       	ldd	r24, Y+39	; 0x27
    1f40:	68 a5       	ldd	r22, Y+40	; 0x28
    1f42:	41 e0       	ldi	r20, 0x01	; 1
    1f44:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
				DIO_enuSetPinValue(Copy_u8OrangePort, Copy_u8OrangePin, DIO_u8_HIGH);
    1f48:	8c a9       	ldd	r24, Y+52	; 0x34
    1f4a:	6d a9       	ldd	r22, Y+53	; 0x35
    1f4c:	41 e0       	ldi	r20, 0x01	; 1
    1f4e:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	a0 e2       	ldi	r26, 0x20	; 32
    1f58:	b1 e4       	ldi	r27, 0x41	; 65
    1f5a:	89 8f       	std	Y+25, r24	; 0x19
    1f5c:	9a 8f       	std	Y+26, r25	; 0x1a
    1f5e:	ab 8f       	std	Y+27, r26	; 0x1b
    1f60:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f62:	69 8d       	ldd	r22, Y+25	; 0x19
    1f64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	4a e7       	ldi	r20, 0x7A	; 122
    1f70:	53 e4       	ldi	r21, 0x43	; 67
    1f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	8d 8b       	std	Y+21, r24	; 0x15
    1f7c:	9e 8b       	std	Y+22, r25	; 0x16
    1f7e:	af 8b       	std	Y+23, r26	; 0x17
    1f80:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f82:	6d 89       	ldd	r22, Y+21	; 0x15
    1f84:	7e 89       	ldd	r23, Y+22	; 0x16
    1f86:	8f 89       	ldd	r24, Y+23	; 0x17
    1f88:	98 8d       	ldd	r25, Y+24	; 0x18
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	40 e8       	ldi	r20, 0x80	; 128
    1f90:	5f e3       	ldi	r21, 0x3F	; 63
    1f92:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1f96:	88 23       	and	r24, r24
    1f98:	2c f4       	brge	.+10     	; 0x1fa4 <STEPPER_enuFullStep+0x16e>
		__ticks = 1;
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	9c 8b       	std	Y+20, r25	; 0x14
    1fa0:	8b 8b       	std	Y+19, r24	; 0x13
    1fa2:	3f c0       	rjmp	.+126    	; 0x2022 <STEPPER_enuFullStep+0x1ec>
	else if (__tmp > 65535)
    1fa4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa8:	8f 89       	ldd	r24, Y+23	; 0x17
    1faa:	98 8d       	ldd	r25, Y+24	; 0x18
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	3f ef       	ldi	r19, 0xFF	; 255
    1fb0:	4f e7       	ldi	r20, 0x7F	; 127
    1fb2:	57 e4       	ldi	r21, 0x47	; 71
    1fb4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1fb8:	18 16       	cp	r1, r24
    1fba:	4c f5       	brge	.+82     	; 0x200e <STEPPER_enuFullStep+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fbc:	69 8d       	ldd	r22, Y+25	; 0x19
    1fbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	40 e2       	ldi	r20, 0x20	; 32
    1fca:	51 e4       	ldi	r21, 0x41	; 65
    1fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	bc 01       	movw	r22, r24
    1fd6:	cd 01       	movw	r24, r26
    1fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	9c 8b       	std	Y+20, r25	; 0x14
    1fe2:	8b 8b       	std	Y+19, r24	; 0x13
    1fe4:	0f c0       	rjmp	.+30     	; 0x2004 <STEPPER_enuFullStep+0x1ce>
    1fe6:	89 e1       	ldi	r24, 0x19	; 25
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	9a 8b       	std	Y+18, r25	; 0x12
    1fec:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fee:	89 89       	ldd	r24, Y+17	; 0x11
    1ff0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ff2:	01 97       	sbiw	r24, 0x01	; 1
    1ff4:	f1 f7       	brne	.-4      	; 0x1ff2 <STEPPER_enuFullStep+0x1bc>
    1ff6:	9a 8b       	std	Y+18, r25	; 0x12
    1ff8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ffa:	8b 89       	ldd	r24, Y+19	; 0x13
    1ffc:	9c 89       	ldd	r25, Y+20	; 0x14
    1ffe:	01 97       	sbiw	r24, 0x01	; 1
    2000:	9c 8b       	std	Y+20, r25	; 0x14
    2002:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2004:	8b 89       	ldd	r24, Y+19	; 0x13
    2006:	9c 89       	ldd	r25, Y+20	; 0x14
    2008:	00 97       	sbiw	r24, 0x00	; 0
    200a:	69 f7       	brne	.-38     	; 0x1fe6 <STEPPER_enuFullStep+0x1b0>
    200c:	14 c0       	rjmp	.+40     	; 0x2036 <STEPPER_enuFullStep+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    200e:	6d 89       	ldd	r22, Y+21	; 0x15
    2010:	7e 89       	ldd	r23, Y+22	; 0x16
    2012:	8f 89       	ldd	r24, Y+23	; 0x17
    2014:	98 8d       	ldd	r25, Y+24	; 0x18
    2016:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	9c 8b       	std	Y+20, r25	; 0x14
    2020:	8b 8b       	std	Y+19, r24	; 0x13
    2022:	8b 89       	ldd	r24, Y+19	; 0x13
    2024:	9c 89       	ldd	r25, Y+20	; 0x14
    2026:	98 8b       	std	Y+16, r25	; 0x10
    2028:	8f 87       	std	Y+15, r24	; 0x0f
    202a:	8f 85       	ldd	r24, Y+15	; 0x0f
    202c:	98 89       	ldd	r25, Y+16	; 0x10
    202e:	01 97       	sbiw	r24, 0x01	; 1
    2030:	f1 f7       	brne	.-4      	; 0x202e <STEPPER_enuFullStep+0x1f8>
    2032:	98 8b       	std	Y+16, r25	; 0x10
    2034:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(10);
				DIO_enuSetPinValue(Copy_u8BluePort, Copy_u8BluePin, DIO_u8_HIGH);
    2036:	8b a1       	ldd	r24, Y+35	; 0x23
    2038:	6c a1       	ldd	r22, Y+36	; 0x24
    203a:	41 e0       	ldi	r20, 0x01	; 1
    203c:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
				DIO_enuSetPinValue(Copy_u8PinkPort, Copy_u8PinkPin, DIO_u8_LOW);
    2040:	8d a1       	ldd	r24, Y+37	; 0x25
    2042:	6e a1       	ldd	r22, Y+38	; 0x26
    2044:	40 e0       	ldi	r20, 0x00	; 0
    2046:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
				DIO_enuSetPinValue(Copy_u8YellowPort, Copy_u8YellowPin, DIO_u8_LOW);
    204a:	8f a1       	ldd	r24, Y+39	; 0x27
    204c:	68 a5       	ldd	r22, Y+40	; 0x28
    204e:	40 e0       	ldi	r20, 0x00	; 0
    2050:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
				DIO_enuSetPinValue(Copy_u8OrangePort, Copy_u8OrangePin, DIO_u8_HIGH);
    2054:	8c a9       	ldd	r24, Y+52	; 0x34
    2056:	6d a9       	ldd	r22, Y+53	; 0x35
    2058:	41 e0       	ldi	r20, 0x01	; 1
    205a:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
    205e:	e9 c0       	rjmp	.+466    	; 0x2232 <STEPPER_enuFullStep+0x3fc>
			} else{ /*......*/ }
			break;
		case STEPPER_u8_ANTI_CLOCKWISE:
			if(Copy_f32Angle == STEPPER_f32_0DEGREE){
    2060:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2062:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2064:	88 a1       	ldd	r24, Y+32	; 0x20
    2066:	99 a1       	ldd	r25, Y+33	; 0x21
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	40 e0       	ldi	r20, 0x00	; 0
    206e:	50 e0       	ldi	r21, 0x00	; 0
    2070:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    2074:	88 23       	and	r24, r24
    2076:	a9 f4       	brne	.+42     	; 0x20a2 <STEPPER_enuFullStep+0x26c>
				DIO_enuSetPinValue(Copy_u8OrangePort, Copy_u8OrangePin, DIO_u8_LOW);
    2078:	8c a9       	ldd	r24, Y+52	; 0x34
    207a:	6d a9       	ldd	r22, Y+53	; 0x35
    207c:	40 e0       	ldi	r20, 0x00	; 0
    207e:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
				DIO_enuSetPinValue(Copy_u8YellowPort, Copy_u8YellowPin, DIO_u8_HIGH);
    2082:	8f a1       	ldd	r24, Y+39	; 0x27
    2084:	68 a5       	ldd	r22, Y+40	; 0x28
    2086:	41 e0       	ldi	r20, 0x01	; 1
    2088:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
				DIO_enuSetPinValue(Copy_u8PinkPort, Copy_u8PinkPin, DIO_u8_HIGH);
    208c:	8d a1       	ldd	r24, Y+37	; 0x25
    208e:	6e a1       	ldd	r22, Y+38	; 0x26
    2090:	41 e0       	ldi	r20, 0x01	; 1
    2092:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
				DIO_enuSetPinValue(Copy_u8BluePort, Copy_u8BluePin, DIO_u8_LOW);
    2096:	8b a1       	ldd	r24, Y+35	; 0x23
    2098:	6c a1       	ldd	r22, Y+36	; 0x24
    209a:	40 e0       	ldi	r20, 0x00	; 0
    209c:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
    20a0:	c8 c0       	rjmp	.+400    	; 0x2232 <STEPPER_enuFullStep+0x3fc>
			} else if(Copy_f32Angle == STEPPER_f32_90DEGREE){
    20a2:	6e 8d       	ldd	r22, Y+30	; 0x1e
    20a4:	7f 8d       	ldd	r23, Y+31	; 0x1f
    20a6:	88 a1       	ldd	r24, Y+32	; 0x20
    20a8:	99 a1       	ldd	r25, Y+33	; 0x21
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	44 eb       	ldi	r20, 0xB4	; 180
    20b0:	52 e4       	ldi	r21, 0x42	; 66
    20b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    20b6:	88 23       	and	r24, r24
    20b8:	a9 f4       	brne	.+42     	; 0x20e4 <STEPPER_enuFullStep+0x2ae>
				DIO_enuSetPinValue(Copy_u8OrangePort, Copy_u8OrangePin, DIO_u8_LOW);
    20ba:	8c a9       	ldd	r24, Y+52	; 0x34
    20bc:	6d a9       	ldd	r22, Y+53	; 0x35
    20be:	40 e0       	ldi	r20, 0x00	; 0
    20c0:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
				DIO_enuSetPinValue(Copy_u8YellowPort, Copy_u8YellowPin, DIO_u8_LOW);
    20c4:	8f a1       	ldd	r24, Y+39	; 0x27
    20c6:	68 a5       	ldd	r22, Y+40	; 0x28
    20c8:	40 e0       	ldi	r20, 0x00	; 0
    20ca:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
				DIO_enuSetPinValue(Copy_u8PinkPort, Copy_u8PinkPin, DIO_u8_HIGH);
    20ce:	8d a1       	ldd	r24, Y+37	; 0x25
    20d0:	6e a1       	ldd	r22, Y+38	; 0x26
    20d2:	41 e0       	ldi	r20, 0x01	; 1
    20d4:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
				DIO_enuSetPinValue(Copy_u8BluePort, Copy_u8BluePin, DIO_u8_HIGH);
    20d8:	8b a1       	ldd	r24, Y+35	; 0x23
    20da:	6c a1       	ldd	r22, Y+36	; 0x24
    20dc:	41 e0       	ldi	r20, 0x01	; 1
    20de:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
    20e2:	a7 c0       	rjmp	.+334    	; 0x2232 <STEPPER_enuFullStep+0x3fc>
			} else if(Copy_f32Angle == STEPPER_f32_180DEGREE){
    20e4:	6e 8d       	ldd	r22, Y+30	; 0x1e
    20e6:	7f 8d       	ldd	r23, Y+31	; 0x1f
    20e8:	88 a1       	ldd	r24, Y+32	; 0x20
    20ea:	99 a1       	ldd	r25, Y+33	; 0x21
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	44 e3       	ldi	r20, 0x34	; 52
    20f2:	53 e4       	ldi	r21, 0x43	; 67
    20f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    20f8:	88 23       	and	r24, r24
    20fa:	09 f0       	breq	.+2      	; 0x20fe <STEPPER_enuFullStep+0x2c8>
    20fc:	9a c0       	rjmp	.+308    	; 0x2232 <STEPPER_enuFullStep+0x3fc>
				DIO_enuSetPinValue(Copy_u8OrangePort, Copy_u8OrangePin, DIO_u8_LOW);
    20fe:	8c a9       	ldd	r24, Y+52	; 0x34
    2100:	6d a9       	ldd	r22, Y+53	; 0x35
    2102:	40 e0       	ldi	r20, 0x00	; 0
    2104:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
				DIO_enuSetPinValue(Copy_u8YellowPort, Copy_u8YellowPin, DIO_u8_LOW);
    2108:	8f a1       	ldd	r24, Y+39	; 0x27
    210a:	68 a5       	ldd	r22, Y+40	; 0x28
    210c:	40 e0       	ldi	r20, 0x00	; 0
    210e:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
				DIO_enuSetPinValue(Copy_u8PinkPort, Copy_u8PinkPin, DIO_u8_HIGH);
    2112:	8d a1       	ldd	r24, Y+37	; 0x25
    2114:	6e a1       	ldd	r22, Y+38	; 0x26
    2116:	41 e0       	ldi	r20, 0x01	; 1
    2118:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
				DIO_enuSetPinValue(Copy_u8BluePort, Copy_u8BluePin, DIO_u8_HIGH);
    211c:	8b a1       	ldd	r24, Y+35	; 0x23
    211e:	6c a1       	ldd	r22, Y+36	; 0x24
    2120:	41 e0       	ldi	r20, 0x01	; 1
    2122:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	a0 e2       	ldi	r26, 0x20	; 32
    212c:	b1 e4       	ldi	r27, 0x41	; 65
    212e:	8b 87       	std	Y+11, r24	; 0x0b
    2130:	9c 87       	std	Y+12, r25	; 0x0c
    2132:	ad 87       	std	Y+13, r26	; 0x0d
    2134:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2136:	6b 85       	ldd	r22, Y+11	; 0x0b
    2138:	7c 85       	ldd	r23, Y+12	; 0x0c
    213a:	8d 85       	ldd	r24, Y+13	; 0x0d
    213c:	9e 85       	ldd	r25, Y+14	; 0x0e
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	4a e7       	ldi	r20, 0x7A	; 122
    2144:	53 e4       	ldi	r21, 0x43	; 67
    2146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	8f 83       	std	Y+7, r24	; 0x07
    2150:	98 87       	std	Y+8, r25	; 0x08
    2152:	a9 87       	std	Y+9, r26	; 0x09
    2154:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2156:	6f 81       	ldd	r22, Y+7	; 0x07
    2158:	78 85       	ldd	r23, Y+8	; 0x08
    215a:	89 85       	ldd	r24, Y+9	; 0x09
    215c:	9a 85       	ldd	r25, Y+10	; 0x0a
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	40 e8       	ldi	r20, 0x80	; 128
    2164:	5f e3       	ldi	r21, 0x3F	; 63
    2166:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    216a:	88 23       	and	r24, r24
    216c:	2c f4       	brge	.+10     	; 0x2178 <STEPPER_enuFullStep+0x342>
		__ticks = 1;
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	9e 83       	std	Y+6, r25	; 0x06
    2174:	8d 83       	std	Y+5, r24	; 0x05
    2176:	3f c0       	rjmp	.+126    	; 0x21f6 <STEPPER_enuFullStep+0x3c0>
	else if (__tmp > 65535)
    2178:	6f 81       	ldd	r22, Y+7	; 0x07
    217a:	78 85       	ldd	r23, Y+8	; 0x08
    217c:	89 85       	ldd	r24, Y+9	; 0x09
    217e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	3f ef       	ldi	r19, 0xFF	; 255
    2184:	4f e7       	ldi	r20, 0x7F	; 127
    2186:	57 e4       	ldi	r21, 0x47	; 71
    2188:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    218c:	18 16       	cp	r1, r24
    218e:	4c f5       	brge	.+82     	; 0x21e2 <STEPPER_enuFullStep+0x3ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2190:	6b 85       	ldd	r22, Y+11	; 0x0b
    2192:	7c 85       	ldd	r23, Y+12	; 0x0c
    2194:	8d 85       	ldd	r24, Y+13	; 0x0d
    2196:	9e 85       	ldd	r25, Y+14	; 0x0e
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	40 e2       	ldi	r20, 0x20	; 32
    219e:	51 e4       	ldi	r21, 0x41	; 65
    21a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	bc 01       	movw	r22, r24
    21aa:	cd 01       	movw	r24, r26
    21ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	9e 83       	std	Y+6, r25	; 0x06
    21b6:	8d 83       	std	Y+5, r24	; 0x05
    21b8:	0f c0       	rjmp	.+30     	; 0x21d8 <STEPPER_enuFullStep+0x3a2>
    21ba:	89 e1       	ldi	r24, 0x19	; 25
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	9c 83       	std	Y+4, r25	; 0x04
    21c0:	8b 83       	std	Y+3, r24	; 0x03
    21c2:	8b 81       	ldd	r24, Y+3	; 0x03
    21c4:	9c 81       	ldd	r25, Y+4	; 0x04
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	f1 f7       	brne	.-4      	; 0x21c6 <STEPPER_enuFullStep+0x390>
    21ca:	9c 83       	std	Y+4, r25	; 0x04
    21cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ce:	8d 81       	ldd	r24, Y+5	; 0x05
    21d0:	9e 81       	ldd	r25, Y+6	; 0x06
    21d2:	01 97       	sbiw	r24, 0x01	; 1
    21d4:	9e 83       	std	Y+6, r25	; 0x06
    21d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d8:	8d 81       	ldd	r24, Y+5	; 0x05
    21da:	9e 81       	ldd	r25, Y+6	; 0x06
    21dc:	00 97       	sbiw	r24, 0x00	; 0
    21de:	69 f7       	brne	.-38     	; 0x21ba <STEPPER_enuFullStep+0x384>
    21e0:	14 c0       	rjmp	.+40     	; 0x220a <STEPPER_enuFullStep+0x3d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e2:	6f 81       	ldd	r22, Y+7	; 0x07
    21e4:	78 85       	ldd	r23, Y+8	; 0x08
    21e6:	89 85       	ldd	r24, Y+9	; 0x09
    21e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	9e 83       	std	Y+6, r25	; 0x06
    21f4:	8d 83       	std	Y+5, r24	; 0x05
    21f6:	8d 81       	ldd	r24, Y+5	; 0x05
    21f8:	9e 81       	ldd	r25, Y+6	; 0x06
    21fa:	9a 83       	std	Y+2, r25	; 0x02
    21fc:	89 83       	std	Y+1, r24	; 0x01
    21fe:	89 81       	ldd	r24, Y+1	; 0x01
    2200:	9a 81       	ldd	r25, Y+2	; 0x02
    2202:	01 97       	sbiw	r24, 0x01	; 1
    2204:	f1 f7       	brne	.-4      	; 0x2202 <STEPPER_enuFullStep+0x3cc>
    2206:	9a 83       	std	Y+2, r25	; 0x02
    2208:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(10);
				DIO_enuSetPinValue(Copy_u8OrangePort, Copy_u8OrangePin, DIO_u8_HIGH);
    220a:	8c a9       	ldd	r24, Y+52	; 0x34
    220c:	6d a9       	ldd	r22, Y+53	; 0x35
    220e:	41 e0       	ldi	r20, 0x01	; 1
    2210:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
				DIO_enuSetPinValue(Copy_u8YellowPort, Copy_u8YellowPin, DIO_u8_LOW);
    2214:	8f a1       	ldd	r24, Y+39	; 0x27
    2216:	68 a5       	ldd	r22, Y+40	; 0x28
    2218:	40 e0       	ldi	r20, 0x00	; 0
    221a:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
				DIO_enuSetPinValue(Copy_u8PinkPort, Copy_u8PinkPin, DIO_u8_LOW);
    221e:	8d a1       	ldd	r24, Y+37	; 0x25
    2220:	6e a1       	ldd	r22, Y+38	; 0x26
    2222:	40 e0       	ldi	r20, 0x00	; 0
    2224:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
				DIO_enuSetPinValue(Copy_u8BluePort, Copy_u8BluePin, DIO_u8_HIGH);
    2228:	8b a1       	ldd	r24, Y+35	; 0x23
    222a:	6c a1       	ldd	r22, Y+36	; 0x24
    222c:	41 e0       	ldi	r20, 0x01	; 1
    222e:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
				break;
			default:
				break;
		}
	}*/
	return Local_enuErrorStatus;
    2232:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    2234:	aa 96       	adiw	r28, 0x2a	; 42
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	f8 94       	cli
    223a:	de bf       	out	0x3e, r29	; 62
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	cd bf       	out	0x3d, r28	; 61
    2240:	cf 91       	pop	r28
    2242:	df 91       	pop	r29
    2244:	0f 91       	pop	r16
    2246:	ef 90       	pop	r14
    2248:	cf 90       	pop	r12
    224a:	af 90       	pop	r10
    224c:	8f 90       	pop	r8
    224e:	08 95       	ret

00002250 <SERVOMOTOR_enuInit>:
 * Name: SERVOMOTOR_enuInit
 * Description: initialize the PWM channel
 * Arguments: Copy_u8PWMchannel	---->	options(SERVOMOTOR_u8_OC0, SERVOMOTOR_u8_OC1A, SERVOMOTOR_u8_OC1B, SERVOMOTOR_u8_OC2)
 * Return:	void
 */
void SERVOMOTOR_enuInit(u8 Copy_u8PWMchannel){
    2250:	df 93       	push	r29
    2252:	cf 93       	push	r28
    2254:	00 d0       	rcall	.+0      	; 0x2256 <SERVOMOTOR_enuInit+0x6>
    2256:	0f 92       	push	r0
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
    225c:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PWMchannel){
    225e:	89 81       	ldd	r24, Y+1	; 0x01
    2260:	28 2f       	mov	r18, r24
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	3b 83       	std	Y+3, r19	; 0x03
    2266:	2a 83       	std	Y+2, r18	; 0x02
    2268:	8a 81       	ldd	r24, Y+2	; 0x02
    226a:	9b 81       	ldd	r25, Y+3	; 0x03
    226c:	81 30       	cpi	r24, 0x01	; 1
    226e:	91 05       	cpc	r25, r1
    2270:	31 f0       	breq	.+12     	; 0x227e <SERVOMOTOR_enuInit+0x2e>
    2272:	2a 81       	ldd	r18, Y+2	; 0x02
    2274:	3b 81       	ldd	r19, Y+3	; 0x03
    2276:	22 30       	cpi	r18, 0x02	; 2
    2278:	31 05       	cpc	r19, r1
    227a:	31 f0       	breq	.+12     	; 0x2288 <SERVOMOTOR_enuInit+0x38>
    227c:	09 c0       	rjmp	.+18     	; 0x2290 <SERVOMOTOR_enuInit+0x40>
			case SERVOMOTOR_u8_OC0:
				break;
			case SERVOMOTOR_u8_OC1A:
				PWM_vidInit(PWM_u8_TIMER1, PWM_u8_FAST_PWM_ICR1_TOP);
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	6a e1       	ldi	r22, 0x1A	; 26
    2282:	0e 94 93 07 	call	0xf26	; 0xf26 <PWM_vidInit>
    2286:	04 c0       	rjmp	.+8      	; 0x2290 <SERVOMOTOR_enuInit+0x40>
				break;
			case SERVOMOTOR_u8_OC1B:
				PWM_vidInit(PWM_u8_TIMER1, PWM_u8_FAST_PWM_ICR1_TOP);
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	6a e1       	ldi	r22, 0x1A	; 26
    228c:	0e 94 93 07 	call	0xf26	; 0xf26 <PWM_vidInit>
			case SERVOMOTOR_u8_OC2:
				break;
			default:
				break;
		}
}
    2290:	0f 90       	pop	r0
    2292:	0f 90       	pop	r0
    2294:	0f 90       	pop	r0
    2296:	cf 91       	pop	r28
    2298:	df 91       	pop	r29
    229a:	08 95       	ret

0000229c <SERVOMOTOR_enuSetAngle>:
 * Description: rotate the motor by the angle user passed as argument
 * Arguments:	first Argument: Copy_u8Angle			OPTIONS --> (0 < angle < 180)
				second Argument: Copy_u8DesiredPin		OPTIONS --> (PWM_u8_OC1A , PWM_u8_OC1B)
 * Return:	Error Status -----> ServoMotor_OK , ServoMotor_NOK
 */
SERVOMOTOR_tenuErrorStatus SERVOMOTOR_enuSetAngle(u8 Copy_u8Angle, u8 Copy_u8PWMchannel){
    229c:	0f 93       	push	r16
    229e:	df 93       	push	r29
    22a0:	cf 93       	push	r28
    22a2:	cd b7       	in	r28, 0x3d	; 61
    22a4:	de b7       	in	r29, 0x3e	; 62
    22a6:	29 97       	sbiw	r28, 0x09	; 9
    22a8:	0f b6       	in	r0, 0x3f	; 63
    22aa:	f8 94       	cli
    22ac:	de bf       	out	0x3e, r29	; 62
    22ae:	0f be       	out	0x3f, r0	; 63
    22b0:	cd bf       	out	0x3d, r28	; 61
    22b2:	8c 83       	std	Y+4, r24	; 0x04
    22b4:	6d 83       	std	Y+5, r22	; 0x05
	SERVOMOTOR_tenuErrorStatus Local_enuErrorStatus = SERVOMOTOR_OK;
    22b6:	1b 82       	std	Y+3, r1	; 0x03
	if (Copy_u8Angle > 180   || Copy_u8PWMchannel > SERVOMOTOR_u8_OC2){
    22b8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ba:	85 3b       	cpi	r24, 0xB5	; 181
    22bc:	18 f4       	brcc	.+6      	; 0x22c4 <SERVOMOTOR_enuSetAngle+0x28>
    22be:	8d 81       	ldd	r24, Y+5	; 0x05
    22c0:	84 30       	cpi	r24, 0x04	; 4
    22c2:	18 f0       	brcs	.+6      	; 0x22ca <SERVOMOTOR_enuSetAngle+0x2e>
		Local_enuErrorStatus = SERVOMOTOR_NOK;
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	8b 83       	std	Y+3, r24	; 0x03
    22c8:	72 c0       	rjmp	.+228    	; 0x23ae <SERVOMOTOR_enuSetAngle+0x112>
		 * So we set up ICR1A=4999, this gives us PWM period of 20ms (50 Hz).
		 *
		 * a positive relationship between the angle and duty cycle... then, the slope is 25/18
		 * so the equation that determine output compare value will be ---> Duty = 250 + (25/18)Angle
		 * */
		u16 Local_u16OCRvalue = ((250) + ((25/18) * (u16)Copy_u8Angle));
    22ca:	8c 81       	ldd	r24, Y+4	; 0x04
    22cc:	88 2f       	mov	r24, r24
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	86 50       	subi	r24, 0x06	; 6
    22d2:	9f 4f       	sbci	r25, 0xFF	; 255
    22d4:	9a 83       	std	Y+2, r25	; 0x02
    22d6:	89 83       	std	Y+1, r24	; 0x01
		if(Copy_u8PWMchannel == SERVOMOTOR_u8_OC1A){
    22d8:	8d 81       	ldd	r24, Y+5	; 0x05
    22da:	81 30       	cpi	r24, 0x01	; 1
    22dc:	91 f5       	brne	.+100    	; 0x2342 <SERVOMOTOR_enuSetAngle+0xa6>
			//if(Copy_u8Angle == )
		//	PWM_vidStartTimer1(PWM_u8_NO_PRESCALER_64, Local_u16OCRvalue, SERVOMOTOR_u16_TOP_VALUE, PWM_u8_NON_INVERTING_MODE_0C1A, PWM_u8_OC1A);
			switch(Copy_u8Angle){
    22de:	8c 81       	ldd	r24, Y+4	; 0x04
    22e0:	28 2f       	mov	r18, r24
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	39 87       	std	Y+9, r19	; 0x09
    22e6:	28 87       	std	Y+8, r18	; 0x08
    22e8:	88 85       	ldd	r24, Y+8	; 0x08
    22ea:	99 85       	ldd	r25, Y+9	; 0x09
    22ec:	8a 35       	cpi	r24, 0x5A	; 90
    22ee:	91 05       	cpc	r25, r1
    22f0:	a1 f0       	breq	.+40     	; 0x231a <SERVOMOTOR_enuSetAngle+0x7e>
    22f2:	28 85       	ldd	r18, Y+8	; 0x08
    22f4:	39 85       	ldd	r19, Y+9	; 0x09
    22f6:	24 3b       	cpi	r18, 0xB4	; 180
    22f8:	31 05       	cpc	r19, r1
    22fa:	c9 f0       	breq	.+50     	; 0x232e <SERVOMOTOR_enuSetAngle+0x92>
    22fc:	88 85       	ldd	r24, Y+8	; 0x08
    22fe:	99 85       	ldd	r25, Y+9	; 0x09
    2300:	00 97       	sbiw	r24, 0x00	; 0
    2302:	09 f0       	breq	.+2      	; 0x2306 <SERVOMOTOR_enuSetAngle+0x6a>
    2304:	54 c0       	rjmp	.+168    	; 0x23ae <SERVOMOTOR_enuSetAngle+0x112>
				case SERVOMOTOR_u8_ZERO_DEGREE:
					PWM_vidStartTimer1(PWM_u8_NO_PRESCALER_64, SERVOMOTOR_u8_OCR_VALUE_FOR_ZERO_DEGREE, SERVOMOTOR_u16_TOP_VALUE, PWM_u8_NON_INVERTING_MODE_0C1A, PWM_u8_OC1A);
    2306:	83 e0       	ldi	r24, 0x03	; 3
    2308:	65 e0       	ldi	r22, 0x05	; 5
    230a:	70 e0       	ldi	r23, 0x00	; 0
    230c:	47 e8       	ldi	r20, 0x87	; 135
    230e:	53 e1       	ldi	r21, 0x13	; 19
    2310:	20 e8       	ldi	r18, 0x80	; 128
    2312:	01 e0       	ldi	r16, 0x01	; 1
    2314:	0e 94 f5 07 	call	0xfea	; 0xfea <PWM_vidStartTimer1>
    2318:	4a c0       	rjmp	.+148    	; 0x23ae <SERVOMOTOR_enuSetAngle+0x112>
					break;
				case SERVOMOTOR_u8_90_DEGREE:
					PWM_vidStartTimer1(PWM_u8_NO_PRESCALER_64, SERVOMOTOR_u8_OCR_VALUE_FOR_90_DEGREE, SERVOMOTOR_u16_TOP_VALUE, PWM_u8_NON_INVERTING_MODE_0C1A, PWM_u8_OC1A);
    231a:	83 e0       	ldi	r24, 0x03	; 3
    231c:	6f e1       	ldi	r22, 0x1F	; 31
    231e:	70 e0       	ldi	r23, 0x00	; 0
    2320:	47 e8       	ldi	r20, 0x87	; 135
    2322:	53 e1       	ldi	r21, 0x13	; 19
    2324:	20 e8       	ldi	r18, 0x80	; 128
    2326:	01 e0       	ldi	r16, 0x01	; 1
    2328:	0e 94 f5 07 	call	0xfea	; 0xfea <PWM_vidStartTimer1>
    232c:	40 c0       	rjmp	.+128    	; 0x23ae <SERVOMOTOR_enuSetAngle+0x112>
					break;
				case SERVOMOTOR_u8_180_DEGREE:
					PWM_vidStartTimer1(PWM_u8_NO_PRESCALER_64, SERVOMOTOR_u8_OCR_VALUE_FOR_180_DEGREE, SERVOMOTOR_u16_TOP_VALUE, PWM_u8_NON_INVERTING_MODE_0C1A, PWM_u8_OC1A);
    232e:	83 e0       	ldi	r24, 0x03	; 3
    2330:	6f e1       	ldi	r22, 0x1F	; 31
    2332:	70 e0       	ldi	r23, 0x00	; 0
    2334:	47 e8       	ldi	r20, 0x87	; 135
    2336:	53 e1       	ldi	r21, 0x13	; 19
    2338:	20 e8       	ldi	r18, 0x80	; 128
    233a:	01 e0       	ldi	r16, 0x01	; 1
    233c:	0e 94 f5 07 	call	0xfea	; 0xfea <PWM_vidStartTimer1>
    2340:	36 c0       	rjmp	.+108    	; 0x23ae <SERVOMOTOR_enuSetAngle+0x112>
					break;
				default:
					break;
			}

		} else if(Copy_u8PWMchannel == SERVOMOTOR_u8_OC1B){
    2342:	8d 81       	ldd	r24, Y+5	; 0x05
    2344:	82 30       	cpi	r24, 0x02	; 2
    2346:	89 f5       	brne	.+98     	; 0x23aa <SERVOMOTOR_enuSetAngle+0x10e>
		//	PWM_vidStartTimer1(PWM_u8_NO_PRESCALER_64, Local_u16OCRvalue, SERVOMOTOR_u16_TOP_VALUE, PWM_u8_NON_INVERTING_MODE_0C1B, PWM_u8_OC1B);
			switch(Copy_u8Angle){
    2348:	8c 81       	ldd	r24, Y+4	; 0x04
    234a:	28 2f       	mov	r18, r24
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	3f 83       	std	Y+7, r19	; 0x07
    2350:	2e 83       	std	Y+6, r18	; 0x06
    2352:	8e 81       	ldd	r24, Y+6	; 0x06
    2354:	9f 81       	ldd	r25, Y+7	; 0x07
    2356:	8a 35       	cpi	r24, 0x5A	; 90
    2358:	91 05       	cpc	r25, r1
    235a:	99 f0       	breq	.+38     	; 0x2382 <SERVOMOTOR_enuSetAngle+0xe6>
    235c:	2e 81       	ldd	r18, Y+6	; 0x06
    235e:	3f 81       	ldd	r19, Y+7	; 0x07
    2360:	24 3b       	cpi	r18, 0xB4	; 180
    2362:	31 05       	cpc	r19, r1
    2364:	c1 f0       	breq	.+48     	; 0x2396 <SERVOMOTOR_enuSetAngle+0xfa>
    2366:	8e 81       	ldd	r24, Y+6	; 0x06
    2368:	9f 81       	ldd	r25, Y+7	; 0x07
    236a:	00 97       	sbiw	r24, 0x00	; 0
    236c:	01 f5       	brne	.+64     	; 0x23ae <SERVOMOTOR_enuSetAngle+0x112>
				case SERVOMOTOR_u8_ZERO_DEGREE:
					PWM_vidStartTimer1(PWM_u8_NO_PRESCALER_64, SERVOMOTOR_u8_OCR_VALUE_FOR_ZERO_DEGREE, SERVOMOTOR_u16_TOP_VALUE, PWM_u8_NON_INVERTING_MODE_0C1B, PWM_u8_OC1B);
    236e:	83 e0       	ldi	r24, 0x03	; 3
    2370:	65 e0       	ldi	r22, 0x05	; 5
    2372:	70 e0       	ldi	r23, 0x00	; 0
    2374:	47 e8       	ldi	r20, 0x87	; 135
    2376:	53 e1       	ldi	r21, 0x13	; 19
    2378:	20 e2       	ldi	r18, 0x20	; 32
    237a:	02 e0       	ldi	r16, 0x02	; 2
    237c:	0e 94 f5 07 	call	0xfea	; 0xfea <PWM_vidStartTimer1>
    2380:	16 c0       	rjmp	.+44     	; 0x23ae <SERVOMOTOR_enuSetAngle+0x112>
					break;
				case SERVOMOTOR_u8_90_DEGREE:
					PWM_vidStartTimer1(PWM_u8_NO_PRESCALER_64, SERVOMOTOR_u8_OCR_VALUE_FOR_90_DEGREE, SERVOMOTOR_u16_TOP_VALUE, PWM_u8_NON_INVERTING_MODE_0C1B, PWM_u8_OC1B);
    2382:	83 e0       	ldi	r24, 0x03	; 3
    2384:	6f e1       	ldi	r22, 0x1F	; 31
    2386:	70 e0       	ldi	r23, 0x00	; 0
    2388:	47 e8       	ldi	r20, 0x87	; 135
    238a:	53 e1       	ldi	r21, 0x13	; 19
    238c:	20 e2       	ldi	r18, 0x20	; 32
    238e:	02 e0       	ldi	r16, 0x02	; 2
    2390:	0e 94 f5 07 	call	0xfea	; 0xfea <PWM_vidStartTimer1>
    2394:	0c c0       	rjmp	.+24     	; 0x23ae <SERVOMOTOR_enuSetAngle+0x112>
					break;
				case SERVOMOTOR_u8_180_DEGREE:
					PWM_vidStartTimer1(PWM_u8_NO_PRESCALER_64, SERVOMOTOR_u8_OCR_VALUE_FOR_180_DEGREE, SERVOMOTOR_u16_TOP_VALUE, PWM_u8_NON_INVERTING_MODE_0C1B, PWM_u8_OC1B);
    2396:	83 e0       	ldi	r24, 0x03	; 3
    2398:	6f e1       	ldi	r22, 0x1F	; 31
    239a:	70 e0       	ldi	r23, 0x00	; 0
    239c:	47 e8       	ldi	r20, 0x87	; 135
    239e:	53 e1       	ldi	r21, 0x13	; 19
    23a0:	20 e2       	ldi	r18, 0x20	; 32
    23a2:	02 e0       	ldi	r16, 0x02	; 2
    23a4:	0e 94 f5 07 	call	0xfea	; 0xfea <PWM_vidStartTimer1>
    23a8:	02 c0       	rjmp	.+4      	; 0x23ae <SERVOMOTOR_enuSetAngle+0x112>
					break;
				default:
					break;
			}
		} else{
			Local_enuErrorStatus = SERVOMOTOR_NOK;
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	8b 83       	std	Y+3, r24	; 0x03
		}
	}
	return Local_enuErrorStatus;
    23ae:	8b 81       	ldd	r24, Y+3	; 0x03
}
    23b0:	29 96       	adiw	r28, 0x09	; 9
    23b2:	0f b6       	in	r0, 0x3f	; 63
    23b4:	f8 94       	cli
    23b6:	de bf       	out	0x3e, r29	; 62
    23b8:	0f be       	out	0x3f, r0	; 63
    23ba:	cd bf       	out	0x3d, r28	; 61
    23bc:	cf 91       	pop	r28
    23be:	df 91       	pop	r29
    23c0:	0f 91       	pop	r16
    23c2:	08 95       	ret

000023c4 <RELAY_vidInit>:
 * Name: RELAY_vidInit
 * Description: initialize RELAY control pin
 * Arguments: void
 * Return:	void
*/
void RELAY_vidInit(void){
    23c4:	df 93       	push	r29
    23c6:	cf 93       	push	r28
    23c8:	cd b7       	in	r28, 0x3d	; 61
    23ca:	de b7       	in	r29, 0x3e	; 62
	DIO_vidInit();
    23cc:	0e 94 47 0c 	call	0x188e	; 0x188e <DIO_vidInit>
}
    23d0:	cf 91       	pop	r28
    23d2:	df 91       	pop	r29
    23d4:	08 95       	ret

000023d6 <RELAY_vidSetNormallyClose>:
 * Arguments:
 * 				first Argument: Copy_u8Port, 			options (RELAY_u8_PORTA, RELAY_u8_PORTB, RELAY_u8_PORTC, RELAY_u8_PORTD)
 * 				second Argument: Copy_u8Pin, 			options (from RELAY_u8_PIN0 to RELAY_u8_PIN7)
 * Return:	void
*/
void RELAY_vidSetNormallyClose(u8 Copy_u8ControlPort, u8 Copy_u8ControlPin){
    23d6:	df 93       	push	r29
    23d8:	cf 93       	push	r28
    23da:	00 d0       	rcall	.+0      	; 0x23dc <RELAY_vidSetNormallyClose+0x6>
    23dc:	cd b7       	in	r28, 0x3d	; 61
    23de:	de b7       	in	r29, 0x3e	; 62
    23e0:	89 83       	std	Y+1, r24	; 0x01
    23e2:	6a 83       	std	Y+2, r22	; 0x02
	DIO_enuSetPinValue(Copy_u8ControlPort, Copy_u8ControlPin, RELAY_u8_NORMALLY_CLOSE);
    23e4:	89 81       	ldd	r24, Y+1	; 0x01
    23e6:	6a 81       	ldd	r22, Y+2	; 0x02
    23e8:	40 e0       	ldi	r20, 0x00	; 0
    23ea:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
}
    23ee:	0f 90       	pop	r0
    23f0:	0f 90       	pop	r0
    23f2:	cf 91       	pop	r28
    23f4:	df 91       	pop	r29
    23f6:	08 95       	ret

000023f8 <RELAY_vidSetNormallyOpen>:
 * Arguments:
 * 				first Argument: Copy_u8Port, 			options (RELAY_u8_PORTA, RELAY_u8_PORTB, RELAY_u8_PORTC, RELAY_u8_PORTD)
 * 				second Argument: Copy_u8Pin, 			options (from RELAY_u8_PIN0 to RELAY_u8_PIN7)
 * Return:	void
*/
void RELAY_vidSetNormallyOpen(u8 Copy_u8ControlPort, u8 Copy_u8ControlPin){
    23f8:	df 93       	push	r29
    23fa:	cf 93       	push	r28
    23fc:	00 d0       	rcall	.+0      	; 0x23fe <RELAY_vidSetNormallyOpen+0x6>
    23fe:	cd b7       	in	r28, 0x3d	; 61
    2400:	de b7       	in	r29, 0x3e	; 62
    2402:	89 83       	std	Y+1, r24	; 0x01
    2404:	6a 83       	std	Y+2, r22	; 0x02
	DIO_enuSetPinValue(Copy_u8ControlPort, Copy_u8ControlPin, RELAY_u8_NORMALLY_OPEN);
    2406:	89 81       	ldd	r24, Y+1	; 0x01
    2408:	6a 81       	ldd	r22, Y+2	; 0x02
    240a:	41 e0       	ldi	r20, 0x01	; 1
    240c:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
}
    2410:	0f 90       	pop	r0
    2412:	0f 90       	pop	r0
    2414:	cf 91       	pop	r28
    2416:	df 91       	pop	r29
    2418:	08 95       	ret

0000241a <LED_vidInit>:
 * Name: LED_vidInit
 * Description: initialize LEDs status
 * Arguments: void
 * Return:	void
*/
void LED_vidInit(void){
    241a:	df 93       	push	r29
    241c:	cf 93       	push	r28
    241e:	cd b7       	in	r28, 0x3d	; 61
    2420:	de b7       	in	r29, 0x3e	; 62
	DIO_vidInit();
    2422:	0e 94 47 0c 	call	0x188e	; 0x188e <DIO_vidInit>
}
    2426:	cf 91       	pop	r28
    2428:	df 91       	pop	r29
    242a:	08 95       	ret

0000242c <LED_enuTurnOn>:
 * Arguments:
 * 				first Argument: Copy_u8Port, 			options (LED_u8_PORTA, LED_u8_PORTB, LED_u8_PORTC, LED_u8_PORTD)
 * 				second Argument: Copy_u8Pin, 			options (from LED_u8_PIN0 to LED_u8_PIN7)
 * Return:	Error Status -----> LED_OK , LED_NOK
*/
LED_tenuErrorStatus LED_enuTurnOn(u8 Copy_u8LEDPort, u8 Copy_u8LEDPin){
    242c:	df 93       	push	r29
    242e:	cf 93       	push	r28
    2430:	00 d0       	rcall	.+0      	; 0x2432 <LED_enuTurnOn+0x6>
    2432:	0f 92       	push	r0
    2434:	cd b7       	in	r28, 0x3d	; 61
    2436:	de b7       	in	r29, 0x3e	; 62
    2438:	8a 83       	std	Y+2, r24	; 0x02
    243a:	6b 83       	std	Y+3, r22	; 0x03
	LED_tenuErrorStatus Local_enuErrorStatus = LED_OK;
    243c:	19 82       	std	Y+1, r1	; 0x01
	/*check arguments*/
	if ((Copy_u8LEDPort > LED_u8_PORTD) || (Copy_u8LEDPin > LED_u8_PIN7)){
    243e:	8a 81       	ldd	r24, Y+2	; 0x02
    2440:	84 30       	cpi	r24, 0x04	; 4
    2442:	18 f4       	brcc	.+6      	; 0x244a <LED_enuTurnOn+0x1e>
    2444:	8b 81       	ldd	r24, Y+3	; 0x03
    2446:	88 30       	cpi	r24, 0x08	; 8
    2448:	18 f0       	brcs	.+6      	; 0x2450 <LED_enuTurnOn+0x24>
		Local_enuErrorStatus = LED_NOK;
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	89 83       	std	Y+1, r24	; 0x01
    244e:	05 c0       	rjmp	.+10     	; 0x245a <LED_enuTurnOn+0x2e>
	} else {
	/*****IMPLEMENTATION*****/
		DIO_enuSetPinValue(Copy_u8LEDPort, Copy_u8LEDPin, LED_u8_ON);
    2450:	8a 81       	ldd	r24, Y+2	; 0x02
    2452:	6b 81       	ldd	r22, Y+3	; 0x03
    2454:	41 e0       	ldi	r20, 0x01	; 1
    2456:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
	}
	return Local_enuErrorStatus;
    245a:	89 81       	ldd	r24, Y+1	; 0x01
}
    245c:	0f 90       	pop	r0
    245e:	0f 90       	pop	r0
    2460:	0f 90       	pop	r0
    2462:	cf 91       	pop	r28
    2464:	df 91       	pop	r29
    2466:	08 95       	ret

00002468 <LED_enuTurnOff>:
 * Arguments:
 * 				first Argument: Copy_u8Port, 			options (LED_u8_PORTA, LED_u8_PORTB, LED_u8_PORTC, LED_u8_PORTD)
 * 				second Argument: Copy_u8Pin, 			options (from LED_u8_PIN0 to LED_u8_PIN7)
 * Return:	Error Status -----> LED_OK , LED_NOK
*/
LED_tenuErrorStatus LED_enuTurnOff(u8 Copy_u8LEDPort, u8 Copy_u8LEDPin){
    2468:	df 93       	push	r29
    246a:	cf 93       	push	r28
    246c:	00 d0       	rcall	.+0      	; 0x246e <LED_enuTurnOff+0x6>
    246e:	0f 92       	push	r0
    2470:	cd b7       	in	r28, 0x3d	; 61
    2472:	de b7       	in	r29, 0x3e	; 62
    2474:	8a 83       	std	Y+2, r24	; 0x02
    2476:	6b 83       	std	Y+3, r22	; 0x03
	LED_tenuErrorStatus Local_enuErrorStatus = LED_OK;
    2478:	19 82       	std	Y+1, r1	; 0x01
	/*check arguments*/
	if ((Copy_u8LEDPort > LED_u8_PORTD) || (Copy_u8LEDPin > LED_u8_PIN7)){
    247a:	8a 81       	ldd	r24, Y+2	; 0x02
    247c:	84 30       	cpi	r24, 0x04	; 4
    247e:	18 f4       	brcc	.+6      	; 0x2486 <LED_enuTurnOff+0x1e>
    2480:	8b 81       	ldd	r24, Y+3	; 0x03
    2482:	88 30       	cpi	r24, 0x08	; 8
    2484:	18 f0       	brcs	.+6      	; 0x248c <LED_enuTurnOff+0x24>
		Local_enuErrorStatus = LED_NOK;
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	89 83       	std	Y+1, r24	; 0x01
    248a:	05 c0       	rjmp	.+10     	; 0x2496 <LED_enuTurnOff+0x2e>
	} else {
	/*****IMPLEMENTATION*****/
		DIO_enuSetPinValue(Copy_u8LEDPort, Copy_u8LEDPin, LED_u8_OFF);
    248c:	8a 81       	ldd	r24, Y+2	; 0x02
    248e:	6b 81       	ldd	r22, Y+3	; 0x03
    2490:	40 e0       	ldi	r20, 0x00	; 0
    2492:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
	}
	return Local_enuErrorStatus;
    2496:	89 81       	ldd	r24, Y+1	; 0x01
}
    2498:	0f 90       	pop	r0
    249a:	0f 90       	pop	r0
    249c:	0f 90       	pop	r0
    249e:	cf 91       	pop	r28
    24a0:	df 91       	pop	r29
    24a2:	08 95       	ret

000024a4 <LED_enuToggleLED>:
 * Arguments:
 * 				first Argument: Copy_u8Port, 			options (LED_u8_PORTA, LED_u8_PORTB, LED_u8_PORTC, LED_u8_PORTD)
 * 				second Argument: Copy_u8Pin, 			options (from LED_u8_PIN0 to LED_u8_PIN7)
 * Return:	Error Status -----> LED_OK , LED_NOK
*/
LED_tenuErrorStatus LED_enuToggleLED(u8 Copy_u8LEDPort, u8 Copy_u8LEDPin){
    24a4:	df 93       	push	r29
    24a6:	cf 93       	push	r28
    24a8:	00 d0       	rcall	.+0      	; 0x24aa <LED_enuToggleLED+0x6>
    24aa:	00 d0       	rcall	.+0      	; 0x24ac <LED_enuToggleLED+0x8>
    24ac:	00 d0       	rcall	.+0      	; 0x24ae <LED_enuToggleLED+0xa>
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
    24b2:	8b 83       	std	Y+3, r24	; 0x03
    24b4:	6c 83       	std	Y+4, r22	; 0x04
	LED_tenuErrorStatus Local_enuErrorStatus = LED_OK;
    24b6:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_u8LEDstatus;
	/*check arguments*/
	if ((Copy_u8LEDPort > LED_u8_PORTD) || (Copy_u8LEDPin > LED_u8_PIN7)){
    24b8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ba:	84 30       	cpi	r24, 0x04	; 4
    24bc:	18 f4       	brcc	.+6      	; 0x24c4 <LED_enuToggleLED+0x20>
    24be:	8c 81       	ldd	r24, Y+4	; 0x04
    24c0:	88 30       	cpi	r24, 0x08	; 8
    24c2:	18 f0       	brcs	.+6      	; 0x24ca <LED_enuToggleLED+0x26>
		Local_enuErrorStatus = LED_NOK;
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	89 83       	std	Y+1, r24	; 0x01
    24c8:	22 c0       	rjmp	.+68     	; 0x250e <LED_enuToggleLED+0x6a>
	} else {
	/*****IMPLEMENTATION*****/
		DIO_enuGetPinValue(Copy_u8LEDPort, Copy_u8LEDPin, &Local_u8LEDstatus);
    24ca:	9e 01       	movw	r18, r28
    24cc:	2e 5f       	subi	r18, 0xFE	; 254
    24ce:	3f 4f       	sbci	r19, 0xFF	; 255
    24d0:	8b 81       	ldd	r24, Y+3	; 0x03
    24d2:	6c 81       	ldd	r22, Y+4	; 0x04
    24d4:	a9 01       	movw	r20, r18
    24d6:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_enuGetPinValue>
		switch(Local_u8LEDstatus){
    24da:	8a 81       	ldd	r24, Y+2	; 0x02
    24dc:	28 2f       	mov	r18, r24
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	3e 83       	std	Y+6, r19	; 0x06
    24e2:	2d 83       	std	Y+5, r18	; 0x05
    24e4:	8d 81       	ldd	r24, Y+5	; 0x05
    24e6:	9e 81       	ldd	r25, Y+6	; 0x06
    24e8:	00 97       	sbiw	r24, 0x00	; 0
    24ea:	31 f0       	breq	.+12     	; 0x24f8 <LED_enuToggleLED+0x54>
    24ec:	2d 81       	ldd	r18, Y+5	; 0x05
    24ee:	3e 81       	ldd	r19, Y+6	; 0x06
    24f0:	21 30       	cpi	r18, 0x01	; 1
    24f2:	31 05       	cpc	r19, r1
    24f4:	39 f0       	breq	.+14     	; 0x2504 <LED_enuToggleLED+0x60>
    24f6:	0b c0       	rjmp	.+22     	; 0x250e <LED_enuToggleLED+0x6a>
		case LED_u8_OFF:
			DIO_enuSetPinValue(Copy_u8LEDPort, Copy_u8LEDPin, LED_u8_ON);
    24f8:	8b 81       	ldd	r24, Y+3	; 0x03
    24fa:	6c 81       	ldd	r22, Y+4	; 0x04
    24fc:	41 e0       	ldi	r20, 0x01	; 1
    24fe:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
    2502:	05 c0       	rjmp	.+10     	; 0x250e <LED_enuToggleLED+0x6a>
			break;
		case LED_u8_ON:
			DIO_enuSetPinValue(Copy_u8LEDPort, Copy_u8LEDPin, LED_u8_OFF);
    2504:	8b 81       	ldd	r24, Y+3	; 0x03
    2506:	6c 81       	ldd	r22, Y+4	; 0x04
    2508:	40 e0       	ldi	r20, 0x00	; 0
    250a:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
			break;
		default:
			break;
		}
	}
	return Local_enuErrorStatus;
    250e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2510:	26 96       	adiw	r28, 0x06	; 6
    2512:	0f b6       	in	r0, 0x3f	; 63
    2514:	f8 94       	cli
    2516:	de bf       	out	0x3e, r29	; 62
    2518:	0f be       	out	0x3f, r0	; 63
    251a:	cd bf       	out	0x3d, r28	; 61
    251c:	cf 91       	pop	r28
    251e:	df 91       	pop	r29
    2520:	08 95       	ret

00002522 <LCD_vidInit>:

static void LCD_vidSendEnable(void);


void LCD_vidInit(void)
{
    2522:	df 93       	push	r29
    2524:	cf 93       	push	r28
    2526:	cd b7       	in	r28, 0x3d	; 61
    2528:	de b7       	in	r29, 0x3e	; 62
    252a:	e8 97       	sbiw	r28, 0x38	; 56
    252c:	0f b6       	in	r0, 0x3f	; 63
    252e:	f8 94       	cli
    2530:	de bf       	out	0x3e, r29	; 62
    2532:	0f be       	out	0x3f, r0	; 63
    2534:	cd bf       	out	0x3d, r28	; 61
	/* init the pins */
	DIO_vidInit();
    2536:	0e 94 47 0c 	call	0x188e	; 0x188e <DIO_vidInit>
    253a:	80 e0       	ldi	r24, 0x00	; 0
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	a0 e0       	ldi	r26, 0x00	; 0
    2540:	b2 e4       	ldi	r27, 0x42	; 66
    2542:	8d ab       	std	Y+53, r24	; 0x35
    2544:	9e ab       	std	Y+54, r25	; 0x36
    2546:	af ab       	std	Y+55, r26	; 0x37
    2548:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    254a:	6d a9       	ldd	r22, Y+53	; 0x35
    254c:	7e a9       	ldd	r23, Y+54	; 0x36
    254e:	8f a9       	ldd	r24, Y+55	; 0x37
    2550:	98 ad       	ldd	r25, Y+56	; 0x38
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	4a e7       	ldi	r20, 0x7A	; 122
    2558:	53 e4       	ldi	r21, 0x43	; 67
    255a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	89 ab       	std	Y+49, r24	; 0x31
    2564:	9a ab       	std	Y+50, r25	; 0x32
    2566:	ab ab       	std	Y+51, r26	; 0x33
    2568:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    256a:	69 a9       	ldd	r22, Y+49	; 0x31
    256c:	7a a9       	ldd	r23, Y+50	; 0x32
    256e:	8b a9       	ldd	r24, Y+51	; 0x33
    2570:	9c a9       	ldd	r25, Y+52	; 0x34
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	40 e8       	ldi	r20, 0x80	; 128
    2578:	5f e3       	ldi	r21, 0x3F	; 63
    257a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    257e:	88 23       	and	r24, r24
    2580:	2c f4       	brge	.+10     	; 0x258c <LCD_vidInit+0x6a>
		__ticks = 1;
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	98 ab       	std	Y+48, r25	; 0x30
    2588:	8f a7       	std	Y+47, r24	; 0x2f
    258a:	3f c0       	rjmp	.+126    	; 0x260a <LCD_vidInit+0xe8>
	else if (__tmp > 65535)
    258c:	69 a9       	ldd	r22, Y+49	; 0x31
    258e:	7a a9       	ldd	r23, Y+50	; 0x32
    2590:	8b a9       	ldd	r24, Y+51	; 0x33
    2592:	9c a9       	ldd	r25, Y+52	; 0x34
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	3f ef       	ldi	r19, 0xFF	; 255
    2598:	4f e7       	ldi	r20, 0x7F	; 127
    259a:	57 e4       	ldi	r21, 0x47	; 71
    259c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    25a0:	18 16       	cp	r1, r24
    25a2:	4c f5       	brge	.+82     	; 0x25f6 <LCD_vidInit+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a4:	6d a9       	ldd	r22, Y+53	; 0x35
    25a6:	7e a9       	ldd	r23, Y+54	; 0x36
    25a8:	8f a9       	ldd	r24, Y+55	; 0x37
    25aa:	98 ad       	ldd	r25, Y+56	; 0x38
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	40 e2       	ldi	r20, 0x20	; 32
    25b2:	51 e4       	ldi	r21, 0x41	; 65
    25b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	bc 01       	movw	r22, r24
    25be:	cd 01       	movw	r24, r26
    25c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	98 ab       	std	Y+48, r25	; 0x30
    25ca:	8f a7       	std	Y+47, r24	; 0x2f
    25cc:	0f c0       	rjmp	.+30     	; 0x25ec <LCD_vidInit+0xca>
    25ce:	89 e1       	ldi	r24, 0x19	; 25
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	9e a7       	std	Y+46, r25	; 0x2e
    25d4:	8d a7       	std	Y+45, r24	; 0x2d
    25d6:	8d a5       	ldd	r24, Y+45	; 0x2d
    25d8:	9e a5       	ldd	r25, Y+46	; 0x2e
    25da:	01 97       	sbiw	r24, 0x01	; 1
    25dc:	f1 f7       	brne	.-4      	; 0x25da <LCD_vidInit+0xb8>
    25de:	9e a7       	std	Y+46, r25	; 0x2e
    25e0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    25e4:	98 a9       	ldd	r25, Y+48	; 0x30
    25e6:	01 97       	sbiw	r24, 0x01	; 1
    25e8:	98 ab       	std	Y+48, r25	; 0x30
    25ea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    25ee:	98 a9       	ldd	r25, Y+48	; 0x30
    25f0:	00 97       	sbiw	r24, 0x00	; 0
    25f2:	69 f7       	brne	.-38     	; 0x25ce <LCD_vidInit+0xac>
    25f4:	14 c0       	rjmp	.+40     	; 0x261e <LCD_vidInit+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f6:	69 a9       	ldd	r22, Y+49	; 0x31
    25f8:	7a a9       	ldd	r23, Y+50	; 0x32
    25fa:	8b a9       	ldd	r24, Y+51	; 0x33
    25fc:	9c a9       	ldd	r25, Y+52	; 0x34
    25fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	98 ab       	std	Y+48, r25	; 0x30
    2608:	8f a7       	std	Y+47, r24	; 0x2f
    260a:	8f a5       	ldd	r24, Y+47	; 0x2f
    260c:	98 a9       	ldd	r25, Y+48	; 0x30
    260e:	9c a7       	std	Y+44, r25	; 0x2c
    2610:	8b a7       	std	Y+43, r24	; 0x2b
    2612:	8b a5       	ldd	r24, Y+43	; 0x2b
    2614:	9c a5       	ldd	r25, Y+44	; 0x2c
    2616:	01 97       	sbiw	r24, 0x01	; 1
    2618:	f1 f7       	brne	.-4      	; 0x2616 <LCD_vidInit+0xf4>
    261a:	9c a7       	std	Y+44, r25	; 0x2c
    261c:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(32);

	/* function set */
	LCD_enuSendInstruction(LCD_u8_FUNCTION_SET);
    261e:	88 e3       	ldi	r24, 0x38	; 56
    2620:	0e 94 94 14 	call	0x2928	; 0x2928 <LCD_enuSendInstruction>
    2624:	80 e0       	ldi	r24, 0x00	; 0
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	a0 e8       	ldi	r26, 0x80	; 128
    262a:	bf e3       	ldi	r27, 0x3F	; 63
    262c:	8f a3       	std	Y+39, r24	; 0x27
    262e:	98 a7       	std	Y+40, r25	; 0x28
    2630:	a9 a7       	std	Y+41, r26	; 0x29
    2632:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2634:	6f a1       	ldd	r22, Y+39	; 0x27
    2636:	78 a5       	ldd	r23, Y+40	; 0x28
    2638:	89 a5       	ldd	r24, Y+41	; 0x29
    263a:	9a a5       	ldd	r25, Y+42	; 0x2a
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	4a e7       	ldi	r20, 0x7A	; 122
    2642:	53 e4       	ldi	r21, 0x43	; 67
    2644:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2648:	dc 01       	movw	r26, r24
    264a:	cb 01       	movw	r24, r22
    264c:	8b a3       	std	Y+35, r24	; 0x23
    264e:	9c a3       	std	Y+36, r25	; 0x24
    2650:	ad a3       	std	Y+37, r26	; 0x25
    2652:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2654:	6b a1       	ldd	r22, Y+35	; 0x23
    2656:	7c a1       	ldd	r23, Y+36	; 0x24
    2658:	8d a1       	ldd	r24, Y+37	; 0x25
    265a:	9e a1       	ldd	r25, Y+38	; 0x26
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	40 e8       	ldi	r20, 0x80	; 128
    2662:	5f e3       	ldi	r21, 0x3F	; 63
    2664:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2668:	88 23       	and	r24, r24
    266a:	2c f4       	brge	.+10     	; 0x2676 <LCD_vidInit+0x154>
		__ticks = 1;
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	9a a3       	std	Y+34, r25	; 0x22
    2672:	89 a3       	std	Y+33, r24	; 0x21
    2674:	3f c0       	rjmp	.+126    	; 0x26f4 <LCD_vidInit+0x1d2>
	else if (__tmp > 65535)
    2676:	6b a1       	ldd	r22, Y+35	; 0x23
    2678:	7c a1       	ldd	r23, Y+36	; 0x24
    267a:	8d a1       	ldd	r24, Y+37	; 0x25
    267c:	9e a1       	ldd	r25, Y+38	; 0x26
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	3f ef       	ldi	r19, 0xFF	; 255
    2682:	4f e7       	ldi	r20, 0x7F	; 127
    2684:	57 e4       	ldi	r21, 0x47	; 71
    2686:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    268a:	18 16       	cp	r1, r24
    268c:	4c f5       	brge	.+82     	; 0x26e0 <LCD_vidInit+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    268e:	6f a1       	ldd	r22, Y+39	; 0x27
    2690:	78 a5       	ldd	r23, Y+40	; 0x28
    2692:	89 a5       	ldd	r24, Y+41	; 0x29
    2694:	9a a5       	ldd	r25, Y+42	; 0x2a
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	40 e2       	ldi	r20, 0x20	; 32
    269c:	51 e4       	ldi	r21, 0x41	; 65
    269e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	bc 01       	movw	r22, r24
    26a8:	cd 01       	movw	r24, r26
    26aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	9a a3       	std	Y+34, r25	; 0x22
    26b4:	89 a3       	std	Y+33, r24	; 0x21
    26b6:	0f c0       	rjmp	.+30     	; 0x26d6 <LCD_vidInit+0x1b4>
    26b8:	89 e1       	ldi	r24, 0x19	; 25
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	98 a3       	std	Y+32, r25	; 0x20
    26be:	8f 8f       	std	Y+31, r24	; 0x1f
    26c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26c2:	98 a1       	ldd	r25, Y+32	; 0x20
    26c4:	01 97       	sbiw	r24, 0x01	; 1
    26c6:	f1 f7       	brne	.-4      	; 0x26c4 <LCD_vidInit+0x1a2>
    26c8:	98 a3       	std	Y+32, r25	; 0x20
    26ca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26cc:	89 a1       	ldd	r24, Y+33	; 0x21
    26ce:	9a a1       	ldd	r25, Y+34	; 0x22
    26d0:	01 97       	sbiw	r24, 0x01	; 1
    26d2:	9a a3       	std	Y+34, r25	; 0x22
    26d4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d6:	89 a1       	ldd	r24, Y+33	; 0x21
    26d8:	9a a1       	ldd	r25, Y+34	; 0x22
    26da:	00 97       	sbiw	r24, 0x00	; 0
    26dc:	69 f7       	brne	.-38     	; 0x26b8 <LCD_vidInit+0x196>
    26de:	14 c0       	rjmp	.+40     	; 0x2708 <LCD_vidInit+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e0:	6b a1       	ldd	r22, Y+35	; 0x23
    26e2:	7c a1       	ldd	r23, Y+36	; 0x24
    26e4:	8d a1       	ldd	r24, Y+37	; 0x25
    26e6:	9e a1       	ldd	r25, Y+38	; 0x26
    26e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	9a a3       	std	Y+34, r25	; 0x22
    26f2:	89 a3       	std	Y+33, r24	; 0x21
    26f4:	89 a1       	ldd	r24, Y+33	; 0x21
    26f6:	9a a1       	ldd	r25, Y+34	; 0x22
    26f8:	9e 8f       	std	Y+30, r25	; 0x1e
    26fa:	8d 8f       	std	Y+29, r24	; 0x1d
    26fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2700:	01 97       	sbiw	r24, 0x01	; 1
    2702:	f1 f7       	brne	.-4      	; 0x2700 <LCD_vidInit+0x1de>
    2704:	9e 8f       	std	Y+30, r25	; 0x1e
    2706:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1);
	/* display control */
	LCD_enuSendInstruction(LCD_u8_DISPLAY_ON_CURSOR_ON	);
    2708:	8e e0       	ldi	r24, 0x0E	; 14
    270a:	0e 94 94 14 	call	0x2928	; 0x2928 <LCD_enuSendInstruction>
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	a0 e8       	ldi	r26, 0x80	; 128
    2714:	bf e3       	ldi	r27, 0x3F	; 63
    2716:	89 8f       	std	Y+25, r24	; 0x19
    2718:	9a 8f       	std	Y+26, r25	; 0x1a
    271a:	ab 8f       	std	Y+27, r26	; 0x1b
    271c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    271e:	69 8d       	ldd	r22, Y+25	; 0x19
    2720:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2722:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2724:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	4a e7       	ldi	r20, 0x7A	; 122
    272c:	53 e4       	ldi	r21, 0x43	; 67
    272e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	8d 8b       	std	Y+21, r24	; 0x15
    2738:	9e 8b       	std	Y+22, r25	; 0x16
    273a:	af 8b       	std	Y+23, r26	; 0x17
    273c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    273e:	6d 89       	ldd	r22, Y+21	; 0x15
    2740:	7e 89       	ldd	r23, Y+22	; 0x16
    2742:	8f 89       	ldd	r24, Y+23	; 0x17
    2744:	98 8d       	ldd	r25, Y+24	; 0x18
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	40 e8       	ldi	r20, 0x80	; 128
    274c:	5f e3       	ldi	r21, 0x3F	; 63
    274e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2752:	88 23       	and	r24, r24
    2754:	2c f4       	brge	.+10     	; 0x2760 <LCD_vidInit+0x23e>
		__ticks = 1;
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	9c 8b       	std	Y+20, r25	; 0x14
    275c:	8b 8b       	std	Y+19, r24	; 0x13
    275e:	3f c0       	rjmp	.+126    	; 0x27de <LCD_vidInit+0x2bc>
	else if (__tmp > 65535)
    2760:	6d 89       	ldd	r22, Y+21	; 0x15
    2762:	7e 89       	ldd	r23, Y+22	; 0x16
    2764:	8f 89       	ldd	r24, Y+23	; 0x17
    2766:	98 8d       	ldd	r25, Y+24	; 0x18
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	3f ef       	ldi	r19, 0xFF	; 255
    276c:	4f e7       	ldi	r20, 0x7F	; 127
    276e:	57 e4       	ldi	r21, 0x47	; 71
    2770:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2774:	18 16       	cp	r1, r24
    2776:	4c f5       	brge	.+82     	; 0x27ca <LCD_vidInit+0x2a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2778:	69 8d       	ldd	r22, Y+25	; 0x19
    277a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    277c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    277e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	40 e2       	ldi	r20, 0x20	; 32
    2786:	51 e4       	ldi	r21, 0x41	; 65
    2788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	bc 01       	movw	r22, r24
    2792:	cd 01       	movw	r24, r26
    2794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	9c 8b       	std	Y+20, r25	; 0x14
    279e:	8b 8b       	std	Y+19, r24	; 0x13
    27a0:	0f c0       	rjmp	.+30     	; 0x27c0 <LCD_vidInit+0x29e>
    27a2:	89 e1       	ldi	r24, 0x19	; 25
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	9a 8b       	std	Y+18, r25	; 0x12
    27a8:	89 8b       	std	Y+17, r24	; 0x11
    27aa:	89 89       	ldd	r24, Y+17	; 0x11
    27ac:	9a 89       	ldd	r25, Y+18	; 0x12
    27ae:	01 97       	sbiw	r24, 0x01	; 1
    27b0:	f1 f7       	brne	.-4      	; 0x27ae <LCD_vidInit+0x28c>
    27b2:	9a 8b       	std	Y+18, r25	; 0x12
    27b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b6:	8b 89       	ldd	r24, Y+19	; 0x13
    27b8:	9c 89       	ldd	r25, Y+20	; 0x14
    27ba:	01 97       	sbiw	r24, 0x01	; 1
    27bc:	9c 8b       	std	Y+20, r25	; 0x14
    27be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c0:	8b 89       	ldd	r24, Y+19	; 0x13
    27c2:	9c 89       	ldd	r25, Y+20	; 0x14
    27c4:	00 97       	sbiw	r24, 0x00	; 0
    27c6:	69 f7       	brne	.-38     	; 0x27a2 <LCD_vidInit+0x280>
    27c8:	14 c0       	rjmp	.+40     	; 0x27f2 <LCD_vidInit+0x2d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ca:	6d 89       	ldd	r22, Y+21	; 0x15
    27cc:	7e 89       	ldd	r23, Y+22	; 0x16
    27ce:	8f 89       	ldd	r24, Y+23	; 0x17
    27d0:	98 8d       	ldd	r25, Y+24	; 0x18
    27d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d6:	dc 01       	movw	r26, r24
    27d8:	cb 01       	movw	r24, r22
    27da:	9c 8b       	std	Y+20, r25	; 0x14
    27dc:	8b 8b       	std	Y+19, r24	; 0x13
    27de:	8b 89       	ldd	r24, Y+19	; 0x13
    27e0:	9c 89       	ldd	r25, Y+20	; 0x14
    27e2:	98 8b       	std	Y+16, r25	; 0x10
    27e4:	8f 87       	std	Y+15, r24	; 0x0f
    27e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    27e8:	98 89       	ldd	r25, Y+16	; 0x10
    27ea:	01 97       	sbiw	r24, 0x01	; 1
    27ec:	f1 f7       	brne	.-4      	; 0x27ea <LCD_vidInit+0x2c8>
    27ee:	98 8b       	std	Y+16, r25	; 0x10
    27f0:	8f 87       	std	Y+15, r24	; 0x0f
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	a0 e0       	ldi	r26, 0x00	; 0
    27f8:	b0 e4       	ldi	r27, 0x40	; 64
    27fa:	8b 87       	std	Y+11, r24	; 0x0b
    27fc:	9c 87       	std	Y+12, r25	; 0x0c
    27fe:	ad 87       	std	Y+13, r26	; 0x0d
    2800:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2802:	6b 85       	ldd	r22, Y+11	; 0x0b
    2804:	7c 85       	ldd	r23, Y+12	; 0x0c
    2806:	8d 85       	ldd	r24, Y+13	; 0x0d
    2808:	9e 85       	ldd	r25, Y+14	; 0x0e
    280a:	20 e0       	ldi	r18, 0x00	; 0
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	4a e7       	ldi	r20, 0x7A	; 122
    2810:	53 e4       	ldi	r21, 0x43	; 67
    2812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2816:	dc 01       	movw	r26, r24
    2818:	cb 01       	movw	r24, r22
    281a:	8f 83       	std	Y+7, r24	; 0x07
    281c:	98 87       	std	Y+8, r25	; 0x08
    281e:	a9 87       	std	Y+9, r26	; 0x09
    2820:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2822:	6f 81       	ldd	r22, Y+7	; 0x07
    2824:	78 85       	ldd	r23, Y+8	; 0x08
    2826:	89 85       	ldd	r24, Y+9	; 0x09
    2828:	9a 85       	ldd	r25, Y+10	; 0x0a
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	40 e8       	ldi	r20, 0x80	; 128
    2830:	5f e3       	ldi	r21, 0x3F	; 63
    2832:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2836:	88 23       	and	r24, r24
    2838:	2c f4       	brge	.+10     	; 0x2844 <LCD_vidInit+0x322>
		__ticks = 1;
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	9e 83       	std	Y+6, r25	; 0x06
    2840:	8d 83       	std	Y+5, r24	; 0x05
    2842:	3f c0       	rjmp	.+126    	; 0x28c2 <LCD_vidInit+0x3a0>
	else if (__tmp > 65535)
    2844:	6f 81       	ldd	r22, Y+7	; 0x07
    2846:	78 85       	ldd	r23, Y+8	; 0x08
    2848:	89 85       	ldd	r24, Y+9	; 0x09
    284a:	9a 85       	ldd	r25, Y+10	; 0x0a
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	3f ef       	ldi	r19, 0xFF	; 255
    2850:	4f e7       	ldi	r20, 0x7F	; 127
    2852:	57 e4       	ldi	r21, 0x47	; 71
    2854:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2858:	18 16       	cp	r1, r24
    285a:	4c f5       	brge	.+82     	; 0x28ae <LCD_vidInit+0x38c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    285c:	6b 85       	ldd	r22, Y+11	; 0x0b
    285e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2860:	8d 85       	ldd	r24, Y+13	; 0x0d
    2862:	9e 85       	ldd	r25, Y+14	; 0x0e
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	40 e2       	ldi	r20, 0x20	; 32
    286a:	51 e4       	ldi	r21, 0x41	; 65
    286c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	bc 01       	movw	r22, r24
    2876:	cd 01       	movw	r24, r26
    2878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	9e 83       	std	Y+6, r25	; 0x06
    2882:	8d 83       	std	Y+5, r24	; 0x05
    2884:	0f c0       	rjmp	.+30     	; 0x28a4 <LCD_vidInit+0x382>
    2886:	89 e1       	ldi	r24, 0x19	; 25
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	9c 83       	std	Y+4, r25	; 0x04
    288c:	8b 83       	std	Y+3, r24	; 0x03
    288e:	8b 81       	ldd	r24, Y+3	; 0x03
    2890:	9c 81       	ldd	r25, Y+4	; 0x04
    2892:	01 97       	sbiw	r24, 0x01	; 1
    2894:	f1 f7       	brne	.-4      	; 0x2892 <LCD_vidInit+0x370>
    2896:	9c 83       	std	Y+4, r25	; 0x04
    2898:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    289a:	8d 81       	ldd	r24, Y+5	; 0x05
    289c:	9e 81       	ldd	r25, Y+6	; 0x06
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	9e 83       	std	Y+6, r25	; 0x06
    28a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a4:	8d 81       	ldd	r24, Y+5	; 0x05
    28a6:	9e 81       	ldd	r25, Y+6	; 0x06
    28a8:	00 97       	sbiw	r24, 0x00	; 0
    28aa:	69 f7       	brne	.-38     	; 0x2886 <LCD_vidInit+0x364>
    28ac:	14 c0       	rjmp	.+40     	; 0x28d6 <LCD_vidInit+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ae:	6f 81       	ldd	r22, Y+7	; 0x07
    28b0:	78 85       	ldd	r23, Y+8	; 0x08
    28b2:	89 85       	ldd	r24, Y+9	; 0x09
    28b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	9e 83       	std	Y+6, r25	; 0x06
    28c0:	8d 83       	std	Y+5, r24	; 0x05
    28c2:	8d 81       	ldd	r24, Y+5	; 0x05
    28c4:	9e 81       	ldd	r25, Y+6	; 0x06
    28c6:	9a 83       	std	Y+2, r25	; 0x02
    28c8:	89 83       	std	Y+1, r24	; 0x01
    28ca:	89 81       	ldd	r24, Y+1	; 0x01
    28cc:	9a 81       	ldd	r25, Y+2	; 0x02
    28ce:	01 97       	sbiw	r24, 0x01	; 1
    28d0:	f1 f7       	brne	.-4      	; 0x28ce <LCD_vidInit+0x3ac>
    28d2:	9a 83       	std	Y+2, r25	; 0x02
    28d4:	89 83       	std	Y+1, r24	; 0x01

	LCD_enuSendInstruction(LCD_u8_RETURN_HOME);*/

	_delay_ms(2);
	/* entry mode */
	LCD_enuSendInstruction(LCD_u8_CURSOR_INC_SHIFT_OFF);
    28d6:	86 e0       	ldi	r24, 0x06	; 6
    28d8:	0e 94 94 14 	call	0x2928	; 0x2928 <LCD_enuSendInstruction>


}
    28dc:	e8 96       	adiw	r28, 0x38	; 56
    28de:	0f b6       	in	r0, 0x3f	; 63
    28e0:	f8 94       	cli
    28e2:	de bf       	out	0x3e, r29	; 62
    28e4:	0f be       	out	0x3f, r0	; 63
    28e6:	cd bf       	out	0x3d, r28	; 61
    28e8:	cf 91       	pop	r28
    28ea:	df 91       	pop	r29
    28ec:	08 95       	ret

000028ee <LCD_enuSendCharacter>:


LCD_tenuErrorStatus	LCD_enuSendCharacter(u8 Copy_u8Character)
{
    28ee:	df 93       	push	r29
    28f0:	cf 93       	push	r28
    28f2:	00 d0       	rcall	.+0      	; 0x28f4 <LCD_enuSendCharacter+0x6>
    28f4:	cd b7       	in	r28, 0x3d	; 61
    28f6:	de b7       	in	r29, 0x3e	; 62
    28f8:	8a 83       	std	Y+2, r24	; 0x02
	LCD_tenuErrorStatus Local_enuErrorStatus = LCD_OK;
    28fa:	19 82       	std	Y+1, r1	; 0x01

	/* Rs pin ----> high */
	DIO_enuSetPinValue(LCD_u8_RS_PORT, LCD_u8_RS_PIN, DIO_u8_HIGH);
    28fc:	83 e0       	ldi	r24, 0x03	; 3
    28fe:	60 e0       	ldi	r22, 0x00	; 0
    2900:	41 e0       	ldi	r20, 0x01	; 1
    2902:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>

	/* RW pin ----> low */
	DIO_enuSetPinValue(LCD_u8_RW_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
    2906:	83 e0       	ldi	r24, 0x03	; 3
    2908:	61 e0       	ldi	r22, 0x01	; 1
    290a:	40 e0       	ldi	r20, 0x00	; 0
    290c:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>

	/* send the data */
	DIO_enuSetPortValue(LCD_u8_D0_TO_D7_CONNECTION, Copy_u8Character);
    2910:	82 e0       	ldi	r24, 0x02	; 2
    2912:	6a 81       	ldd	r22, Y+2	; 0x02
    2914:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <DIO_enuSetPortValue>

	/* send enable */
	LCD_vidSendEnable();
    2918:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <LCD_vidSendEnable>

	return Local_enuErrorStatus;
    291c:	89 81       	ldd	r24, Y+1	; 0x01
}
    291e:	0f 90       	pop	r0
    2920:	0f 90       	pop	r0
    2922:	cf 91       	pop	r28
    2924:	df 91       	pop	r29
    2926:	08 95       	ret

00002928 <LCD_enuSendInstruction>:



LCD_tenuErrorStatus	LCD_enuSendInstruction(u8 Copy_u8Instruction)
{
    2928:	df 93       	push	r29
    292a:	cf 93       	push	r28
    292c:	00 d0       	rcall	.+0      	; 0x292e <LCD_enuSendInstruction+0x6>
    292e:	cd b7       	in	r28, 0x3d	; 61
    2930:	de b7       	in	r29, 0x3e	; 62
    2932:	8a 83       	std	Y+2, r24	; 0x02
	LCD_tenuErrorStatus Local_enuErrorStatus = LCD_OK;
    2934:	19 82       	std	Y+1, r1	; 0x01
		Local_enuErrorStatus = LCD_NOK;
	}
	else
	{
		/* Rs pin ----> low */
		DIO_enuSetPinValue(LCD_u8_RS_PORT, LCD_u8_RS_PIN, DIO_u8_LOW);
    2936:	83 e0       	ldi	r24, 0x03	; 3
    2938:	60 e0       	ldi	r22, 0x00	; 0
    293a:	40 e0       	ldi	r20, 0x00	; 0
    293c:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>

		/* RW pin ----> low */
		DIO_enuSetPinValue(LCD_u8_RW_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
    2940:	83 e0       	ldi	r24, 0x03	; 3
    2942:	61 e0       	ldi	r22, 0x01	; 1
    2944:	40 e0       	ldi	r20, 0x00	; 0
    2946:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>

		/* send the instruction */
		DIO_enuSetPortValue(LCD_u8_D0_TO_D7_CONNECTION, Copy_u8Instruction);
    294a:	82 e0       	ldi	r24, 0x02	; 2
    294c:	6a 81       	ldd	r22, Y+2	; 0x02
    294e:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <DIO_enuSetPortValue>
		DIO_enuSetPinValue(LCD_u8_D6_PORT, LCD_u8_D6_PIN, (Copy_u8Instruction >> 6) & 0x01);
		DIO_enuSetPinValue(LCD_u8_D7_PORT, LCD_u8_D7_PIN, (Copy_u8Instruction >> 7) & 0x01);
		*/

		/* send enable */
		LCD_vidSendEnable();
    2952:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <LCD_vidSendEnable>


	}

	return Local_enuErrorStatus;
    2956:	89 81       	ldd	r24, Y+1	; 0x01
}
    2958:	0f 90       	pop	r0
    295a:	0f 90       	pop	r0
    295c:	cf 91       	pop	r28
    295e:	df 91       	pop	r29
    2960:	08 95       	ret

00002962 <LCD_enuSendString>:



LCD_tenuErrorStatus	LCD_enuSendString(u8* Add_pu8String)
{
    2962:	df 93       	push	r29
    2964:	cf 93       	push	r28
    2966:	00 d0       	rcall	.+0      	; 0x2968 <LCD_enuSendString+0x6>
    2968:	0f 92       	push	r0
    296a:	cd b7       	in	r28, 0x3d	; 61
    296c:	de b7       	in	r29, 0x3e	; 62
    296e:	9b 83       	std	Y+3, r25	; 0x03
    2970:	8a 83       	std	Y+2, r24	; 0x02
	LCD_tenuErrorStatus Local_enuErrorStatus = LCD_OK;
    2972:	19 82       	std	Y+1, r1	; 0x01

	if(Add_pu8String == NULL)
    2974:	8a 81       	ldd	r24, Y+2	; 0x02
    2976:	9b 81       	ldd	r25, Y+3	; 0x03
    2978:	00 97       	sbiw	r24, 0x00	; 0
    297a:	69 f4       	brne	.+26     	; 0x2996 <LCD_enuSendString+0x34>
	{
		Local_enuErrorStatus = LCD_NOK;
    297c:	81 e0       	ldi	r24, 0x01	; 1
    297e:	89 83       	std	Y+1, r24	; 0x01
    2980:	0f c0       	rjmp	.+30     	; 0x29a0 <LCD_enuSendString+0x3e>
	}
	else
	{
		while(*Add_pu8String != '\0')
		{
			LCD_enuSendCharacter(*Add_pu8String);
    2982:	ea 81       	ldd	r30, Y+2	; 0x02
    2984:	fb 81       	ldd	r31, Y+3	; 0x03
    2986:	80 81       	ld	r24, Z
    2988:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_enuSendCharacter>
			Add_pu8String++;
    298c:	8a 81       	ldd	r24, Y+2	; 0x02
    298e:	9b 81       	ldd	r25, Y+3	; 0x03
    2990:	01 96       	adiw	r24, 0x01	; 1
    2992:	9b 83       	std	Y+3, r25	; 0x03
    2994:	8a 83       	std	Y+2, r24	; 0x02
	{
		Local_enuErrorStatus = LCD_NOK;
	}
	else
	{
		while(*Add_pu8String != '\0')
    2996:	ea 81       	ldd	r30, Y+2	; 0x02
    2998:	fb 81       	ldd	r31, Y+3	; 0x03
    299a:	80 81       	ld	r24, Z
    299c:	88 23       	and	r24, r24
    299e:	89 f7       	brne	.-30     	; 0x2982 <LCD_enuSendString+0x20>
			LCD_enuSendCharacter(*Add_pu8String);
			Add_pu8String++;
		}
	}

	return Local_enuErrorStatus;
    29a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    29a2:	0f 90       	pop	r0
    29a4:	0f 90       	pop	r0
    29a6:	0f 90       	pop	r0
    29a8:	cf 91       	pop	r28
    29aa:	df 91       	pop	r29
    29ac:	08 95       	ret

000029ae <LCD_enuGoTo>:

LCD_tenuErrorStatus	LCD_enuGoTo(u8 Copy_u8Row, u8 Copy_u8Column)
{
    29ae:	df 93       	push	r29
    29b0:	cf 93       	push	r28
    29b2:	00 d0       	rcall	.+0      	; 0x29b4 <LCD_enuGoTo+0x6>
    29b4:	00 d0       	rcall	.+0      	; 0x29b6 <LCD_enuGoTo+0x8>
    29b6:	0f 92       	push	r0
    29b8:	cd b7       	in	r28, 0x3d	; 61
    29ba:	de b7       	in	r29, 0x3e	; 62
    29bc:	8a 83       	std	Y+2, r24	; 0x02
    29be:	6b 83       	std	Y+3, r22	; 0x03
	LCD_tenuErrorStatus Local_enuErrorStatus = LCD_OK;
    29c0:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_u8Row > LCD_u8_ROW1) || (Copy_u8Column > LCD_u8_COL15))
    29c2:	8a 81       	ldd	r24, Y+2	; 0x02
    29c4:	82 30       	cpi	r24, 0x02	; 2
    29c6:	18 f4       	brcc	.+6      	; 0x29ce <LCD_enuGoTo+0x20>
    29c8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ca:	80 31       	cpi	r24, 0x10	; 16
    29cc:	18 f0       	brcs	.+6      	; 0x29d4 <LCD_enuGoTo+0x26>
	{
		Local_enuErrorStatus = LCD_NOK;
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	89 83       	std	Y+1, r24	; 0x01
    29d2:	19 c0       	rjmp	.+50     	; 0x2a06 <LCD_enuGoTo+0x58>
	}
	else
	{
		switch(Copy_u8Row)
    29d4:	8a 81       	ldd	r24, Y+2	; 0x02
    29d6:	28 2f       	mov	r18, r24
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	3d 83       	std	Y+5, r19	; 0x05
    29dc:	2c 83       	std	Y+4, r18	; 0x04
    29de:	8c 81       	ldd	r24, Y+4	; 0x04
    29e0:	9d 81       	ldd	r25, Y+5	; 0x05
    29e2:	00 97       	sbiw	r24, 0x00	; 0
    29e4:	31 f0       	breq	.+12     	; 0x29f2 <LCD_enuGoTo+0x44>
    29e6:	2c 81       	ldd	r18, Y+4	; 0x04
    29e8:	3d 81       	ldd	r19, Y+5	; 0x05
    29ea:	21 30       	cpi	r18, 0x01	; 1
    29ec:	31 05       	cpc	r19, r1
    29ee:	31 f0       	breq	.+12     	; 0x29fc <LCD_enuGoTo+0x4e>
    29f0:	0a c0       	rjmp	.+20     	; 0x2a06 <LCD_enuGoTo+0x58>
		{
			case LCD_u8_ROW0:
				LCD_enuSendInstruction(LCD_u8_FIRST_DDRAM_ADDRESS + Copy_u8Column);
    29f2:	8b 81       	ldd	r24, Y+3	; 0x03
    29f4:	80 58       	subi	r24, 0x80	; 128
    29f6:	0e 94 94 14 	call	0x2928	; 0x2928 <LCD_enuSendInstruction>
    29fa:	05 c0       	rjmp	.+10     	; 0x2a06 <LCD_enuGoTo+0x58>
				break;

			case LCD_u8_ROW1:
				LCD_enuSendInstruction(LCD_u8_FIRST_DDRAM_ADDRESS | (Copy_u8Column + 0x40));
    29fc:	8b 81       	ldd	r24, Y+3	; 0x03
    29fe:	80 5c       	subi	r24, 0xC0	; 192
    2a00:	80 68       	ori	r24, 0x80	; 128
    2a02:	0e 94 94 14 	call	0x2928	; 0x2928 <LCD_enuSendInstruction>

		}
	}


	return Local_enuErrorStatus;
    2a06:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a08:	0f 90       	pop	r0
    2a0a:	0f 90       	pop	r0
    2a0c:	0f 90       	pop	r0
    2a0e:	0f 90       	pop	r0
    2a10:	0f 90       	pop	r0
    2a12:	cf 91       	pop	r28
    2a14:	df 91       	pop	r29
    2a16:	08 95       	ret

00002a18 <LCD_enuSendCustomCharacter>:


LCD_tenuErrorStatus	LCD_enuSendCustomCharacter(u8 *Add_pu8Pattern, u8 Copy_u8NumOfBlock, u8 Copy_u8Row, u8 Copy_u8Column)
{
    2a18:	df 93       	push	r29
    2a1a:	cf 93       	push	r28
    2a1c:	cd b7       	in	r28, 0x3d	; 61
    2a1e:	de b7       	in	r29, 0x3e	; 62
    2a20:	65 97       	sbiw	r28, 0x15	; 21
    2a22:	0f b6       	in	r0, 0x3f	; 63
    2a24:	f8 94       	cli
    2a26:	de bf       	out	0x3e, r29	; 62
    2a28:	0f be       	out	0x3f, r0	; 63
    2a2a:	cd bf       	out	0x3d, r28	; 61
    2a2c:	9a 8b       	std	Y+18, r25	; 0x12
    2a2e:	89 8b       	std	Y+17, r24	; 0x11
    2a30:	6b 8b       	std	Y+19, r22	; 0x13
    2a32:	4c 8b       	std	Y+20, r20	; 0x14
    2a34:	2d 8b       	std	Y+21, r18	; 0x15
	LCD_tenuErrorStatus Local_enuErrorStatus = LCD_OK;
    2a36:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_u8Iterator;

	if(Add_pu8Pattern == NULL || Copy_u8NumOfBlock > 7|| (Copy_u8Row > LCD_u8_ROW1) || (Copy_u8Column > LCD_u8_COL15))
    2a38:	89 89       	ldd	r24, Y+17	; 0x11
    2a3a:	9a 89       	ldd	r25, Y+18	; 0x12
    2a3c:	00 97       	sbiw	r24, 0x00	; 0
    2a3e:	49 f0       	breq	.+18     	; 0x2a52 <LCD_enuSendCustomCharacter+0x3a>
    2a40:	8b 89       	ldd	r24, Y+19	; 0x13
    2a42:	88 30       	cpi	r24, 0x08	; 8
    2a44:	30 f4       	brcc	.+12     	; 0x2a52 <LCD_enuSendCustomCharacter+0x3a>
    2a46:	8c 89       	ldd	r24, Y+20	; 0x14
    2a48:	82 30       	cpi	r24, 0x02	; 2
    2a4a:	18 f4       	brcc	.+6      	; 0x2a52 <LCD_enuSendCustomCharacter+0x3a>
    2a4c:	8d 89       	ldd	r24, Y+21	; 0x15
    2a4e:	80 31       	cpi	r24, 0x10	; 16
    2a50:	18 f0       	brcs	.+6      	; 0x2a58 <LCD_enuSendCustomCharacter+0x40>
	{
		Local_enuErrorStatus = LCD_NOK;
    2a52:	81 e0       	ldi	r24, 0x01	; 1
    2a54:	88 8b       	std	Y+16, r24	; 0x10
    2a56:	99 c0       	rjmp	.+306    	; 0x2b8a <LCD_enuSendCustomCharacter+0x172>
	}
	else
	{
		LCD_enuSendInstruction(LCD_u8_FIRST_CGRAM_ADDRESS + (Copy_u8NumOfBlock * 8));
    2a58:	8b 89       	ldd	r24, Y+19	; 0x13
    2a5a:	88 2f       	mov	r24, r24
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	08 96       	adiw	r24, 0x08	; 8
    2a60:	88 0f       	add	r24, r24
    2a62:	99 1f       	adc	r25, r25
    2a64:	88 0f       	add	r24, r24
    2a66:	99 1f       	adc	r25, r25
    2a68:	88 0f       	add	r24, r24
    2a6a:	99 1f       	adc	r25, r25
    2a6c:	0e 94 94 14 	call	0x2928	; 0x2928 <LCD_enuSendInstruction>

		for(Local_u8Iterator = 0; Local_u8Iterator < 8; Local_u8Iterator++)
    2a70:	1f 86       	std	Y+15, r1	; 0x0f
    2a72:	80 c0       	rjmp	.+256    	; 0x2b74 <LCD_enuSendCustomCharacter+0x15c>
		{
			LCD_enuSendCharacter(Add_pu8Pattern[Local_u8Iterator]);
    2a74:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a76:	28 2f       	mov	r18, r24
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	89 89       	ldd	r24, Y+17	; 0x11
    2a7c:	9a 89       	ldd	r25, Y+18	; 0x12
    2a7e:	fc 01       	movw	r30, r24
    2a80:	e2 0f       	add	r30, r18
    2a82:	f3 1f       	adc	r31, r19
    2a84:	80 81       	ld	r24, Z
    2a86:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_enuSendCharacter>
    2a8a:	80 e0       	ldi	r24, 0x00	; 0
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	a0 ea       	ldi	r26, 0xA0	; 160
    2a90:	b0 e4       	ldi	r27, 0x40	; 64
    2a92:	8b 87       	std	Y+11, r24	; 0x0b
    2a94:	9c 87       	std	Y+12, r25	; 0x0c
    2a96:	ad 87       	std	Y+13, r26	; 0x0d
    2a98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	4a e7       	ldi	r20, 0x7A	; 122
    2aa8:	53 e4       	ldi	r21, 0x43	; 67
    2aaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aae:	dc 01       	movw	r26, r24
    2ab0:	cb 01       	movw	r24, r22
    2ab2:	8f 83       	std	Y+7, r24	; 0x07
    2ab4:	98 87       	std	Y+8, r25	; 0x08
    2ab6:	a9 87       	std	Y+9, r26	; 0x09
    2ab8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2aba:	6f 81       	ldd	r22, Y+7	; 0x07
    2abc:	78 85       	ldd	r23, Y+8	; 0x08
    2abe:	89 85       	ldd	r24, Y+9	; 0x09
    2ac0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	40 e8       	ldi	r20, 0x80	; 128
    2ac8:	5f e3       	ldi	r21, 0x3F	; 63
    2aca:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2ace:	88 23       	and	r24, r24
    2ad0:	2c f4       	brge	.+10     	; 0x2adc <LCD_enuSendCustomCharacter+0xc4>
		__ticks = 1;
    2ad2:	81 e0       	ldi	r24, 0x01	; 1
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	9e 83       	std	Y+6, r25	; 0x06
    2ad8:	8d 83       	std	Y+5, r24	; 0x05
    2ada:	3f c0       	rjmp	.+126    	; 0x2b5a <LCD_enuSendCustomCharacter+0x142>
	else if (__tmp > 65535)
    2adc:	6f 81       	ldd	r22, Y+7	; 0x07
    2ade:	78 85       	ldd	r23, Y+8	; 0x08
    2ae0:	89 85       	ldd	r24, Y+9	; 0x09
    2ae2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	3f ef       	ldi	r19, 0xFF	; 255
    2ae8:	4f e7       	ldi	r20, 0x7F	; 127
    2aea:	57 e4       	ldi	r21, 0x47	; 71
    2aec:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2af0:	18 16       	cp	r1, r24
    2af2:	4c f5       	brge	.+82     	; 0x2b46 <LCD_enuSendCustomCharacter+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2af6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2af8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2afa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2afc:	20 e0       	ldi	r18, 0x00	; 0
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	40 e2       	ldi	r20, 0x20	; 32
    2b02:	51 e4       	ldi	r21, 0x41	; 65
    2b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b08:	dc 01       	movw	r26, r24
    2b0a:	cb 01       	movw	r24, r22
    2b0c:	bc 01       	movw	r22, r24
    2b0e:	cd 01       	movw	r24, r26
    2b10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b14:	dc 01       	movw	r26, r24
    2b16:	cb 01       	movw	r24, r22
    2b18:	9e 83       	std	Y+6, r25	; 0x06
    2b1a:	8d 83       	std	Y+5, r24	; 0x05
    2b1c:	0f c0       	rjmp	.+30     	; 0x2b3c <LCD_enuSendCustomCharacter+0x124>
    2b1e:	89 e1       	ldi	r24, 0x19	; 25
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	9c 83       	std	Y+4, r25	; 0x04
    2b24:	8b 83       	std	Y+3, r24	; 0x03
    2b26:	8b 81       	ldd	r24, Y+3	; 0x03
    2b28:	9c 81       	ldd	r25, Y+4	; 0x04
    2b2a:	01 97       	sbiw	r24, 0x01	; 1
    2b2c:	f1 f7       	brne	.-4      	; 0x2b2a <LCD_enuSendCustomCharacter+0x112>
    2b2e:	9c 83       	std	Y+4, r25	; 0x04
    2b30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b32:	8d 81       	ldd	r24, Y+5	; 0x05
    2b34:	9e 81       	ldd	r25, Y+6	; 0x06
    2b36:	01 97       	sbiw	r24, 0x01	; 1
    2b38:	9e 83       	std	Y+6, r25	; 0x06
    2b3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b40:	00 97       	sbiw	r24, 0x00	; 0
    2b42:	69 f7       	brne	.-38     	; 0x2b1e <LCD_enuSendCustomCharacter+0x106>
    2b44:	14 c0       	rjmp	.+40     	; 0x2b6e <LCD_enuSendCustomCharacter+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b46:	6f 81       	ldd	r22, Y+7	; 0x07
    2b48:	78 85       	ldd	r23, Y+8	; 0x08
    2b4a:	89 85       	ldd	r24, Y+9	; 0x09
    2b4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b52:	dc 01       	movw	r26, r24
    2b54:	cb 01       	movw	r24, r22
    2b56:	9e 83       	std	Y+6, r25	; 0x06
    2b58:	8d 83       	std	Y+5, r24	; 0x05
    2b5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b5e:	9a 83       	std	Y+2, r25	; 0x02
    2b60:	89 83       	std	Y+1, r24	; 0x01
    2b62:	89 81       	ldd	r24, Y+1	; 0x01
    2b64:	9a 81       	ldd	r25, Y+2	; 0x02
    2b66:	01 97       	sbiw	r24, 0x01	; 1
    2b68:	f1 f7       	brne	.-4      	; 0x2b66 <LCD_enuSendCustomCharacter+0x14e>
    2b6a:	9a 83       	std	Y+2, r25	; 0x02
    2b6c:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		LCD_enuSendInstruction(LCD_u8_FIRST_CGRAM_ADDRESS + (Copy_u8NumOfBlock * 8));

		for(Local_u8Iterator = 0; Local_u8Iterator < 8; Local_u8Iterator++)
    2b6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b70:	8f 5f       	subi	r24, 0xFF	; 255
    2b72:	8f 87       	std	Y+15, r24	; 0x0f
    2b74:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b76:	88 30       	cpi	r24, 0x08	; 8
    2b78:	08 f4       	brcc	.+2      	; 0x2b7c <LCD_enuSendCustomCharacter+0x164>
    2b7a:	7c cf       	rjmp	.-264    	; 0x2a74 <LCD_enuSendCustomCharacter+0x5c>
			LCD_enuSendCharacter(Add_pu8Pattern[Local_u8Iterator]);

			_delay_ms(5);
		}

		LCD_enuGoTo(Copy_u8Row, Copy_u8Column);
    2b7c:	8c 89       	ldd	r24, Y+20	; 0x14
    2b7e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b80:	0e 94 d7 14 	call	0x29ae	; 0x29ae <LCD_enuGoTo>

		LCD_enuSendCharacter(Copy_u8NumOfBlock);
    2b84:	8b 89       	ldd	r24, Y+19	; 0x13
    2b86:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_enuSendCharacter>
	}

	return Local_enuErrorStatus;
    2b8a:	88 89       	ldd	r24, Y+16	; 0x10
}
    2b8c:	65 96       	adiw	r28, 0x15	; 21
    2b8e:	0f b6       	in	r0, 0x3f	; 63
    2b90:	f8 94       	cli
    2b92:	de bf       	out	0x3e, r29	; 62
    2b94:	0f be       	out	0x3f, r0	; 63
    2b96:	cd bf       	out	0x3d, r28	; 61
    2b98:	cf 91       	pop	r28
    2b9a:	df 91       	pop	r29
    2b9c:	08 95       	ret

00002b9e <LCD_enuSendNumber>:
void	LCD_enuSendNumber(u32 Copy_u8Number)
{
    2b9e:	0f 93       	push	r16
    2ba0:	1f 93       	push	r17
    2ba2:	df 93       	push	r29
    2ba4:	cf 93       	push	r28
    2ba6:	cd b7       	in	r28, 0x3d	; 61
    2ba8:	de b7       	in	r29, 0x3e	; 62
    2baa:	60 97       	sbiw	r28, 0x10	; 16
    2bac:	0f b6       	in	r0, 0x3f	; 63
    2bae:	f8 94       	cli
    2bb0:	de bf       	out	0x3e, r29	; 62
    2bb2:	0f be       	out	0x3f, r0	; 63
    2bb4:	cd bf       	out	0x3d, r28	; 61
    2bb6:	6d 87       	std	Y+13, r22	; 0x0d
    2bb8:	7e 87       	std	Y+14, r23	; 0x0e
    2bba:	8f 87       	std	Y+15, r24	; 0x0f
    2bbc:	98 8b       	std	Y+16, r25	; 0x10

	if(Copy_u8Number==0)
    2bbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bc2:	af 85       	ldd	r26, Y+15	; 0x0f
    2bc4:	b8 89       	ldd	r27, Y+16	; 0x10
    2bc6:	00 97       	sbiw	r24, 0x00	; 0
    2bc8:	a1 05       	cpc	r26, r1
    2bca:	b1 05       	cpc	r27, r1
    2bcc:	21 f4       	brne	.+8      	; 0x2bd6 <LCD_enuSendNumber+0x38>
	{
		LCD_enuSendCharacter(Copy_u8Number+0x30);
    2bce:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bd0:	80 5d       	subi	r24, 0xD0	; 208
    2bd2:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_enuSendCharacter>
	}
u8 Local_u8ArrayNumber [10] ={0};
    2bd6:	8a e0       	ldi	r24, 0x0A	; 10
    2bd8:	fe 01       	movw	r30, r28
    2bda:	33 96       	adiw	r30, 0x03	; 3
    2bdc:	df 01       	movw	r26, r30
    2bde:	98 2f       	mov	r25, r24
    2be0:	1d 92       	st	X+, r1
    2be2:	9a 95       	dec	r25
    2be4:	e9 f7       	brne	.-6      	; 0x2be0 <LCD_enuSendNumber+0x42>

u8 Local_u8Counter=1 ;
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	8a 83       	std	Y+2, r24	; 0x02
u8 Local_u8CounterLoop=0; // (Copy_u8Number =2019
    2bea:	19 82       	std	Y+1, r1	; 0x01
    2bec:	2d c0       	rjmp	.+90     	; 0x2c48 <LCD_enuSendNumber+0xaa>
while(Copy_u8Number!=0)
{
Local_u8ArrayNumber[Local_u8Counter]=  (Copy_u8Number%10); // x=(Copy_u8Number%10)  x= *9
    2bee:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf0:	08 2f       	mov	r16, r24
    2bf2:	10 e0       	ldi	r17, 0x00	; 0
    2bf4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bf6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bf8:	af 85       	ldd	r26, Y+15	; 0x0f
    2bfa:	b8 89       	ldd	r27, Y+16	; 0x10
    2bfc:	2a e0       	ldi	r18, 0x0A	; 10
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	40 e0       	ldi	r20, 0x00	; 0
    2c02:	50 e0       	ldi	r21, 0x00	; 0
    2c04:	bc 01       	movw	r22, r24
    2c06:	cd 01       	movw	r24, r26
    2c08:	0e 94 c9 1b 	call	0x3792	; 0x3792 <__udivmodsi4>
    2c0c:	dc 01       	movw	r26, r24
    2c0e:	cb 01       	movw	r24, r22
    2c10:	28 2f       	mov	r18, r24
    2c12:	ce 01       	movw	r24, r28
    2c14:	03 96       	adiw	r24, 0x03	; 3
    2c16:	fc 01       	movw	r30, r24
    2c18:	e0 0f       	add	r30, r16
    2c1a:	f1 1f       	adc	r31, r17
    2c1c:	20 83       	st	Z, r18
Copy_u8Number=(Copy_u8Number/10);
    2c1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c20:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c22:	af 85       	ldd	r26, Y+15	; 0x0f
    2c24:	b8 89       	ldd	r27, Y+16	; 0x10
    2c26:	2a e0       	ldi	r18, 0x0A	; 10
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	40 e0       	ldi	r20, 0x00	; 0
    2c2c:	50 e0       	ldi	r21, 0x00	; 0
    2c2e:	bc 01       	movw	r22, r24
    2c30:	cd 01       	movw	r24, r26
    2c32:	0e 94 c9 1b 	call	0x3792	; 0x3792 <__udivmodsi4>
    2c36:	da 01       	movw	r26, r20
    2c38:	c9 01       	movw	r24, r18
    2c3a:	8d 87       	std	Y+13, r24	; 0x0d
    2c3c:	9e 87       	std	Y+14, r25	; 0x0e
    2c3e:	af 87       	std	Y+15, r26	; 0x0f
    2c40:	b8 8b       	std	Y+16, r27	; 0x10
Local_u8Counter++;
    2c42:	8a 81       	ldd	r24, Y+2	; 0x02
    2c44:	8f 5f       	subi	r24, 0xFF	; 255
    2c46:	8a 83       	std	Y+2, r24	; 0x02
	}
u8 Local_u8ArrayNumber [10] ={0};

u8 Local_u8Counter=1 ;
u8 Local_u8CounterLoop=0; // (Copy_u8Number =2019
while(Copy_u8Number!=0)
    2c48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c4c:	af 85       	ldd	r26, Y+15	; 0x0f
    2c4e:	b8 89       	ldd	r27, Y+16	; 0x10
    2c50:	00 97       	sbiw	r24, 0x00	; 0
    2c52:	a1 05       	cpc	r26, r1
    2c54:	b1 05       	cpc	r27, r1
    2c56:	59 f6       	brne	.-106    	; 0x2bee <LCD_enuSendNumber+0x50>
{
Local_u8ArrayNumber[Local_u8Counter]=  (Copy_u8Number%10); // x=(Copy_u8Number%10)  x= *9
Copy_u8Number=(Copy_u8Number/10);
Local_u8Counter++;
}
Local_u8Counter--;
    2c58:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5a:	81 50       	subi	r24, 0x01	; 1
    2c5c:	8a 83       	std	Y+2, r24	; 0x02
for(Local_u8CounterLoop=Local_u8Counter;Local_u8CounterLoop>0;Local_u8CounterLoop--)
    2c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c60:	89 83       	std	Y+1, r24	; 0x01
    2c62:	0f c0       	rjmp	.+30     	; 0x2c82 <LCD_enuSendNumber+0xe4>
{
	LCD_enuSendCharacter((Local_u8ArrayNumber[Local_u8CounterLoop]+0x30));
    2c64:	89 81       	ldd	r24, Y+1	; 0x01
    2c66:	28 2f       	mov	r18, r24
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	ce 01       	movw	r24, r28
    2c6c:	03 96       	adiw	r24, 0x03	; 3
    2c6e:	fc 01       	movw	r30, r24
    2c70:	e2 0f       	add	r30, r18
    2c72:	f3 1f       	adc	r31, r19
    2c74:	80 81       	ld	r24, Z
    2c76:	80 5d       	subi	r24, 0xD0	; 208
    2c78:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_enuSendCharacter>
Local_u8ArrayNumber[Local_u8Counter]=  (Copy_u8Number%10); // x=(Copy_u8Number%10)  x= *9
Copy_u8Number=(Copy_u8Number/10);
Local_u8Counter++;
}
Local_u8Counter--;
for(Local_u8CounterLoop=Local_u8Counter;Local_u8CounterLoop>0;Local_u8CounterLoop--)
    2c7c:	89 81       	ldd	r24, Y+1	; 0x01
    2c7e:	81 50       	subi	r24, 0x01	; 1
    2c80:	89 83       	std	Y+1, r24	; 0x01
    2c82:	89 81       	ldd	r24, Y+1	; 0x01
    2c84:	88 23       	and	r24, r24
    2c86:	71 f7       	brne	.-36     	; 0x2c64 <LCD_enuSendNumber+0xc6>
{
	LCD_enuSendCharacter((Local_u8ArrayNumber[Local_u8CounterLoop]+0x30));

}
}
    2c88:	60 96       	adiw	r28, 0x10	; 16
    2c8a:	0f b6       	in	r0, 0x3f	; 63
    2c8c:	f8 94       	cli
    2c8e:	de bf       	out	0x3e, r29	; 62
    2c90:	0f be       	out	0x3f, r0	; 63
    2c92:	cd bf       	out	0x3d, r28	; 61
    2c94:	cf 91       	pop	r28
    2c96:	df 91       	pop	r29
    2c98:	1f 91       	pop	r17
    2c9a:	0f 91       	pop	r16
    2c9c:	08 95       	ret

00002c9e <LCD_vidSendEnable>:

/* private function */
static void LCD_vidSendEnable(void)
{
    2c9e:	df 93       	push	r29
    2ca0:	cf 93       	push	r28
    2ca2:	cd b7       	in	r28, 0x3d	; 61
    2ca4:	de b7       	in	r29, 0x3e	; 62
    2ca6:	2e 97       	sbiw	r28, 0x0e	; 14
    2ca8:	0f b6       	in	r0, 0x3f	; 63
    2caa:	f8 94       	cli
    2cac:	de bf       	out	0x3e, r29	; 62
    2cae:	0f be       	out	0x3f, r0	; 63
    2cb0:	cd bf       	out	0x3d, r28	; 61
	/* send enable */
	DIO_enuSetPinValue(LCD_u8_E_PORT, LCD_u8_E_PIN, DIO_u8_HIGH);
    2cb2:	83 e0       	ldi	r24, 0x03	; 3
    2cb4:	62 e0       	ldi	r22, 0x02	; 2
    2cb6:	41 e0       	ldi	r20, 0x01	; 1
    2cb8:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
    2cbc:	80 e0       	ldi	r24, 0x00	; 0
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	a0 e8       	ldi	r26, 0x80	; 128
    2cc2:	bf e3       	ldi	r27, 0x3F	; 63
    2cc4:	8b 87       	std	Y+11, r24	; 0x0b
    2cc6:	9c 87       	std	Y+12, r25	; 0x0c
    2cc8:	ad 87       	std	Y+13, r26	; 0x0d
    2cca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ccc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cce:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cd4:	20 e0       	ldi	r18, 0x00	; 0
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	4a e7       	ldi	r20, 0x7A	; 122
    2cda:	53 e4       	ldi	r21, 0x43	; 67
    2cdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	8f 83       	std	Y+7, r24	; 0x07
    2ce6:	98 87       	std	Y+8, r25	; 0x08
    2ce8:	a9 87       	std	Y+9, r26	; 0x09
    2cea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cec:	6f 81       	ldd	r22, Y+7	; 0x07
    2cee:	78 85       	ldd	r23, Y+8	; 0x08
    2cf0:	89 85       	ldd	r24, Y+9	; 0x09
    2cf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cf4:	20 e0       	ldi	r18, 0x00	; 0
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	40 e8       	ldi	r20, 0x80	; 128
    2cfa:	5f e3       	ldi	r21, 0x3F	; 63
    2cfc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2d00:	88 23       	and	r24, r24
    2d02:	2c f4       	brge	.+10     	; 0x2d0e <LCD_vidSendEnable+0x70>
		__ticks = 1;
    2d04:	81 e0       	ldi	r24, 0x01	; 1
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	9e 83       	std	Y+6, r25	; 0x06
    2d0a:	8d 83       	std	Y+5, r24	; 0x05
    2d0c:	3f c0       	rjmp	.+126    	; 0x2d8c <LCD_vidSendEnable+0xee>
	else if (__tmp > 65535)
    2d0e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d10:	78 85       	ldd	r23, Y+8	; 0x08
    2d12:	89 85       	ldd	r24, Y+9	; 0x09
    2d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d16:	20 e0       	ldi	r18, 0x00	; 0
    2d18:	3f ef       	ldi	r19, 0xFF	; 255
    2d1a:	4f e7       	ldi	r20, 0x7F	; 127
    2d1c:	57 e4       	ldi	r21, 0x47	; 71
    2d1e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2d22:	18 16       	cp	r1, r24
    2d24:	4c f5       	brge	.+82     	; 0x2d78 <LCD_vidSendEnable+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d26:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d28:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d2e:	20 e0       	ldi	r18, 0x00	; 0
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	40 e2       	ldi	r20, 0x20	; 32
    2d34:	51 e4       	ldi	r21, 0x41	; 65
    2d36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d3a:	dc 01       	movw	r26, r24
    2d3c:	cb 01       	movw	r24, r22
    2d3e:	bc 01       	movw	r22, r24
    2d40:	cd 01       	movw	r24, r26
    2d42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d46:	dc 01       	movw	r26, r24
    2d48:	cb 01       	movw	r24, r22
    2d4a:	9e 83       	std	Y+6, r25	; 0x06
    2d4c:	8d 83       	std	Y+5, r24	; 0x05
    2d4e:	0f c0       	rjmp	.+30     	; 0x2d6e <LCD_vidSendEnable+0xd0>
    2d50:	89 e1       	ldi	r24, 0x19	; 25
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	9c 83       	std	Y+4, r25	; 0x04
    2d56:	8b 83       	std	Y+3, r24	; 0x03
    2d58:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d5c:	01 97       	sbiw	r24, 0x01	; 1
    2d5e:	f1 f7       	brne	.-4      	; 0x2d5c <LCD_vidSendEnable+0xbe>
    2d60:	9c 83       	std	Y+4, r25	; 0x04
    2d62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d64:	8d 81       	ldd	r24, Y+5	; 0x05
    2d66:	9e 81       	ldd	r25, Y+6	; 0x06
    2d68:	01 97       	sbiw	r24, 0x01	; 1
    2d6a:	9e 83       	std	Y+6, r25	; 0x06
    2d6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d70:	9e 81       	ldd	r25, Y+6	; 0x06
    2d72:	00 97       	sbiw	r24, 0x00	; 0
    2d74:	69 f7       	brne	.-38     	; 0x2d50 <LCD_vidSendEnable+0xb2>
    2d76:	14 c0       	rjmp	.+40     	; 0x2da0 <LCD_vidSendEnable+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d78:	6f 81       	ldd	r22, Y+7	; 0x07
    2d7a:	78 85       	ldd	r23, Y+8	; 0x08
    2d7c:	89 85       	ldd	r24, Y+9	; 0x09
    2d7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d84:	dc 01       	movw	r26, r24
    2d86:	cb 01       	movw	r24, r22
    2d88:	9e 83       	std	Y+6, r25	; 0x06
    2d8a:	8d 83       	std	Y+5, r24	; 0x05
    2d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d90:	9a 83       	std	Y+2, r25	; 0x02
    2d92:	89 83       	std	Y+1, r24	; 0x01
    2d94:	89 81       	ldd	r24, Y+1	; 0x01
    2d96:	9a 81       	ldd	r25, Y+2	; 0x02
    2d98:	01 97       	sbiw	r24, 0x01	; 1
    2d9a:	f1 f7       	brne	.-4      	; 0x2d98 <LCD_vidSendEnable+0xfa>
    2d9c:	9a 83       	std	Y+2, r25	; 0x02
    2d9e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1);

	DIO_enuSetPinValue(LCD_u8_E_PORT, LCD_u8_E_PIN, DIO_u8_LOW);
    2da0:	83 e0       	ldi	r24, 0x03	; 3
    2da2:	62 e0       	ldi	r22, 0x02	; 2
    2da4:	40 e0       	ldi	r20, 0x00	; 0
    2da6:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
}
    2daa:	2e 96       	adiw	r28, 0x0e	; 14
    2dac:	0f b6       	in	r0, 0x3f	; 63
    2dae:	f8 94       	cli
    2db0:	de bf       	out	0x3e, r29	; 62
    2db2:	0f be       	out	0x3f, r0	; 63
    2db4:	cd bf       	out	0x3d, r28	; 61
    2db6:	cf 91       	pop	r28
    2db8:	df 91       	pop	r29
    2dba:	08 95       	ret

00002dbc <KEYPAD_vidTnti>:

extern const u8 KEYPAD_au8KeyValue [KEYPAD_u8_ROWS_NUM][KEYPAD_u8_COLUMNS_NUM];
extern const u8 KEYPAD_au8Rows[KEYPAD_u8_ROWS_NUM][KEYPAD_u8_PORT_PIN];
extern const u8 KEYPAD_au8Columns[KEYPAD_u8_COLUMNS_NUM][KEYPAD_u8_PORT_PIN];

void KEYPAD_vidTnti(void){
    2dbc:	df 93       	push	r29
    2dbe:	cf 93       	push	r28
    2dc0:	cd b7       	in	r28, 0x3d	; 61
    2dc2:	de b7       	in	r29, 0x3e	; 62
	DIO_vidInit();
    2dc4:	0e 94 47 0c 	call	0x188e	; 0x188e <DIO_vidInit>
}
    2dc8:	cf 91       	pop	r28
    2dca:	df 91       	pop	r29
    2dcc:	08 95       	ret

00002dce <KEYPAD_vidGetPressedKey>:


KEYPAD_tenuErrorStatus KEYPAD_vidGetPressedKey(u8 *Add_pu8KeyValue){
    2dce:	df 93       	push	r29
    2dd0:	cf 93       	push	r28
    2dd2:	cd b7       	in	r28, 0x3d	; 61
    2dd4:	de b7       	in	r29, 0x3e	; 62
    2dd6:	64 97       	sbiw	r28, 0x14	; 20
    2dd8:	0f b6       	in	r0, 0x3f	; 63
    2dda:	f8 94       	cli
    2ddc:	de bf       	out	0x3e, r29	; 62
    2dde:	0f be       	out	0x3f, r0	; 63
    2de0:	cd bf       	out	0x3d, r28	; 61
    2de2:	9c 8b       	std	Y+20, r25	; 0x14
    2de4:	8b 8b       	std	Y+19, r24	; 0x13
	KEYPAD_tenuErrorStatus Local_enuErrorStatus = KEYPAD_OK;
    2de6:	19 8a       	std	Y+17, r1	; 0x11
	u8 Local_u8IteratorRow;
	u8 Local_u8IteratorColumn;
	u8 Local_u8KeyPressedIndicator;
	/* check argument */
	if(Add_pu8KeyValue == NULL){
    2de8:	8b 89       	ldd	r24, Y+19	; 0x13
    2dea:	9c 89       	ldd	r25, Y+20	; 0x14
    2dec:	00 97       	sbiw	r24, 0x00	; 0
    2dee:	19 f4       	brne	.+6      	; 0x2df6 <KEYPAD_vidGetPressedKey+0x28>
		Local_enuErrorStatus = KEYPAD_NOK;
    2df0:	81 e0       	ldi	r24, 0x01	; 1
    2df2:	89 8b       	std	Y+17, r24	; 0x11
    2df4:	e5 c0       	rjmp	.+458    	; 0x2fc0 <KEYPAD_vidGetPressedKey+0x1f2>
	} else {
		for(Local_u8IteratorColumn = 0; Local_u8IteratorColumn < KEYPAD_u8_COLUMNS_NUM; Local_u8IteratorColumn++){
    2df6:	1f 86       	std	Y+15, r1	; 0x0f
    2df8:	df c0       	rjmp	.+446    	; 0x2fb8 <KEYPAD_vidGetPressedKey+0x1ea>
			DIO_enuSetPinValue(KEYPAD_au8Columns[Local_u8IteratorColumn][KEYPAD_u8_PORT],
    2dfa:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dfc:	88 2f       	mov	r24, r24
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	88 0f       	add	r24, r24
    2e02:	99 1f       	adc	r25, r25
    2e04:	fc 01       	movw	r30, r24
    2e06:	e1 58       	subi	r30, 0x81	; 129
    2e08:	fe 4f       	sbci	r31, 0xFE	; 254
    2e0a:	20 81       	ld	r18, Z
    2e0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e0e:	88 2f       	mov	r24, r24
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	88 0f       	add	r24, r24
    2e14:	99 1f       	adc	r25, r25
    2e16:	fc 01       	movw	r30, r24
    2e18:	e0 58       	subi	r30, 0x80	; 128
    2e1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e1c:	90 81       	ld	r25, Z
    2e1e:	82 2f       	mov	r24, r18
    2e20:	69 2f       	mov	r22, r25
    2e22:	40 e0       	ldi	r20, 0x00	; 0
    2e24:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
								KEYPAD_au8Columns[Local_u8IteratorColumn][KEYPAD_u8_PIN], DIO_u8_LOW);
			for(Local_u8IteratorRow = 0; Local_u8IteratorRow < KEYPAD_u8_ROWS_NUM; Local_u8IteratorRow++){
    2e28:	18 8a       	std	Y+16, r1	; 0x10
    2e2a:	a8 c0       	rjmp	.+336    	; 0x2f7c <KEYPAD_vidGetPressedKey+0x1ae>
				DIO_enuGetPinValue(KEYPAD_au8Rows[Local_u8IteratorRow][KEYPAD_u8_PORT],
    2e2c:	88 89       	ldd	r24, Y+16	; 0x10
    2e2e:	88 2f       	mov	r24, r24
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	88 0f       	add	r24, r24
    2e34:	99 1f       	adc	r25, r25
    2e36:	fc 01       	movw	r30, r24
    2e38:	e9 58       	subi	r30, 0x89	; 137
    2e3a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e3c:	40 81       	ld	r20, Z
    2e3e:	88 89       	ldd	r24, Y+16	; 0x10
    2e40:	88 2f       	mov	r24, r24
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	88 0f       	add	r24, r24
    2e46:	99 1f       	adc	r25, r25
    2e48:	fc 01       	movw	r30, r24
    2e4a:	e8 58       	subi	r30, 0x88	; 136
    2e4c:	fe 4f       	sbci	r31, 0xFE	; 254
    2e4e:	90 81       	ld	r25, Z
    2e50:	9e 01       	movw	r18, r28
    2e52:	2e 5e       	subi	r18, 0xEE	; 238
    2e54:	3f 4f       	sbci	r19, 0xFF	; 255
    2e56:	84 2f       	mov	r24, r20
    2e58:	69 2f       	mov	r22, r25
    2e5a:	a9 01       	movw	r20, r18
    2e5c:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_enuGetPinValue>
									KEYPAD_au8Rows[Local_u8IteratorRow][KEYPAD_u8_PIN], &Local_u8KeyPressedIndicator);
				if(Local_u8KeyPressedIndicator == 0){	// will be 0 only if any key pressed
    2e60:	8a 89       	ldd	r24, Y+18	; 0x12
    2e62:	88 23       	and	r24, r24
    2e64:	09 f0       	breq	.+2      	; 0x2e68 <KEYPAD_vidGetPressedKey+0x9a>
    2e66:	87 c0       	rjmp	.+270    	; 0x2f76 <KEYPAD_vidGetPressedKey+0x1a8>
					*Add_pu8KeyValue = KEYPAD_au8KeyValue[Local_u8IteratorRow][Local_u8IteratorColumn]; //put the selected pressed key to the retrurnval
    2e68:	88 89       	ldd	r24, Y+16	; 0x10
    2e6a:	28 2f       	mov	r18, r24
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e70:	48 2f       	mov	r20, r24
    2e72:	50 e0       	ldi	r21, 0x00	; 0
    2e74:	c9 01       	movw	r24, r18
    2e76:	88 0f       	add	r24, r24
    2e78:	99 1f       	adc	r25, r25
    2e7a:	82 0f       	add	r24, r18
    2e7c:	93 1f       	adc	r25, r19
    2e7e:	84 0f       	add	r24, r20
    2e80:	95 1f       	adc	r25, r21
    2e82:	fc 01       	movw	r30, r24
    2e84:	e5 59       	subi	r30, 0x95	; 149
    2e86:	fe 4f       	sbci	r31, 0xFE	; 254
    2e88:	80 81       	ld	r24, Z
    2e8a:	eb 89       	ldd	r30, Y+19	; 0x13
    2e8c:	fc 89       	ldd	r31, Y+20	; 0x14
    2e8e:	80 83       	st	Z, r24
    2e90:	80 e0       	ldi	r24, 0x00	; 0
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	a0 e7       	ldi	r26, 0x70	; 112
    2e96:	b1 e4       	ldi	r27, 0x41	; 65
    2e98:	8b 87       	std	Y+11, r24	; 0x0b
    2e9a:	9c 87       	std	Y+12, r25	; 0x0c
    2e9c:	ad 87       	std	Y+13, r26	; 0x0d
    2e9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ea0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ea2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ea4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ea6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ea8:	20 e0       	ldi	r18, 0x00	; 0
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	4a e7       	ldi	r20, 0x7A	; 122
    2eae:	53 e4       	ldi	r21, 0x43	; 67
    2eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	cb 01       	movw	r24, r22
    2eb8:	8f 83       	std	Y+7, r24	; 0x07
    2eba:	98 87       	std	Y+8, r25	; 0x08
    2ebc:	a9 87       	std	Y+9, r26	; 0x09
    2ebe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ec0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ec2:	78 85       	ldd	r23, Y+8	; 0x08
    2ec4:	89 85       	ldd	r24, Y+9	; 0x09
    2ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	40 e8       	ldi	r20, 0x80	; 128
    2ece:	5f e3       	ldi	r21, 0x3F	; 63
    2ed0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2ed4:	88 23       	and	r24, r24
    2ed6:	2c f4       	brge	.+10     	; 0x2ee2 <KEYPAD_vidGetPressedKey+0x114>
		__ticks = 1;
    2ed8:	81 e0       	ldi	r24, 0x01	; 1
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	9e 83       	std	Y+6, r25	; 0x06
    2ede:	8d 83       	std	Y+5, r24	; 0x05
    2ee0:	3f c0       	rjmp	.+126    	; 0x2f60 <KEYPAD_vidGetPressedKey+0x192>
	else if (__tmp > 65535)
    2ee2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ee4:	78 85       	ldd	r23, Y+8	; 0x08
    2ee6:	89 85       	ldd	r24, Y+9	; 0x09
    2ee8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eea:	20 e0       	ldi	r18, 0x00	; 0
    2eec:	3f ef       	ldi	r19, 0xFF	; 255
    2eee:	4f e7       	ldi	r20, 0x7F	; 127
    2ef0:	57 e4       	ldi	r21, 0x47	; 71
    2ef2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2ef6:	18 16       	cp	r1, r24
    2ef8:	4c f5       	brge	.+82     	; 0x2f4c <KEYPAD_vidGetPressedKey+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2efa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2efc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2efe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f00:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f02:	20 e0       	ldi	r18, 0x00	; 0
    2f04:	30 e0       	ldi	r19, 0x00	; 0
    2f06:	40 e2       	ldi	r20, 0x20	; 32
    2f08:	51 e4       	ldi	r21, 0x41	; 65
    2f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f0e:	dc 01       	movw	r26, r24
    2f10:	cb 01       	movw	r24, r22
    2f12:	bc 01       	movw	r22, r24
    2f14:	cd 01       	movw	r24, r26
    2f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f1a:	dc 01       	movw	r26, r24
    2f1c:	cb 01       	movw	r24, r22
    2f1e:	9e 83       	std	Y+6, r25	; 0x06
    2f20:	8d 83       	std	Y+5, r24	; 0x05
    2f22:	0f c0       	rjmp	.+30     	; 0x2f42 <KEYPAD_vidGetPressedKey+0x174>
    2f24:	89 e1       	ldi	r24, 0x19	; 25
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	9c 83       	std	Y+4, r25	; 0x04
    2f2a:	8b 83       	std	Y+3, r24	; 0x03
    2f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f30:	01 97       	sbiw	r24, 0x01	; 1
    2f32:	f1 f7       	brne	.-4      	; 0x2f30 <KEYPAD_vidGetPressedKey+0x162>
    2f34:	9c 83       	std	Y+4, r25	; 0x04
    2f36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f38:	8d 81       	ldd	r24, Y+5	; 0x05
    2f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f3c:	01 97       	sbiw	r24, 0x01	; 1
    2f3e:	9e 83       	std	Y+6, r25	; 0x06
    2f40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f42:	8d 81       	ldd	r24, Y+5	; 0x05
    2f44:	9e 81       	ldd	r25, Y+6	; 0x06
    2f46:	00 97       	sbiw	r24, 0x00	; 0
    2f48:	69 f7       	brne	.-38     	; 0x2f24 <KEYPAD_vidGetPressedKey+0x156>
    2f4a:	1c c0       	rjmp	.+56     	; 0x2f84 <KEYPAD_vidGetPressedKey+0x1b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f4e:	78 85       	ldd	r23, Y+8	; 0x08
    2f50:	89 85       	ldd	r24, Y+9	; 0x09
    2f52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f58:	dc 01       	movw	r26, r24
    2f5a:	cb 01       	movw	r24, r22
    2f5c:	9e 83       	std	Y+6, r25	; 0x06
    2f5e:	8d 83       	std	Y+5, r24	; 0x05
    2f60:	8d 81       	ldd	r24, Y+5	; 0x05
    2f62:	9e 81       	ldd	r25, Y+6	; 0x06
    2f64:	9a 83       	std	Y+2, r25	; 0x02
    2f66:	89 83       	std	Y+1, r24	; 0x01
    2f68:	89 81       	ldd	r24, Y+1	; 0x01
    2f6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f6c:	01 97       	sbiw	r24, 0x01	; 1
    2f6e:	f1 f7       	brne	.-4      	; 0x2f6c <KEYPAD_vidGetPressedKey+0x19e>
    2f70:	9a 83       	std	Y+2, r25	; 0x02
    2f72:	89 83       	std	Y+1, r24	; 0x01
    2f74:	07 c0       	rjmp	.+14     	; 0x2f84 <KEYPAD_vidGetPressedKey+0x1b6>
		Local_enuErrorStatus = KEYPAD_NOK;
	} else {
		for(Local_u8IteratorColumn = 0; Local_u8IteratorColumn < KEYPAD_u8_COLUMNS_NUM; Local_u8IteratorColumn++){
			DIO_enuSetPinValue(KEYPAD_au8Columns[Local_u8IteratorColumn][KEYPAD_u8_PORT],
								KEYPAD_au8Columns[Local_u8IteratorColumn][KEYPAD_u8_PIN], DIO_u8_LOW);
			for(Local_u8IteratorRow = 0; Local_u8IteratorRow < KEYPAD_u8_ROWS_NUM; Local_u8IteratorRow++){
    2f76:	88 89       	ldd	r24, Y+16	; 0x10
    2f78:	8f 5f       	subi	r24, 0xFF	; 255
    2f7a:	88 8b       	std	Y+16, r24	; 0x10
    2f7c:	88 89       	ldd	r24, Y+16	; 0x10
    2f7e:	84 30       	cpi	r24, 0x04	; 4
    2f80:	08 f4       	brcc	.+2      	; 0x2f84 <KEYPAD_vidGetPressedKey+0x1b6>
    2f82:	54 cf       	rjmp	.-344    	; 0x2e2c <KEYPAD_vidGetPressedKey+0x5e>
					*Add_pu8KeyValue = KEYPAD_au8KeyValue[Local_u8IteratorRow][Local_u8IteratorColumn]; //put the selected pressed key to the retrurnval
					_delay_ms(15);
					break; // break from the loop
				}
			}
			DIO_enuSetPinValue(KEYPAD_au8Columns[Local_u8IteratorColumn][KEYPAD_u8_PORT],
    2f84:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f86:	88 2f       	mov	r24, r24
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	88 0f       	add	r24, r24
    2f8c:	99 1f       	adc	r25, r25
    2f8e:	fc 01       	movw	r30, r24
    2f90:	e1 58       	subi	r30, 0x81	; 129
    2f92:	fe 4f       	sbci	r31, 0xFE	; 254
    2f94:	20 81       	ld	r18, Z
    2f96:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f98:	88 2f       	mov	r24, r24
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	88 0f       	add	r24, r24
    2f9e:	99 1f       	adc	r25, r25
    2fa0:	fc 01       	movw	r30, r24
    2fa2:	e0 58       	subi	r30, 0x80	; 128
    2fa4:	fe 4f       	sbci	r31, 0xFE	; 254
    2fa6:	90 81       	ld	r25, Z
    2fa8:	82 2f       	mov	r24, r18
    2faa:	69 2f       	mov	r22, r25
    2fac:	41 e0       	ldi	r20, 0x01	; 1
    2fae:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
	u8 Local_u8KeyPressedIndicator;
	/* check argument */
	if(Add_pu8KeyValue == NULL){
		Local_enuErrorStatus = KEYPAD_NOK;
	} else {
		for(Local_u8IteratorColumn = 0; Local_u8IteratorColumn < KEYPAD_u8_COLUMNS_NUM; Local_u8IteratorColumn++){
    2fb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fb4:	8f 5f       	subi	r24, 0xFF	; 255
    2fb6:	8f 87       	std	Y+15, r24	; 0x0f
    2fb8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fba:	83 30       	cpi	r24, 0x03	; 3
    2fbc:	08 f4       	brcc	.+2      	; 0x2fc0 <KEYPAD_vidGetPressedKey+0x1f2>
    2fbe:	1d cf       	rjmp	.-454    	; 0x2dfa <KEYPAD_vidGetPressedKey+0x2c>
			}
			DIO_enuSetPinValue(KEYPAD_au8Columns[Local_u8IteratorColumn][KEYPAD_u8_PORT],
								KEYPAD_au8Columns[Local_u8IteratorColumn][KEYPAD_u8_PIN], DIO_u8_HIGH);
		}
	}
	return Local_enuErrorStatus;
    2fc0:	89 89       	ldd	r24, Y+17	; 0x11
}
    2fc2:	64 96       	adiw	r28, 0x14	; 20
    2fc4:	0f b6       	in	r0, 0x3f	; 63
    2fc6:	f8 94       	cli
    2fc8:	de bf       	out	0x3e, r29	; 62
    2fca:	0f be       	out	0x3f, r0	; 63
    2fcc:	cd bf       	out	0x3d, r28	; 61
    2fce:	cf 91       	pop	r28
    2fd0:	df 91       	pop	r29
    2fd2:	08 95       	ret

00002fd4 <main>:
volatile static u8 u8TempMax = 30;
volatile static u8 u8TempMin = 20;
volatile f32 celsius;
volatile u8 Local;

void main(void) {
    2fd4:	df 93       	push	r29
    2fd6:	cf 93       	push	r28
    2fd8:	00 d0       	rcall	.+0      	; 0x2fda <main+0x6>
    2fda:	00 d0       	rcall	.+0      	; 0x2fdc <main+0x8>
    2fdc:	00 d0       	rcall	.+0      	; 0x2fde <main+0xa>
    2fde:	cd b7       	in	r28, 0x3d	; 61
    2fe0:	de b7       	in	r29, 0x3e	; 62
	/**************** LOCAL VARIABLE ****************/
	u8 Local_u8_MastarDoorStatus = ROOM_DOOR_LOCKED;
    2fe2:	1c 82       	std	Y+4, r1	; 0x04
	u8 Local_u8_TenantDoorStatus = ROOM_DOOR_LOCKED;
    2fe4:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8_MastarLightStatus = ROOM_LIHGT_OFF;
    2fe6:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8_TenantLightStatus = ROOM_LIHGT_OFF;
    2fe8:	19 82       	std	Y+1, r1	; 0x01

	/**************** INITIALIZE ****************/
	SPI_vidSPIInitSlave();
    2fea:	0e 94 4c 07 	call	0xe98	; 0xe98 <SPI_vidSPIInitSlave>
	LED_vidInit();
    2fee:	0e 94 0d 12 	call	0x241a	; 0x241a <LED_vidInit>
	STEPPER_vidInit();
    2ff2:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <STEPPER_vidInit>
	ADC_vidConfigure (ADC_u8_AVCC_REFERENCE, ADC_u8_RIGHT_ADJUST_RESULT, ADC_u8_ADC0, ADC_u8_PRESCALER_64);
    2ff6:	80 e4       	ldi	r24, 0x40	; 64
    2ff8:	60 e0       	ldi	r22, 0x00	; 0
    2ffa:	40 e0       	ldi	r20, 0x00	; 0
    2ffc:	26 e0       	ldi	r18, 0x06	; 6
    2ffe:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <ADC_vidConfigure>
	GPT_VoidConfigure(GPT_u8_TIMER0);
    3002:	8a e0       	ldi	r24, 0x0A	; 10
    3004:	0e 94 b1 08 	call	0x1162	; 0x1162 <GPT_VoidConfigure>
	GPT_VoidStartTimer(GPT_u8_TIMER0);
    3008:	8a e0       	ldi	r24, 0x0A	; 10
    300a:	0e 94 ce 08 	call	0x119c	; 0x119c <GPT_VoidStartTimer>
	GPT_VoidEnableCBF(GPT_u8_TIMER0, GPT_u8_TIMER0_OVF, temperatureActiv);
    300e:	22 e6       	ldi	r18, 0x62	; 98
    3010:	39 e1       	ldi	r19, 0x19	; 25
    3012:	8a e0       	ldi	r24, 0x0A	; 10
    3014:	68 e0       	ldi	r22, 0x08	; 8
    3016:	a9 01       	movw	r20, r18
    3018:	0e 94 0c 09 	call	0x1218	; 0x1218 <GPT_VoidEnableCBF>
//	MODULE_vidTemperatureInit(u8ADC_read, u8InstantinusDegree);

	/**************** INTERRUPTS ENABLE ****************/
	EXTI_vidEnable(EXTI_u8_INT1, EXTI_u8_LOGICAL_CHANGE);
    301c:	81 e0       	ldi	r24, 0x01	; 1
    301e:	61 e0       	ldi	r22, 0x01	; 1
    3020:	0e 94 00 0b 	call	0x1600	; 0x1600 <EXTI_vidEnable>


	/**************** SUPER LOOP (START OF THE PERIODIC CODE) ****************/
	while(TRUE){

		u8SPIrequest = SPI_vidTransceive(DONT_CARE);	//receive data from the user and store it in a global variable
    3024:	8f ef       	ldi	r24, 0xFF	; 255
    3026:	0e 94 64 07 	call	0xec8	; 0xec8 <SPI_vidTransceive>
    302a:	80 93 68 01 	sts	0x0168, r24
		switch(u8SPIrequest){	//switch case checking the data stored in u8SPIrequest to take the suitable action
    302e:	80 91 68 01 	lds	r24, 0x0168
    3032:	28 2f       	mov	r18, r24
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	3e 83       	std	Y+6, r19	; 0x06
    3038:	2d 83       	std	Y+5, r18	; 0x05
    303a:	8d 81       	ldd	r24, Y+5	; 0x05
    303c:	9e 81       	ldd	r25, Y+6	; 0x06
    303e:	8f 31       	cpi	r24, 0x1F	; 31
    3040:	91 05       	cpc	r25, r1
    3042:	09 f4       	brne	.+2      	; 0x3046 <main+0x72>
    3044:	eb c0       	rjmp	.+470    	; 0x321c <main+0x248>
    3046:	2d 81       	ldd	r18, Y+5	; 0x05
    3048:	3e 81       	ldd	r19, Y+6	; 0x06
    304a:	20 32       	cpi	r18, 0x20	; 32
    304c:	31 05       	cpc	r19, r1
    304e:	8c f5       	brge	.+98     	; 0x30b2 <main+0xde>
    3050:	8d 81       	ldd	r24, Y+5	; 0x05
    3052:	9e 81       	ldd	r25, Y+6	; 0x06
    3054:	86 30       	cpi	r24, 0x06	; 6
    3056:	91 05       	cpc	r25, r1
    3058:	09 f4       	brne	.+2      	; 0x305c <main+0x88>
    305a:	9f c0       	rjmp	.+318    	; 0x319a <main+0x1c6>
    305c:	2d 81       	ldd	r18, Y+5	; 0x05
    305e:	3e 81       	ldd	r19, Y+6	; 0x06
    3060:	27 30       	cpi	r18, 0x07	; 7
    3062:	31 05       	cpc	r19, r1
    3064:	9c f4       	brge	.+38     	; 0x308c <main+0xb8>
    3066:	8d 81       	ldd	r24, Y+5	; 0x05
    3068:	9e 81       	ldd	r25, Y+6	; 0x06
    306a:	82 30       	cpi	r24, 0x02	; 2
    306c:	91 05       	cpc	r25, r1
    306e:	09 f4       	brne	.+2      	; 0x3072 <main+0x9e>
    3070:	78 c0       	rjmp	.+240    	; 0x3162 <main+0x18e>
    3072:	2d 81       	ldd	r18, Y+5	; 0x05
    3074:	3e 81       	ldd	r19, Y+6	; 0x06
    3076:	23 30       	cpi	r18, 0x03	; 3
    3078:	31 05       	cpc	r19, r1
    307a:	09 f4       	brne	.+2      	; 0x307e <main+0xaa>
    307c:	7f c0       	rjmp	.+254    	; 0x317c <main+0x1a8>
    307e:	8d 81       	ldd	r24, Y+5	; 0x05
    3080:	9e 81       	ldd	r25, Y+6	; 0x06
    3082:	81 30       	cpi	r24, 0x01	; 1
    3084:	91 05       	cpc	r25, r1
    3086:	09 f4       	brne	.+2      	; 0x308a <main+0xb6>
    3088:	51 c0       	rjmp	.+162    	; 0x312c <main+0x158>
    308a:	cc cf       	rjmp	.-104    	; 0x3024 <main+0x50>
    308c:	2d 81       	ldd	r18, Y+5	; 0x05
    308e:	3e 81       	ldd	r19, Y+6	; 0x06
    3090:	2c 30       	cpi	r18, 0x0C	; 12
    3092:	31 05       	cpc	r19, r1
    3094:	09 f4       	brne	.+2      	; 0x3098 <main+0xc4>
    3096:	9f c0       	rjmp	.+318    	; 0x31d6 <main+0x202>
    3098:	8d 81       	ldd	r24, Y+5	; 0x05
    309a:	9e 81       	ldd	r25, Y+6	; 0x06
    309c:	8f 30       	cpi	r24, 0x0F	; 15
    309e:	91 05       	cpc	r25, r1
    30a0:	09 f4       	brne	.+2      	; 0x30a4 <main+0xd0>
    30a2:	a8 c0       	rjmp	.+336    	; 0x31f4 <main+0x220>
    30a4:	2d 81       	ldd	r18, Y+5	; 0x05
    30a6:	3e 81       	ldd	r19, Y+6	; 0x06
    30a8:	29 30       	cpi	r18, 0x09	; 9
    30aa:	31 05       	cpc	r19, r1
    30ac:	09 f4       	brne	.+2      	; 0x30b0 <main+0xdc>
    30ae:	84 c0       	rjmp	.+264    	; 0x31b8 <main+0x1e4>
    30b0:	b9 cf       	rjmp	.-142    	; 0x3024 <main+0x50>
    30b2:	8d 81       	ldd	r24, Y+5	; 0x05
    30b4:	9e 81       	ldd	r25, Y+6	; 0x06
    30b6:	8f 35       	cpi	r24, 0x5F	; 95
    30b8:	91 05       	cpc	r25, r1
    30ba:	09 f4       	brne	.+2      	; 0x30be <main+0xea>
    30bc:	e8 c0       	rjmp	.+464    	; 0x328e <main+0x2ba>
    30be:	2d 81       	ldd	r18, Y+5	; 0x05
    30c0:	3e 81       	ldd	r19, Y+6	; 0x06
    30c2:	20 36       	cpi	r18, 0x60	; 96
    30c4:	31 05       	cpc	r19, r1
    30c6:	9c f4       	brge	.+38     	; 0x30ee <main+0x11a>
    30c8:	8d 81       	ldd	r24, Y+5	; 0x05
    30ca:	9e 81       	ldd	r25, Y+6	; 0x06
    30cc:	8f 33       	cpi	r24, 0x3F	; 63
    30ce:	91 05       	cpc	r25, r1
    30d0:	09 f4       	brne	.+2      	; 0x30d4 <main+0x100>
    30d2:	c8 c0       	rjmp	.+400    	; 0x3264 <main+0x290>
    30d4:	2d 81       	ldd	r18, Y+5	; 0x05
    30d6:	3e 81       	ldd	r19, Y+6	; 0x06
    30d8:	2f 34       	cpi	r18, 0x4F	; 79
    30da:	31 05       	cpc	r19, r1
    30dc:	09 f4       	brne	.+2      	; 0x30e0 <main+0x10c>
    30de:	d2 c0       	rjmp	.+420    	; 0x3284 <main+0x2b0>
    30e0:	8d 81       	ldd	r24, Y+5	; 0x05
    30e2:	9e 81       	ldd	r25, Y+6	; 0x06
    30e4:	8f 32       	cpi	r24, 0x2F	; 47
    30e6:	91 05       	cpc	r25, r1
    30e8:	09 f4       	brne	.+2      	; 0x30ec <main+0x118>
    30ea:	a8 c0       	rjmp	.+336    	; 0x323c <main+0x268>
    30ec:	9b cf       	rjmp	.-202    	; 0x3024 <main+0x50>
    30ee:	2d 81       	ldd	r18, Y+5	; 0x05
    30f0:	3e 81       	ldd	r19, Y+6	; 0x06
    30f2:	2f 37       	cpi	r18, 0x7F	; 127
    30f4:	31 05       	cpc	r19, r1
    30f6:	09 f4       	brne	.+2      	; 0x30fa <main+0x126>
    30f8:	d4 c0       	rjmp	.+424    	; 0x32a2 <main+0x2ce>
    30fa:	8d 81       	ldd	r24, Y+5	; 0x05
    30fc:	9e 81       	ldd	r25, Y+6	; 0x06
    30fe:	80 38       	cpi	r24, 0x80	; 128
    3100:	91 05       	cpc	r25, r1
    3102:	3c f4       	brge	.+14     	; 0x3112 <main+0x13e>
    3104:	2d 81       	ldd	r18, Y+5	; 0x05
    3106:	3e 81       	ldd	r19, Y+6	; 0x06
    3108:	2f 36       	cpi	r18, 0x6F	; 111
    310a:	31 05       	cpc	r19, r1
    310c:	09 f4       	brne	.+2      	; 0x3110 <main+0x13c>
    310e:	c4 c0       	rjmp	.+392    	; 0x3298 <main+0x2c4>
    3110:	89 cf       	rjmp	.-238    	; 0x3024 <main+0x50>
    3112:	8d 81       	ldd	r24, Y+5	; 0x05
    3114:	9e 81       	ldd	r25, Y+6	; 0x06
    3116:	8f 38       	cpi	r24, 0x8F	; 143
    3118:	91 05       	cpc	r25, r1
    311a:	09 f4       	brne	.+2      	; 0x311e <main+0x14a>
    311c:	c7 c0       	rjmp	.+398    	; 0x32ac <main+0x2d8>
    311e:	2d 81       	ldd	r18, Y+5	; 0x05
    3120:	3e 81       	ldd	r19, Y+6	; 0x06
    3122:	2f 39       	cpi	r18, 0x9F	; 159
    3124:	31 05       	cpc	r19, r1
    3126:	09 f4       	brne	.+2      	; 0x312a <main+0x156>
    3128:	c7 c0       	rjmp	.+398    	; 0x32b8 <main+0x2e4>
    312a:	7c cf       	rjmp	.-264    	; 0x3024 <main+0x50>

		case PARTY_MODE_ACTIVE:
			MODULE_vidGarageDoor(GARAGE_MANUAL, GARAGE_OPEN);
    312c:	80 e0       	ldi	r24, 0x00	; 0
    312e:	61 e0       	ldi	r22, 0x01	; 1
    3130:	0e 94 45 1b 	call	0x368a	; 0x368a <MODULE_vidGarageDoor>
			SERVOMOTOR_enuInit(SERVOMOTOR_u8_OC1A);
    3134:	81 e0       	ldi	r24, 0x01	; 1
    3136:	0e 94 28 11 	call	0x2250	; 0x2250 <SERVOMOTOR_enuInit>
			SERVOMOTOR_enuSetAngle(SERVOMOTOR_u8_ZERO_DEGREE, SERVOMOTOR_u8_OC1A);
    313a:	80 e0       	ldi	r24, 0x00	; 0
    313c:	61 e0       	ldi	r22, 0x01	; 1
    313e:	0e 94 4e 11 	call	0x229c	; 0x229c <SERVOMOTOR_enuSetAngle>
			LED_enuTurnOff(LED_u8_PORTA, LED_u8_PIN5);
    3142:	80 e0       	ldi	r24, 0x00	; 0
    3144:	65 e0       	ldi	r22, 0x05	; 5
    3146:	0e 94 34 12 	call	0x2468	; 0x2468 <LED_enuTurnOff>
			SERVOMOTOR_enuInit(SERVOMOTOR_u8_OC1B);
    314a:	82 e0       	ldi	r24, 0x02	; 2
    314c:	0e 94 28 11 	call	0x2250	; 0x2250 <SERVOMOTOR_enuInit>
			SERVOMOTOR_enuSetAngle(SERVOMOTOR_u8_90_DEGREE, SERVOMOTOR_u8_OC1B);
    3150:	8a e5       	ldi	r24, 0x5A	; 90
    3152:	62 e0       	ldi	r22, 0x02	; 2
    3154:	0e 94 4e 11 	call	0x229c	; 0x229c <SERVOMOTOR_enuSetAngle>
			LED_enuTurnOn(LED_u8_PORTA, LED_u8_PIN7);
    3158:	80 e0       	ldi	r24, 0x00	; 0
    315a:	67 e0       	ldi	r22, 0x07	; 7
    315c:	0e 94 16 12 	call	0x242c	; 0x242c <LED_enuTurnOn>
    3160:	61 cf       	rjmp	.-318    	; 0x3024 <main+0x50>
			break;

		case PARTY_TIME_OUT:
			MODULE_vidGarageDoor(GARAGE_AUTO, GARAGE_DONT_CARE);
    3162:	81 e0       	ldi	r24, 0x01	; 1
    3164:	62 e0       	ldi	r22, 0x02	; 2
    3166:	0e 94 45 1b 	call	0x368a	; 0x368a <MODULE_vidGarageDoor>
			LED_enuTurnOff(LED_u8_PORTA, LED_u8_PIN7);
    316a:	80 e0       	ldi	r24, 0x00	; 0
    316c:	67 e0       	ldi	r22, 0x07	; 7
    316e:	0e 94 34 12 	call	0x2468	; 0x2468 <LED_enuTurnOff>
			SERVOMOTOR_enuSetAngle(SERVOMOTOR_u8_ZERO_DEGREE, SERVOMOTOR_u8_OC1B);
    3172:	80 e0       	ldi	r24, 0x00	; 0
    3174:	62 e0       	ldi	r22, 0x02	; 2
    3176:	0e 94 4e 11 	call	0x229c	; 0x229c <SERVOMOTOR_enuSetAngle>
    317a:	54 cf       	rjmp	.-344    	; 0x3024 <main+0x50>
			break;

		case GET_MASTER_DOOR_STATUS:
			if(Local_u8_MastarDoorStatus == ROOM_DOOR_LOCKED){
    317c:	8c 81       	ldd	r24, Y+4	; 0x04
    317e:	88 23       	and	r24, r24
    3180:	21 f4       	brne	.+8      	; 0x318a <main+0x1b6>
				SPI_vidTransceive(MASTER_DOOR_CLOSE);
    3182:	85 e0       	ldi	r24, 0x05	; 5
    3184:	0e 94 64 07 	call	0xec8	; 0xec8 <SPI_vidTransceive>
    3188:	4d cf       	rjmp	.-358    	; 0x3024 <main+0x50>
			} else if(Local_u8_MastarDoorStatus == ROOM_DOOR_OPEN){
    318a:	8c 81       	ldd	r24, Y+4	; 0x04
    318c:	8f 3f       	cpi	r24, 0xFF	; 255
    318e:	09 f0       	breq	.+2      	; 0x3192 <main+0x1be>
    3190:	49 cf       	rjmp	.-366    	; 0x3024 <main+0x50>
				SPI_vidTransceive(MASTER_DOOR_OPEN);
    3192:	84 e0       	ldi	r24, 0x04	; 4
    3194:	0e 94 64 07 	call	0xec8	; 0xec8 <SPI_vidTransceive>
    3198:	45 cf       	rjmp	.-374    	; 0x3024 <main+0x50>
			} else {/*.....*/}
			break;

		case GET_MASTER_LIGHT_STATUS:
			if(Local_u8_MastarLightStatus == ROOM_LIHGT_OFF){
    319a:	8a 81       	ldd	r24, Y+2	; 0x02
    319c:	88 23       	and	r24, r24
    319e:	21 f4       	brne	.+8      	; 0x31a8 <main+0x1d4>
				SPI_vidTransceive(MASTER_LIGHT_OFF);
    31a0:	88 e0       	ldi	r24, 0x08	; 8
    31a2:	0e 94 64 07 	call	0xec8	; 0xec8 <SPI_vidTransceive>
    31a6:	3e cf       	rjmp	.-388    	; 0x3024 <main+0x50>
			} else if(Local_u8_MastarLightStatus == ROOM_LIHGT_ON){
    31a8:	8a 81       	ldd	r24, Y+2	; 0x02
    31aa:	8f 3f       	cpi	r24, 0xFF	; 255
    31ac:	09 f0       	breq	.+2      	; 0x31b0 <main+0x1dc>
    31ae:	3a cf       	rjmp	.-396    	; 0x3024 <main+0x50>
				SPI_vidTransceive(MASTER_LIGHT_ON);
    31b0:	87 e0       	ldi	r24, 0x07	; 7
    31b2:	0e 94 64 07 	call	0xec8	; 0xec8 <SPI_vidTransceive>
    31b6:	36 cf       	rjmp	.-404    	; 0x3024 <main+0x50>
			} else {/*.....*/}
			break;

		case GET_TENANT_DOOR_STATUS:
			if(Local_u8_TenantDoorStatus == ROOM_DOOR_LOCKED){
    31b8:	8b 81       	ldd	r24, Y+3	; 0x03
    31ba:	88 23       	and	r24, r24
    31bc:	21 f4       	brne	.+8      	; 0x31c6 <main+0x1f2>
				SPI_vidTransceive(TENANT_DOOR_CLOSE);
    31be:	8b e0       	ldi	r24, 0x0B	; 11
    31c0:	0e 94 64 07 	call	0xec8	; 0xec8 <SPI_vidTransceive>
    31c4:	2f cf       	rjmp	.-418    	; 0x3024 <main+0x50>
			} else if(Local_u8_TenantDoorStatus == ROOM_DOOR_OPEN){
    31c6:	8b 81       	ldd	r24, Y+3	; 0x03
    31c8:	8f 3f       	cpi	r24, 0xFF	; 255
    31ca:	09 f0       	breq	.+2      	; 0x31ce <main+0x1fa>
    31cc:	2b cf       	rjmp	.-426    	; 0x3024 <main+0x50>
				SPI_vidTransceive(TENANT_DOOR_OPEN);
    31ce:	8a e0       	ldi	r24, 0x0A	; 10
    31d0:	0e 94 64 07 	call	0xec8	; 0xec8 <SPI_vidTransceive>
    31d4:	27 cf       	rjmp	.-434    	; 0x3024 <main+0x50>
			} else {/*.....*/}
			break;

		case GET_TENANT_LIGHT_STATUS:
			if(Local_u8_TenantLightStatus == ROOM_LIHGT_OFF){
    31d6:	89 81       	ldd	r24, Y+1	; 0x01
    31d8:	88 23       	and	r24, r24
    31da:	21 f4       	brne	.+8      	; 0x31e4 <main+0x210>
				SPI_vidTransceive(TENANT_LIGHT_OFF);
    31dc:	8e e0       	ldi	r24, 0x0E	; 14
    31de:	0e 94 64 07 	call	0xec8	; 0xec8 <SPI_vidTransceive>
    31e2:	20 cf       	rjmp	.-448    	; 0x3024 <main+0x50>
			} else if(Local_u8_TenantLightStatus == ROOM_LIHGT_ON){
    31e4:	89 81       	ldd	r24, Y+1	; 0x01
    31e6:	8f 3f       	cpi	r24, 0xFF	; 255
    31e8:	09 f0       	breq	.+2      	; 0x31ec <main+0x218>
    31ea:	1c cf       	rjmp	.-456    	; 0x3024 <main+0x50>
				SPI_vidTransceive(TENANT_LIGHT_ON);
    31ec:	8d e0       	ldi	r24, 0x0D	; 13
    31ee:	0e 94 64 07 	call	0xec8	; 0xec8 <SPI_vidTransceive>
    31f2:	18 cf       	rjmp	.-464    	; 0x3024 <main+0x50>
			} else {/*.....*/}
			break;

		case MASTER_DOOR_SWITCH_REQUEST:
			if(Local_u8_MastarDoorStatus == ROOM_DOOR_LOCKED){
    31f4:	8c 81       	ldd	r24, Y+4	; 0x04
    31f6:	88 23       	and	r24, r24
    31f8:	39 f4       	brne	.+14     	; 0x3208 <main+0x234>
				SERVOMOTOR_enuSetAngle(SERVOMOTOR_u8_90_DEGREE, SERVOMOTOR_u8_OC1A);
    31fa:	8a e5       	ldi	r24, 0x5A	; 90
    31fc:	61 e0       	ldi	r22, 0x01	; 1
    31fe:	0e 94 4e 11 	call	0x229c	; 0x229c <SERVOMOTOR_enuSetAngle>
				Local_u8_MastarDoorStatus = ROOM_DOOR_OPEN;
    3202:	8f ef       	ldi	r24, 0xFF	; 255
    3204:	8c 83       	std	Y+4, r24	; 0x04
    3206:	0e cf       	rjmp	.-484    	; 0x3024 <main+0x50>
			} else if(Local_u8_MastarDoorStatus == ROOM_DOOR_OPEN){
    3208:	8c 81       	ldd	r24, Y+4	; 0x04
    320a:	8f 3f       	cpi	r24, 0xFF	; 255
    320c:	09 f0       	breq	.+2      	; 0x3210 <main+0x23c>
    320e:	0a cf       	rjmp	.-492    	; 0x3024 <main+0x50>
				SERVOMOTOR_enuSetAngle(SERVOMOTOR_u8_ZERO_DEGREE, SERVOMOTOR_u8_OC1A);
    3210:	80 e0       	ldi	r24, 0x00	; 0
    3212:	61 e0       	ldi	r22, 0x01	; 1
    3214:	0e 94 4e 11 	call	0x229c	; 0x229c <SERVOMOTOR_enuSetAngle>
				Local_u8_MastarDoorStatus = ROOM_DOOR_LOCKED;
    3218:	1c 82       	std	Y+4, r1	; 0x04
    321a:	04 cf       	rjmp	.-504    	; 0x3024 <main+0x50>
			} else {/*.....*/}
			break;

		case MASTER_LIGHT_SWITCH_REQUEST:
			LED_enuToggleLED(LED_u8_PORTA, LED_u8_PIN5);
    321c:	80 e0       	ldi	r24, 0x00	; 0
    321e:	65 e0       	ldi	r22, 0x05	; 5
    3220:	0e 94 52 12 	call	0x24a4	; 0x24a4 <LED_enuToggleLED>
			if(Local_u8_MastarLightStatus == ROOM_LIHGT_OFF){
    3224:	8a 81       	ldd	r24, Y+2	; 0x02
    3226:	88 23       	and	r24, r24
    3228:	19 f4       	brne	.+6      	; 0x3230 <main+0x25c>
				Local_u8_MastarLightStatus = ROOM_LIHGT_ON;
    322a:	8f ef       	ldi	r24, 0xFF	; 255
    322c:	8a 83       	std	Y+2, r24	; 0x02
    322e:	fa ce       	rjmp	.-524    	; 0x3024 <main+0x50>
			} else if(Local_u8_MastarLightStatus == ROOM_LIHGT_ON){
    3230:	8a 81       	ldd	r24, Y+2	; 0x02
    3232:	8f 3f       	cpi	r24, 0xFF	; 255
    3234:	09 f0       	breq	.+2      	; 0x3238 <main+0x264>
    3236:	f6 ce       	rjmp	.-532    	; 0x3024 <main+0x50>
				Local_u8_MastarLightStatus = ROOM_LIHGT_OFF;
    3238:	1a 82       	std	Y+2, r1	; 0x02
    323a:	f4 ce       	rjmp	.-536    	; 0x3024 <main+0x50>
			} else {/*.....*/}
			break;

		case TENANT_DOOR_SWITCH_REQUEST:
			if(Local_u8_TenantDoorStatus == ROOM_DOOR_LOCKED){
    323c:	8b 81       	ldd	r24, Y+3	; 0x03
    323e:	88 23       	and	r24, r24
    3240:	39 f4       	brne	.+14     	; 0x3250 <main+0x27c>
				SERVOMOTOR_enuSetAngle(SERVOMOTOR_u8_90_DEGREE, SERVOMOTOR_u8_OC1B);
    3242:	8a e5       	ldi	r24, 0x5A	; 90
    3244:	62 e0       	ldi	r22, 0x02	; 2
    3246:	0e 94 4e 11 	call	0x229c	; 0x229c <SERVOMOTOR_enuSetAngle>
				Local_u8_TenantDoorStatus = ROOM_DOOR_OPEN;
    324a:	8f ef       	ldi	r24, 0xFF	; 255
    324c:	8b 83       	std	Y+3, r24	; 0x03
    324e:	ea ce       	rjmp	.-556    	; 0x3024 <main+0x50>
			} else if(Local_u8_TenantDoorStatus == ROOM_DOOR_OPEN){
    3250:	8b 81       	ldd	r24, Y+3	; 0x03
    3252:	8f 3f       	cpi	r24, 0xFF	; 255
    3254:	09 f0       	breq	.+2      	; 0x3258 <main+0x284>
    3256:	e6 ce       	rjmp	.-564    	; 0x3024 <main+0x50>
				SERVOMOTOR_enuSetAngle(SERVOMOTOR_u8_ZERO_DEGREE, SERVOMOTOR_u8_OC1B);
    3258:	80 e0       	ldi	r24, 0x00	; 0
    325a:	62 e0       	ldi	r22, 0x02	; 2
    325c:	0e 94 4e 11 	call	0x229c	; 0x229c <SERVOMOTOR_enuSetAngle>
				Local_u8_TenantDoorStatus = ROOM_DOOR_LOCKED;
    3260:	1b 82       	std	Y+3, r1	; 0x03
    3262:	e0 ce       	rjmp	.-576    	; 0x3024 <main+0x50>
			} else {/*.....*/}
			break;

		case TENANT_LIGHT_SWITCH_REQUEST:
			LED_enuToggleLED(LED_u8_PORTA, LED_u8_PIN7);
    3264:	80 e0       	ldi	r24, 0x00	; 0
    3266:	67 e0       	ldi	r22, 0x07	; 7
    3268:	0e 94 52 12 	call	0x24a4	; 0x24a4 <LED_enuToggleLED>
			if(Local_u8_TenantLightStatus == ROOM_LIHGT_OFF){
    326c:	89 81       	ldd	r24, Y+1	; 0x01
    326e:	88 23       	and	r24, r24
    3270:	19 f4       	brne	.+6      	; 0x3278 <main+0x2a4>
				Local_u8_TenantLightStatus = ROOM_LIHGT_ON;
    3272:	8f ef       	ldi	r24, 0xFF	; 255
    3274:	89 83       	std	Y+1, r24	; 0x01
    3276:	d6 ce       	rjmp	.-596    	; 0x3024 <main+0x50>
			} else if(Local_u8_TenantLightStatus == ROOM_LIHGT_ON){
    3278:	89 81       	ldd	r24, Y+1	; 0x01
    327a:	8f 3f       	cpi	r24, 0xFF	; 255
    327c:	09 f0       	breq	.+2      	; 0x3280 <main+0x2ac>
    327e:	d2 ce       	rjmp	.-604    	; 0x3024 <main+0x50>
				Local_u8_TenantLightStatus = ROOM_LIHGT_OFF;
    3280:	19 82       	std	Y+1, r1	; 0x01
    3282:	d0 ce       	rjmp	.-608    	; 0x3024 <main+0x50>
			} else {/*.....*/}
			break;

		case SET_GARAGE_AUTO:
			MODULE_vidGarageDoor(GARAGE_AUTO, GARAGE_DONT_CARE);
    3284:	81 e0       	ldi	r24, 0x01	; 1
    3286:	62 e0       	ldi	r22, 0x02	; 2
    3288:	0e 94 45 1b 	call	0x368a	; 0x368a <MODULE_vidGarageDoor>
    328c:	cb ce       	rjmp	.-618    	; 0x3024 <main+0x50>
			break;

		case SET_GARAGE_MANUAL:
			MODULE_vidGarageDoor(GARAGE_MANUAL, GARAGE_DONT_CARE);
    328e:	80 e0       	ldi	r24, 0x00	; 0
    3290:	62 e0       	ldi	r22, 0x02	; 2
    3292:	0e 94 45 1b 	call	0x368a	; 0x368a <MODULE_vidGarageDoor>
    3296:	c6 ce       	rjmp	.-628    	; 0x3024 <main+0x50>
			break;

		case OPEN_GARAGE_REQUEST:
			MODULE_vidGarageDoor(GARAGE_MANUAL, GARAGE_OPEN);
    3298:	80 e0       	ldi	r24, 0x00	; 0
    329a:	61 e0       	ldi	r22, 0x01	; 1
    329c:	0e 94 45 1b 	call	0x368a	; 0x368a <MODULE_vidGarageDoor>
    32a0:	c1 ce       	rjmp	.-638    	; 0x3024 <main+0x50>
			break;

		case LOCK_GARAGE_REQUEST:
			MODULE_vidGarageDoor(GARAGE_MANUAL, GARAGE_CLOSE);
    32a2:	80 e0       	ldi	r24, 0x00	; 0
    32a4:	60 e0       	ldi	r22, 0x00	; 0
    32a6:	0e 94 45 1b 	call	0x368a	; 0x368a <MODULE_vidGarageDoor>
    32aa:	bc ce       	rjmp	.-648    	; 0x3024 <main+0x50>
			break;

		case SEND_TEMP_MIN:
			u8TempMin = SPI_vidTransceive(DONT_CARE);
    32ac:	8f ef       	ldi	r24, 0xFF	; 255
    32ae:	0e 94 64 07 	call	0xec8	; 0xec8 <SPI_vidTransceive>
    32b2:	80 93 6a 01 	sts	0x016A, r24
    32b6:	b6 ce       	rjmp	.-660    	; 0x3024 <main+0x50>
			break;

		case SEND_TEP_MAX:
			u8TempMax = SPI_vidTransceive(DONT_CARE);
    32b8:	8f ef       	ldi	r24, 0xFF	; 255
    32ba:	0e 94 64 07 	call	0xec8	; 0xec8 <SPI_vidTransceive>
    32be:	80 93 69 01 	sts	0x0169, r24
    32c2:	b0 ce       	rjmp	.-672    	; 0x3024 <main+0x50>

000032c4 <temperatureActiv>:
		}
	}
}


void temperatureActiv(void){
    32c4:	df 93       	push	r29
    32c6:	cf 93       	push	r28
    32c8:	cd b7       	in	r28, 0x3d	; 61
    32ca:	de b7       	in	r29, 0x3e	; 62
	ADC_enuConversionResult(&Local);
    32cc:	8d e9       	ldi	r24, 0x9D	; 157
    32ce:	91 e0       	ldi	r25, 0x01	; 1
    32d0:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <ADC_enuConversionResult>
	celsius = (Local)*4.88;
    32d4:	80 91 9d 01 	lds	r24, 0x019D
    32d8:	88 2f       	mov	r24, r24
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	aa 27       	eor	r26, r26
    32de:	97 fd       	sbrc	r25, 7
    32e0:	a0 95       	com	r26
    32e2:	ba 2f       	mov	r27, r26
    32e4:	bc 01       	movw	r22, r24
    32e6:	cd 01       	movw	r24, r26
    32e8:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    32ec:	dc 01       	movw	r26, r24
    32ee:	cb 01       	movw	r24, r22
    32f0:	bc 01       	movw	r22, r24
    32f2:	cd 01       	movw	r24, r26
    32f4:	26 ef       	ldi	r18, 0xF6	; 246
    32f6:	38 e2       	ldi	r19, 0x28	; 40
    32f8:	4c e9       	ldi	r20, 0x9C	; 156
    32fa:	50 e4       	ldi	r21, 0x40	; 64
    32fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3300:	dc 01       	movw	r26, r24
    3302:	cb 01       	movw	r24, r22
    3304:	80 93 99 01 	sts	0x0199, r24
    3308:	90 93 9a 01 	sts	0x019A, r25
    330c:	a0 93 9b 01 	sts	0x019B, r26
    3310:	b0 93 9c 01 	sts	0x019C, r27
	celsius = (celsius/10.0);
    3314:	80 91 99 01 	lds	r24, 0x0199
    3318:	90 91 9a 01 	lds	r25, 0x019A
    331c:	a0 91 9b 01 	lds	r26, 0x019B
    3320:	b0 91 9c 01 	lds	r27, 0x019C
    3324:	bc 01       	movw	r22, r24
    3326:	cd 01       	movw	r24, r26
    3328:	20 e0       	ldi	r18, 0x00	; 0
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	40 e2       	ldi	r20, 0x20	; 32
    332e:	51 e4       	ldi	r21, 0x41	; 65
    3330:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3334:	dc 01       	movw	r26, r24
    3336:	cb 01       	movw	r24, r22
    3338:	80 93 99 01 	sts	0x0199, r24
    333c:	90 93 9a 01 	sts	0x019A, r25
    3340:	a0 93 9b 01 	sts	0x019B, r26
    3344:	b0 93 9c 01 	sts	0x019C, r27
	if (celsius < u8TempMin){
    3348:	80 91 6a 01 	lds	r24, 0x016A
    334c:	88 2f       	mov	r24, r24
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	aa 27       	eor	r26, r26
    3352:	97 fd       	sbrc	r25, 7
    3354:	a0 95       	com	r26
    3356:	ba 2f       	mov	r27, r26
    3358:	bc 01       	movw	r22, r24
    335a:	cd 01       	movw	r24, r26
    335c:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    3360:	dc 01       	movw	r26, r24
    3362:	cb 01       	movw	r24, r22
    3364:	20 91 99 01 	lds	r18, 0x0199
    3368:	30 91 9a 01 	lds	r19, 0x019A
    336c:	40 91 9b 01 	lds	r20, 0x019B
    3370:	50 91 9c 01 	lds	r21, 0x019C
    3374:	bc 01       	movw	r22, r24
    3376:	cd 01       	movw	r24, r26
    3378:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    337c:	18 16       	cp	r1, r24
    337e:	5c f4       	brge	.+22     	; 0x3396 <temperatureActiv+0xd2>
		DIO_enuSetPinValue(DIO_u8_PORTA, DIO_u8_PIN2, DIO_u8_LOW);
    3380:	80 e0       	ldi	r24, 0x00	; 0
    3382:	62 e0       	ldi	r22, 0x02	; 2
    3384:	40 e0       	ldi	r20, 0x00	; 0
    3386:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
		DIO_enuSetPinValue(DIO_u8_PORTA, DIO_u8_PIN3, DIO_u8_HIGH);
    338a:	80 e0       	ldi	r24, 0x00	; 0
    338c:	63 e0       	ldi	r22, 0x03	; 3
    338e:	41 e0       	ldi	r20, 0x01	; 1
    3390:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
    3394:	31 c0       	rjmp	.+98     	; 0x33f8 <temperatureActiv+0x134>
	} else if(celsius > u8TempMax){
    3396:	80 91 69 01 	lds	r24, 0x0169
    339a:	88 2f       	mov	r24, r24
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	aa 27       	eor	r26, r26
    33a0:	97 fd       	sbrc	r25, 7
    33a2:	a0 95       	com	r26
    33a4:	ba 2f       	mov	r27, r26
    33a6:	bc 01       	movw	r22, r24
    33a8:	cd 01       	movw	r24, r26
    33aa:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    33ae:	dc 01       	movw	r26, r24
    33b0:	cb 01       	movw	r24, r22
    33b2:	20 91 99 01 	lds	r18, 0x0199
    33b6:	30 91 9a 01 	lds	r19, 0x019A
    33ba:	40 91 9b 01 	lds	r20, 0x019B
    33be:	50 91 9c 01 	lds	r21, 0x019C
    33c2:	bc 01       	movw	r22, r24
    33c4:	cd 01       	movw	r24, r26
    33c6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    33ca:	88 23       	and	r24, r24
    33cc:	5c f4       	brge	.+22     	; 0x33e4 <temperatureActiv+0x120>
		DIO_enuSetPinValue(DIO_u8_PORTA, DIO_u8_PIN3, DIO_u8_LOW);
    33ce:	80 e0       	ldi	r24, 0x00	; 0
    33d0:	63 e0       	ldi	r22, 0x03	; 3
    33d2:	40 e0       	ldi	r20, 0x00	; 0
    33d4:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
		DIO_enuSetPinValue(DIO_u8_PORTA, DIO_u8_PIN2, DIO_u8_HIGH);
    33d8:	80 e0       	ldi	r24, 0x00	; 0
    33da:	62 e0       	ldi	r22, 0x02	; 2
    33dc:	41 e0       	ldi	r20, 0x01	; 1
    33de:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
    33e2:	0a c0       	rjmp	.+20     	; 0x33f8 <temperatureActiv+0x134>
	} else{
		DIO_enuSetPinValue(DIO_u8_PORTA, DIO_u8_PIN2, DIO_u8_LOW);
    33e4:	80 e0       	ldi	r24, 0x00	; 0
    33e6:	62 e0       	ldi	r22, 0x02	; 2
    33e8:	40 e0       	ldi	r20, 0x00	; 0
    33ea:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
		DIO_enuSetPinValue(DIO_u8_PORTA, DIO_u8_PIN3, DIO_u8_LOW);
    33ee:	80 e0       	ldi	r24, 0x00	; 0
    33f0:	63 e0       	ldi	r22, 0x03	; 3
    33f2:	40 e0       	ldi	r20, 0x00	; 0
    33f4:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
	}
}
    33f8:	cf 91       	pop	r28
    33fa:	df 91       	pop	r29
    33fc:	08 95       	ret

000033fe <__vector_2>:

void __vector_2(void)  __attribute__((signal, used));
void __vector_2(void){
    33fe:	1f 92       	push	r1
    3400:	0f 92       	push	r0
    3402:	0f b6       	in	r0, 0x3f	; 63
    3404:	0f 92       	push	r0
    3406:	11 24       	eor	r1, r1
    3408:	8f 92       	push	r8
    340a:	af 92       	push	r10
    340c:	cf 92       	push	r12
    340e:	ef 92       	push	r14
    3410:	0f 93       	push	r16
    3412:	2f 93       	push	r18
    3414:	3f 93       	push	r19
    3416:	4f 93       	push	r20
    3418:	5f 93       	push	r21
    341a:	6f 93       	push	r22
    341c:	7f 93       	push	r23
    341e:	8f 93       	push	r24
    3420:	9f 93       	push	r25
    3422:	af 93       	push	r26
    3424:	bf 93       	push	r27
    3426:	ef 93       	push	r30
    3428:	ff 93       	push	r31
    342a:	df 93       	push	r29
    342c:	cf 93       	push	r28
    342e:	cd b7       	in	r28, 0x3d	; 61
    3430:	de b7       	in	r29, 0x3e	; 62
    3432:	60 97       	sbiw	r28, 0x10	; 16
    3434:	de bf       	out	0x3e, r29	; 62
    3436:	cd bf       	out	0x3d, r28	; 61
    3438:	80 e0       	ldi	r24, 0x00	; 0
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	aa e7       	ldi	r26, 0x7A	; 122
    343e:	b4 e4       	ldi	r27, 0x44	; 68
    3440:	8b 87       	std	Y+11, r24	; 0x0b
    3442:	9c 87       	std	Y+12, r25	; 0x0c
    3444:	ad 87       	std	Y+13, r26	; 0x0d
    3446:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3448:	6b 85       	ldd	r22, Y+11	; 0x0b
    344a:	7c 85       	ldd	r23, Y+12	; 0x0c
    344c:	8d 85       	ldd	r24, Y+13	; 0x0d
    344e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3450:	20 e0       	ldi	r18, 0x00	; 0
    3452:	30 e0       	ldi	r19, 0x00	; 0
    3454:	4a e7       	ldi	r20, 0x7A	; 122
    3456:	53 e4       	ldi	r21, 0x43	; 67
    3458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    345c:	dc 01       	movw	r26, r24
    345e:	cb 01       	movw	r24, r22
    3460:	8f 83       	std	Y+7, r24	; 0x07
    3462:	98 87       	std	Y+8, r25	; 0x08
    3464:	a9 87       	std	Y+9, r26	; 0x09
    3466:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3468:	6f 81       	ldd	r22, Y+7	; 0x07
    346a:	78 85       	ldd	r23, Y+8	; 0x08
    346c:	89 85       	ldd	r24, Y+9	; 0x09
    346e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3470:	20 e0       	ldi	r18, 0x00	; 0
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	40 e8       	ldi	r20, 0x80	; 128
    3476:	5f e3       	ldi	r21, 0x3F	; 63
    3478:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    347c:	88 23       	and	r24, r24
    347e:	2c f4       	brge	.+10     	; 0x348a <__vector_2+0x8c>
		__ticks = 1;
    3480:	81 e0       	ldi	r24, 0x01	; 1
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	9e 83       	std	Y+6, r25	; 0x06
    3486:	8d 83       	std	Y+5, r24	; 0x05
    3488:	3f c0       	rjmp	.+126    	; 0x3508 <__vector_2+0x10a>
	else if (__tmp > 65535)
    348a:	6f 81       	ldd	r22, Y+7	; 0x07
    348c:	78 85       	ldd	r23, Y+8	; 0x08
    348e:	89 85       	ldd	r24, Y+9	; 0x09
    3490:	9a 85       	ldd	r25, Y+10	; 0x0a
    3492:	20 e0       	ldi	r18, 0x00	; 0
    3494:	3f ef       	ldi	r19, 0xFF	; 255
    3496:	4f e7       	ldi	r20, 0x7F	; 127
    3498:	57 e4       	ldi	r21, 0x47	; 71
    349a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    349e:	18 16       	cp	r1, r24
    34a0:	4c f5       	brge	.+82     	; 0x34f4 <__vector_2+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    34a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    34a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    34a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    34aa:	20 e0       	ldi	r18, 0x00	; 0
    34ac:	30 e0       	ldi	r19, 0x00	; 0
    34ae:	40 e2       	ldi	r20, 0x20	; 32
    34b0:	51 e4       	ldi	r21, 0x41	; 65
    34b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34b6:	dc 01       	movw	r26, r24
    34b8:	cb 01       	movw	r24, r22
    34ba:	bc 01       	movw	r22, r24
    34bc:	cd 01       	movw	r24, r26
    34be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c2:	dc 01       	movw	r26, r24
    34c4:	cb 01       	movw	r24, r22
    34c6:	9e 83       	std	Y+6, r25	; 0x06
    34c8:	8d 83       	std	Y+5, r24	; 0x05
    34ca:	0f c0       	rjmp	.+30     	; 0x34ea <__vector_2+0xec>
    34cc:	89 e1       	ldi	r24, 0x19	; 25
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	9c 83       	std	Y+4, r25	; 0x04
    34d2:	8b 83       	std	Y+3, r24	; 0x03
    34d4:	8b 81       	ldd	r24, Y+3	; 0x03
    34d6:	9c 81       	ldd	r25, Y+4	; 0x04
    34d8:	01 97       	sbiw	r24, 0x01	; 1
    34da:	f1 f7       	brne	.-4      	; 0x34d8 <__vector_2+0xda>
    34dc:	9c 83       	std	Y+4, r25	; 0x04
    34de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34e0:	8d 81       	ldd	r24, Y+5	; 0x05
    34e2:	9e 81       	ldd	r25, Y+6	; 0x06
    34e4:	01 97       	sbiw	r24, 0x01	; 1
    34e6:	9e 83       	std	Y+6, r25	; 0x06
    34e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ea:	8d 81       	ldd	r24, Y+5	; 0x05
    34ec:	9e 81       	ldd	r25, Y+6	; 0x06
    34ee:	00 97       	sbiw	r24, 0x00	; 0
    34f0:	69 f7       	brne	.-38     	; 0x34cc <__vector_2+0xce>
    34f2:	14 c0       	rjmp	.+40     	; 0x351c <__vector_2+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34f4:	6f 81       	ldd	r22, Y+7	; 0x07
    34f6:	78 85       	ldd	r23, Y+8	; 0x08
    34f8:	89 85       	ldd	r24, Y+9	; 0x09
    34fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    34fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3500:	dc 01       	movw	r26, r24
    3502:	cb 01       	movw	r24, r22
    3504:	9e 83       	std	Y+6, r25	; 0x06
    3506:	8d 83       	std	Y+5, r24	; 0x05
    3508:	8d 81       	ldd	r24, Y+5	; 0x05
    350a:	9e 81       	ldd	r25, Y+6	; 0x06
    350c:	9a 83       	std	Y+2, r25	; 0x02
    350e:	89 83       	std	Y+1, r24	; 0x01
    3510:	89 81       	ldd	r24, Y+1	; 0x01
    3512:	9a 81       	ldd	r25, Y+2	; 0x02
    3514:	01 97       	sbiw	r24, 0x01	; 1
    3516:	f1 f7       	brne	.-4      	; 0x3514 <__vector_2+0x116>
    3518:	9a 83       	std	Y+2, r25	; 0x02
    351a:	89 83       	std	Y+1, r24	; 0x01
	static u8 Local_u8DoorState;
	_delay_ms(1000);
	DIO_enuGetPinValue(DIO_u8_PORTD, DIO_u8_PIN0, &Local_u8DoorState);
    351c:	27 e8       	ldi	r18, 0x87	; 135
    351e:	31 e0       	ldi	r19, 0x01	; 1
    3520:	83 e0       	ldi	r24, 0x03	; 3
    3522:	60 e0       	ldi	r22, 0x00	; 0
    3524:	a9 01       	movw	r20, r18
    3526:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <DIO_enuGetPinValue>
	switch(Local_u8DoorState){
    352a:	80 91 87 01 	lds	r24, 0x0187
    352e:	28 2f       	mov	r18, r24
    3530:	30 e0       	ldi	r19, 0x00	; 0
    3532:	38 8b       	std	Y+16, r19	; 0x10
    3534:	2f 87       	std	Y+15, r18	; 0x0f
    3536:	8f 85       	ldd	r24, Y+15	; 0x0f
    3538:	98 89       	ldd	r25, Y+16	; 0x10
    353a:	00 97       	sbiw	r24, 0x00	; 0
    353c:	09 f4       	brne	.+2      	; 0x3540 <__vector_2+0x142>
    353e:	46 c0       	rjmp	.+140    	; 0x35cc <__vector_2+0x1ce>
    3540:	2f 85       	ldd	r18, Y+15	; 0x0f
    3542:	38 89       	ldd	r19, Y+16	; 0x10
    3544:	21 30       	cpi	r18, 0x01	; 1
    3546:	31 05       	cpc	r19, r1
    3548:	09 f0       	breq	.+2      	; 0x354c <__vector_2+0x14e>
    354a:	80 c0       	rjmp	.+256    	; 0x364c <__vector_2+0x24e>
		case DIO_u8_HIGH:
			STEPPER_enuFullStep(GARAGE_OPEN_DOOR_ANGLE, STEPPER_u8_CLOCKWISE, DIO_u8_PORTC, DIO_u8_PIN0, DIO_u8_PORTC, DIO_u8_PIN1, DIO_u8_PORTC, DIO_u8_PIN2, DIO_u8_PORTC, DIO_u8_PIN3);
    354c:	00 d0       	rcall	.+0      	; 0x354e <__vector_2+0x150>
    354e:	ed b7       	in	r30, 0x3d	; 61
    3550:	fe b7       	in	r31, 0x3e	; 62
    3552:	31 96       	adiw	r30, 0x01	; 1
    3554:	82 e0       	ldi	r24, 0x02	; 2
    3556:	80 83       	st	Z, r24
    3558:	83 e0       	ldi	r24, 0x03	; 3
    355a:	81 83       	std	Z+1, r24	; 0x01
    355c:	60 e0       	ldi	r22, 0x00	; 0
    355e:	70 e0       	ldi	r23, 0x00	; 0
    3560:	84 e3       	ldi	r24, 0x34	; 52
    3562:	93 e4       	ldi	r25, 0x43	; 67
    3564:	40 e0       	ldi	r20, 0x00	; 0
    3566:	22 e0       	ldi	r18, 0x02	; 2
    3568:	00 e0       	ldi	r16, 0x00	; 0
    356a:	ee 24       	eor	r14, r14
    356c:	68 94       	set
    356e:	e1 f8       	bld	r14, 1
    3570:	cc 24       	eor	r12, r12
    3572:	c3 94       	inc	r12
    3574:	aa 24       	eor	r10, r10
    3576:	68 94       	set
    3578:	a1 f8       	bld	r10, 1
    357a:	88 24       	eor	r8, r8
    357c:	68 94       	set
    357e:	81 f8       	bld	r8, 1
    3580:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <STEPPER_enuFullStep>
    3584:	0f 90       	pop	r0
    3586:	0f 90       	pop	r0
			STEPPER_enuFullStep(GARAGE_OPEN_DOOR_ANGLE, STEPPER_u8_ANTI_CLOCKWISE, DIO_u8_PORTC, DIO_u8_PIN4, DIO_u8_PORTC, DIO_u8_PIN5, DIO_u8_PORTC, DIO_u8_PIN6, DIO_u8_PORTC, DIO_u8_PIN7);
    3588:	00 d0       	rcall	.+0      	; 0x358a <__vector_2+0x18c>
    358a:	ed b7       	in	r30, 0x3d	; 61
    358c:	fe b7       	in	r31, 0x3e	; 62
    358e:	31 96       	adiw	r30, 0x01	; 1
    3590:	82 e0       	ldi	r24, 0x02	; 2
    3592:	80 83       	st	Z, r24
    3594:	87 e0       	ldi	r24, 0x07	; 7
    3596:	81 83       	std	Z+1, r24	; 0x01
    3598:	60 e0       	ldi	r22, 0x00	; 0
    359a:	70 e0       	ldi	r23, 0x00	; 0
    359c:	84 e3       	ldi	r24, 0x34	; 52
    359e:	93 e4       	ldi	r25, 0x43	; 67
    35a0:	41 e0       	ldi	r20, 0x01	; 1
    35a2:	22 e0       	ldi	r18, 0x02	; 2
    35a4:	04 e0       	ldi	r16, 0x04	; 4
    35a6:	ee 24       	eor	r14, r14
    35a8:	68 94       	set
    35aa:	e1 f8       	bld	r14, 1
    35ac:	0f 2e       	mov	r0, r31
    35ae:	f5 e0       	ldi	r31, 0x05	; 5
    35b0:	cf 2e       	mov	r12, r31
    35b2:	f0 2d       	mov	r31, r0
    35b4:	aa 24       	eor	r10, r10
    35b6:	68 94       	set
    35b8:	a1 f8       	bld	r10, 1
    35ba:	0f 2e       	mov	r0, r31
    35bc:	f6 e0       	ldi	r31, 0x06	; 6
    35be:	8f 2e       	mov	r8, r31
    35c0:	f0 2d       	mov	r31, r0
    35c2:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <STEPPER_enuFullStep>
    35c6:	0f 90       	pop	r0
    35c8:	0f 90       	pop	r0
    35ca:	44 c0       	rjmp	.+136    	; 0x3654 <__vector_2+0x256>
			break;
		case DIO_u8_LOW:
			STEPPER_enuFullStep(GARAGE_CLOSE_DOOR_ANGLE, STEPPER_u8_CLOCKWISE, DIO_u8_PORTC, DIO_u8_PIN0, DIO_u8_PORTC, DIO_u8_PIN1, DIO_u8_PORTC, DIO_u8_PIN2, DIO_u8_PORTC, DIO_u8_PIN3);
    35cc:	00 d0       	rcall	.+0      	; 0x35ce <__vector_2+0x1d0>
    35ce:	ed b7       	in	r30, 0x3d	; 61
    35d0:	fe b7       	in	r31, 0x3e	; 62
    35d2:	31 96       	adiw	r30, 0x01	; 1
    35d4:	82 e0       	ldi	r24, 0x02	; 2
    35d6:	80 83       	st	Z, r24
    35d8:	83 e0       	ldi	r24, 0x03	; 3
    35da:	81 83       	std	Z+1, r24	; 0x01
    35dc:	60 e0       	ldi	r22, 0x00	; 0
    35de:	70 e0       	ldi	r23, 0x00	; 0
    35e0:	80 e0       	ldi	r24, 0x00	; 0
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	40 e0       	ldi	r20, 0x00	; 0
    35e6:	22 e0       	ldi	r18, 0x02	; 2
    35e8:	00 e0       	ldi	r16, 0x00	; 0
    35ea:	ee 24       	eor	r14, r14
    35ec:	68 94       	set
    35ee:	e1 f8       	bld	r14, 1
    35f0:	cc 24       	eor	r12, r12
    35f2:	c3 94       	inc	r12
    35f4:	aa 24       	eor	r10, r10
    35f6:	68 94       	set
    35f8:	a1 f8       	bld	r10, 1
    35fa:	88 24       	eor	r8, r8
    35fc:	68 94       	set
    35fe:	81 f8       	bld	r8, 1
    3600:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <STEPPER_enuFullStep>
    3604:	0f 90       	pop	r0
    3606:	0f 90       	pop	r0
			STEPPER_enuFullStep(GARAGE_CLOSE_DOOR_ANGLE, STEPPER_u8_ANTI_CLOCKWISE, DIO_u8_PORTC, DIO_u8_PIN4, DIO_u8_PORTC, DIO_u8_PIN5, DIO_u8_PORTC, DIO_u8_PIN6, DIO_u8_PORTC, DIO_u8_PIN7);
    3608:	00 d0       	rcall	.+0      	; 0x360a <__vector_2+0x20c>
    360a:	ed b7       	in	r30, 0x3d	; 61
    360c:	fe b7       	in	r31, 0x3e	; 62
    360e:	31 96       	adiw	r30, 0x01	; 1
    3610:	82 e0       	ldi	r24, 0x02	; 2
    3612:	80 83       	st	Z, r24
    3614:	87 e0       	ldi	r24, 0x07	; 7
    3616:	81 83       	std	Z+1, r24	; 0x01
    3618:	60 e0       	ldi	r22, 0x00	; 0
    361a:	70 e0       	ldi	r23, 0x00	; 0
    361c:	80 e0       	ldi	r24, 0x00	; 0
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	41 e0       	ldi	r20, 0x01	; 1
    3622:	22 e0       	ldi	r18, 0x02	; 2
    3624:	04 e0       	ldi	r16, 0x04	; 4
    3626:	ee 24       	eor	r14, r14
    3628:	68 94       	set
    362a:	e1 f8       	bld	r14, 1
    362c:	0f 2e       	mov	r0, r31
    362e:	f5 e0       	ldi	r31, 0x05	; 5
    3630:	cf 2e       	mov	r12, r31
    3632:	f0 2d       	mov	r31, r0
    3634:	aa 24       	eor	r10, r10
    3636:	68 94       	set
    3638:	a1 f8       	bld	r10, 1
    363a:	0f 2e       	mov	r0, r31
    363c:	f6 e0       	ldi	r31, 0x06	; 6
    363e:	8f 2e       	mov	r8, r31
    3640:	f0 2d       	mov	r31, r0
    3642:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <STEPPER_enuFullStep>
    3646:	0f 90       	pop	r0
    3648:	0f 90       	pop	r0
    364a:	04 c0       	rjmp	.+8      	; 0x3654 <__vector_2+0x256>
			break;
		default:
			LED_enuTurnOn(LED_u8_PORTD, LED_u8_PIN7);
    364c:	83 e0       	ldi	r24, 0x03	; 3
    364e:	67 e0       	ldi	r22, 0x07	; 7
    3650:	0e 94 16 12 	call	0x242c	; 0x242c <LED_enuTurnOn>

	}
}
    3654:	60 96       	adiw	r28, 0x10	; 16
    3656:	de bf       	out	0x3e, r29	; 62
    3658:	cd bf       	out	0x3d, r28	; 61
    365a:	cf 91       	pop	r28
    365c:	df 91       	pop	r29
    365e:	ff 91       	pop	r31
    3660:	ef 91       	pop	r30
    3662:	bf 91       	pop	r27
    3664:	af 91       	pop	r26
    3666:	9f 91       	pop	r25
    3668:	8f 91       	pop	r24
    366a:	7f 91       	pop	r23
    366c:	6f 91       	pop	r22
    366e:	5f 91       	pop	r21
    3670:	4f 91       	pop	r20
    3672:	3f 91       	pop	r19
    3674:	2f 91       	pop	r18
    3676:	0f 91       	pop	r16
    3678:	ef 90       	pop	r14
    367a:	cf 90       	pop	r12
    367c:	af 90       	pop	r10
    367e:	8f 90       	pop	r8
    3680:	0f 90       	pop	r0
    3682:	0f be       	out	0x3f, r0	; 63
    3684:	0f 90       	pop	r0
    3686:	1f 90       	pop	r1
    3688:	18 95       	reti

0000368a <MODULE_vidGarageDoor>:
 * Description: setting garage door control method
 * Arguments:	first argument:  Copy_u8ControlMethod  ---->  options(GARAGE_MANUAL, GARAGE_AUTO)
 * 				second argument: Copy_u8DoorState  ---->  options(GARAGE_CLOSE, GARAGE_OPEN, GARAGE_DONT_CARE)
 * Return:	void
*/
void MODULE_vidGarageDoor(u8 Copy_u8ControlMethod, u8 Copy_u8DoorState){
    368a:	df 93       	push	r29
    368c:	cf 93       	push	r28
    368e:	00 d0       	rcall	.+0      	; 0x3690 <MODULE_vidGarageDoor+0x6>
    3690:	00 d0       	rcall	.+0      	; 0x3692 <MODULE_vidGarageDoor+0x8>
    3692:	cd b7       	in	r28, 0x3d	; 61
    3694:	de b7       	in	r29, 0x3e	; 62
    3696:	89 83       	std	Y+1, r24	; 0x01
    3698:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8ControlMethod){
    369a:	89 81       	ldd	r24, Y+1	; 0x01
    369c:	28 2f       	mov	r18, r24
    369e:	30 e0       	ldi	r19, 0x00	; 0
    36a0:	3c 83       	std	Y+4, r19	; 0x04
    36a2:	2b 83       	std	Y+3, r18	; 0x03
    36a4:	8b 81       	ldd	r24, Y+3	; 0x03
    36a6:	9c 81       	ldd	r25, Y+4	; 0x04
    36a8:	00 97       	sbiw	r24, 0x00	; 0
    36aa:	31 f0       	breq	.+12     	; 0x36b8 <MODULE_vidGarageDoor+0x2e>
    36ac:	2b 81       	ldd	r18, Y+3	; 0x03
    36ae:	3c 81       	ldd	r19, Y+4	; 0x04
    36b0:	21 30       	cpi	r18, 0x01	; 1
    36b2:	31 05       	cpc	r19, r1
    36b4:	b9 f0       	breq	.+46     	; 0x36e4 <MODULE_vidGarageDoor+0x5a>
    36b6:	1a c0       	rjmp	.+52     	; 0x36ec <MODULE_vidGarageDoor+0x62>
		case GARAGE_MANUAL:
			RELAY_vidSetNormallyOpen(RELAY_u8_PORTD, RELAY_u8_PIN1);
    36b8:	83 e0       	ldi	r24, 0x03	; 3
    36ba:	61 e0       	ldi	r22, 0x01	; 1
    36bc:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <RELAY_vidSetNormallyOpen>
			if(Copy_u8DoorState == GARAGE_CLOSE){
    36c0:	8a 81       	ldd	r24, Y+2	; 0x02
    36c2:	88 23       	and	r24, r24
    36c4:	31 f4       	brne	.+12     	; 0x36d2 <MODULE_vidGarageDoor+0x48>
				DIO_enuSetPinValue(DIO_u8_PORTD,DIO_u8_PIN6,DIO_u8_LOW);
    36c6:	83 e0       	ldi	r24, 0x03	; 3
    36c8:	66 e0       	ldi	r22, 0x06	; 6
    36ca:	40 e0       	ldi	r20, 0x00	; 0
    36cc:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
    36d0:	0d c0       	rjmp	.+26     	; 0x36ec <MODULE_vidGarageDoor+0x62>
			} else if(Copy_u8DoorState == GARAGE_OPEN){
    36d2:	8a 81       	ldd	r24, Y+2	; 0x02
    36d4:	81 30       	cpi	r24, 0x01	; 1
    36d6:	51 f4       	brne	.+20     	; 0x36ec <MODULE_vidGarageDoor+0x62>
				DIO_enuSetPinValue(DIO_u8_PORTD,DIO_u8_PIN6,DIO_u8_HIGH);
    36d8:	83 e0       	ldi	r24, 0x03	; 3
    36da:	66 e0       	ldi	r22, 0x06	; 6
    36dc:	41 e0       	ldi	r20, 0x01	; 1
    36de:	0e 94 6d 0c 	call	0x18da	; 0x18da <DIO_enuSetPinValue>
    36e2:	04 c0       	rjmp	.+8      	; 0x36ec <MODULE_vidGarageDoor+0x62>
			} else { /*.....*/ }
			break;
		case GARAGE_AUTO:
			RELAY_vidSetNormallyClose(RELAY_u8_PORTD, RELAY_u8_PIN1);
    36e4:	83 e0       	ldi	r24, 0x03	; 3
    36e6:	61 e0       	ldi	r22, 0x01	; 1
    36e8:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <RELAY_vidSetNormallyClose>
			break;
	}

}
    36ec:	0f 90       	pop	r0
    36ee:	0f 90       	pop	r0
    36f0:	0f 90       	pop	r0
    36f2:	0f 90       	pop	r0
    36f4:	cf 91       	pop	r28
    36f6:	df 91       	pop	r29
    36f8:	08 95       	ret

000036fa <MODULE_vidTemperatureInit>:
 * Description: setting garage door control method
 * Arguments:	first argument:  Copy_u8ControlMethod  ---->  options(GARAGE_MANUAL, GARAGE_AUTO)
 * 				second argument: Copy_u8DoorState  ---->  options(GARAGE_CLOSE, GARAGE_OPEN, GARAGE_DONT_CARE)
 * Return:	void
*/
void MODULE_vidTemperatureInit(u8 Copy_u8ADC_read, u8 Copy_u8InstantinusDegree){
    36fa:	df 93       	push	r29
    36fc:	cf 93       	push	r28
    36fe:	00 d0       	rcall	.+0      	; 0x3700 <MODULE_vidTemperatureInit+0x6>
    3700:	cd b7       	in	r28, 0x3d	; 61
    3702:	de b7       	in	r29, 0x3e	; 62
    3704:	89 83       	std	Y+1, r24	; 0x01
    3706:	6a 83       	std	Y+2, r22	; 0x02
//	ADC_enuEnableADC(ADC_u8_START_CONVERSION, ADC_u8_INT_DISABLE, ADC_u8_PRESCALER_64);
	ADC_enuConversionResult(&Copy_u8ADC_read);
    3708:	ce 01       	movw	r24, r28
    370a:	01 96       	adiw	r24, 0x01	; 1
    370c:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <ADC_enuConversionResult>
	Copy_u8InstantinusDegree = (Copy_u8ADC_read * 4.88);
    3710:	89 81       	ldd	r24, Y+1	; 0x01
    3712:	88 2f       	mov	r24, r24
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	aa 27       	eor	r26, r26
    3718:	97 fd       	sbrc	r25, 7
    371a:	a0 95       	com	r26
    371c:	ba 2f       	mov	r27, r26
    371e:	bc 01       	movw	r22, r24
    3720:	cd 01       	movw	r24, r26
    3722:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    3726:	dc 01       	movw	r26, r24
    3728:	cb 01       	movw	r24, r22
    372a:	bc 01       	movw	r22, r24
    372c:	cd 01       	movw	r24, r26
    372e:	26 ef       	ldi	r18, 0xF6	; 246
    3730:	38 e2       	ldi	r19, 0x28	; 40
    3732:	4c e9       	ldi	r20, 0x9C	; 156
    3734:	50 e4       	ldi	r21, 0x40	; 64
    3736:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    373a:	dc 01       	movw	r26, r24
    373c:	cb 01       	movw	r24, r22
    373e:	bc 01       	movw	r22, r24
    3740:	cd 01       	movw	r24, r26
    3742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3746:	dc 01       	movw	r26, r24
    3748:	cb 01       	movw	r24, r22
    374a:	8a 83       	std	Y+2, r24	; 0x02
	Copy_u8InstantinusDegree = (Copy_u8InstantinusDegree / 10.0);
    374c:	8a 81       	ldd	r24, Y+2	; 0x02
    374e:	88 2f       	mov	r24, r24
    3750:	90 e0       	ldi	r25, 0x00	; 0
    3752:	aa 27       	eor	r26, r26
    3754:	97 fd       	sbrc	r25, 7
    3756:	a0 95       	com	r26
    3758:	ba 2f       	mov	r27, r26
    375a:	bc 01       	movw	r22, r24
    375c:	cd 01       	movw	r24, r26
    375e:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    3762:	dc 01       	movw	r26, r24
    3764:	cb 01       	movw	r24, r22
    3766:	bc 01       	movw	r22, r24
    3768:	cd 01       	movw	r24, r26
    376a:	20 e0       	ldi	r18, 0x00	; 0
    376c:	30 e0       	ldi	r19, 0x00	; 0
    376e:	40 e2       	ldi	r20, 0x20	; 32
    3770:	51 e4       	ldi	r21, 0x41	; 65
    3772:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3776:	dc 01       	movw	r26, r24
    3778:	cb 01       	movw	r24, r22
    377a:	bc 01       	movw	r22, r24
    377c:	cd 01       	movw	r24, r26
    377e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3782:	dc 01       	movw	r26, r24
    3784:	cb 01       	movw	r24, r22
    3786:	8a 83       	std	Y+2, r24	; 0x02
}
    3788:	0f 90       	pop	r0
    378a:	0f 90       	pop	r0
    378c:	cf 91       	pop	r28
    378e:	df 91       	pop	r29
    3790:	08 95       	ret

00003792 <__udivmodsi4>:
    3792:	a1 e2       	ldi	r26, 0x21	; 33
    3794:	1a 2e       	mov	r1, r26
    3796:	aa 1b       	sub	r26, r26
    3798:	bb 1b       	sub	r27, r27
    379a:	fd 01       	movw	r30, r26
    379c:	0d c0       	rjmp	.+26     	; 0x37b8 <__udivmodsi4_ep>

0000379e <__udivmodsi4_loop>:
    379e:	aa 1f       	adc	r26, r26
    37a0:	bb 1f       	adc	r27, r27
    37a2:	ee 1f       	adc	r30, r30
    37a4:	ff 1f       	adc	r31, r31
    37a6:	a2 17       	cp	r26, r18
    37a8:	b3 07       	cpc	r27, r19
    37aa:	e4 07       	cpc	r30, r20
    37ac:	f5 07       	cpc	r31, r21
    37ae:	20 f0       	brcs	.+8      	; 0x37b8 <__udivmodsi4_ep>
    37b0:	a2 1b       	sub	r26, r18
    37b2:	b3 0b       	sbc	r27, r19
    37b4:	e4 0b       	sbc	r30, r20
    37b6:	f5 0b       	sbc	r31, r21

000037b8 <__udivmodsi4_ep>:
    37b8:	66 1f       	adc	r22, r22
    37ba:	77 1f       	adc	r23, r23
    37bc:	88 1f       	adc	r24, r24
    37be:	99 1f       	adc	r25, r25
    37c0:	1a 94       	dec	r1
    37c2:	69 f7       	brne	.-38     	; 0x379e <__udivmodsi4_loop>
    37c4:	60 95       	com	r22
    37c6:	70 95       	com	r23
    37c8:	80 95       	com	r24
    37ca:	90 95       	com	r25
    37cc:	9b 01       	movw	r18, r22
    37ce:	ac 01       	movw	r20, r24
    37d0:	bd 01       	movw	r22, r26
    37d2:	cf 01       	movw	r24, r30
    37d4:	08 95       	ret

000037d6 <__prologue_saves__>:
    37d6:	2f 92       	push	r2
    37d8:	3f 92       	push	r3
    37da:	4f 92       	push	r4
    37dc:	5f 92       	push	r5
    37de:	6f 92       	push	r6
    37e0:	7f 92       	push	r7
    37e2:	8f 92       	push	r8
    37e4:	9f 92       	push	r9
    37e6:	af 92       	push	r10
    37e8:	bf 92       	push	r11
    37ea:	cf 92       	push	r12
    37ec:	df 92       	push	r13
    37ee:	ef 92       	push	r14
    37f0:	ff 92       	push	r15
    37f2:	0f 93       	push	r16
    37f4:	1f 93       	push	r17
    37f6:	cf 93       	push	r28
    37f8:	df 93       	push	r29
    37fa:	cd b7       	in	r28, 0x3d	; 61
    37fc:	de b7       	in	r29, 0x3e	; 62
    37fe:	ca 1b       	sub	r28, r26
    3800:	db 0b       	sbc	r29, r27
    3802:	0f b6       	in	r0, 0x3f	; 63
    3804:	f8 94       	cli
    3806:	de bf       	out	0x3e, r29	; 62
    3808:	0f be       	out	0x3f, r0	; 63
    380a:	cd bf       	out	0x3d, r28	; 61
    380c:	09 94       	ijmp

0000380e <__epilogue_restores__>:
    380e:	2a 88       	ldd	r2, Y+18	; 0x12
    3810:	39 88       	ldd	r3, Y+17	; 0x11
    3812:	48 88       	ldd	r4, Y+16	; 0x10
    3814:	5f 84       	ldd	r5, Y+15	; 0x0f
    3816:	6e 84       	ldd	r6, Y+14	; 0x0e
    3818:	7d 84       	ldd	r7, Y+13	; 0x0d
    381a:	8c 84       	ldd	r8, Y+12	; 0x0c
    381c:	9b 84       	ldd	r9, Y+11	; 0x0b
    381e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3820:	b9 84       	ldd	r11, Y+9	; 0x09
    3822:	c8 84       	ldd	r12, Y+8	; 0x08
    3824:	df 80       	ldd	r13, Y+7	; 0x07
    3826:	ee 80       	ldd	r14, Y+6	; 0x06
    3828:	fd 80       	ldd	r15, Y+5	; 0x05
    382a:	0c 81       	ldd	r16, Y+4	; 0x04
    382c:	1b 81       	ldd	r17, Y+3	; 0x03
    382e:	aa 81       	ldd	r26, Y+2	; 0x02
    3830:	b9 81       	ldd	r27, Y+1	; 0x01
    3832:	ce 0f       	add	r28, r30
    3834:	d1 1d       	adc	r29, r1
    3836:	0f b6       	in	r0, 0x3f	; 63
    3838:	f8 94       	cli
    383a:	de bf       	out	0x3e, r29	; 62
    383c:	0f be       	out	0x3f, r0	; 63
    383e:	cd bf       	out	0x3d, r28	; 61
    3840:	ed 01       	movw	r28, r26
    3842:	08 95       	ret

00003844 <_exit>:
    3844:	f8 94       	cli

00003846 <__stop_program>:
    3846:	ff cf       	rjmp	.-2      	; 0x3846 <__stop_program>
